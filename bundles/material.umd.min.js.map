{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.3-28b33aa');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n    const colorChanges = changes.color;\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes['svgIcon']) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["args","selector","inputs","providers","provide","CdkTreeNodeDef","useExisting","MatTreeNodeDef","data","type","Input","MatNestedTreeNode","_super","_elementRef","_tree","_differs","tabIndex","_this","call","this","Number","tslib_1.__extends","prototype","ngAfterContentInit","ngOnDestroy","Directive","exportAs","host","[attr.aria-expanded]","[attr.role]","class","CdkNestedTreeNode","CdkTreeNode","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_computePositionAnimationState","dir","changeDetectorRef","markForCheck","_translateTabComplete","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","_onCentered","emit","_afterLeavingCenter","MatTabBody","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","_dirChangeSubscription","unsubscribe","complete","_onTranslateTabStarted","isCentering","_beforeCentering","_onCentering","nativeElement","clientHeight","_getLayoutDirection","_dir","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","[attr.aria-level]","MatStepHeader","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_element","_drawers","drawer","_end","throwMatDuplicatedDrawerError","_start","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatListOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","underlineRef","_connectionContainerRef","_inputContainerRef","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/version.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/material2/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-beta.2-021b85a');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","this","role","Number","tslib_1.__extends","type","Directive","args","selector","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","CdkTreeNode","useExisting","ElementRef","CdkTree","String","decorators","Attribute","Input","_MatTreeNodeMixinBase","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","descendants","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","_leavingSub","unsubscribe","ComponentFactoryResolver","ViewContainerRef","MatTabBody","Inject","forwardRef","MatTabBodyPortal","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","static","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_node","mixinTabIndex","Injectable","providedIn","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","_stringLabel","label","MatStepLabel","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","startWith","hasAttached","attach","detach","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","drawer","mode","openedChange","_drawers","_setContainerClass","opened","onPositionChanged","_validateDrawers","_updateContentMargins","_element","_end","throwMatDuplicatedDrawerError","_start","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","_width","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","MatProgressSpinner","diameters","Set","BASE_SIZE","styleTag","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_doCheckSubject","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","_noopAnimations","_forceAnimations","diameter","strokeWidth","animationClass","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-required-validator.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusableOption} from '@angular/cdk/a11y';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MatInkBar} from '../ink-bar';\nimport {MatPaginatedTabHeader} from '../paginated-tab-header';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    'class': 'mat-tab-nav-bar mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, OnDestroy {\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true}) _items: QueryList<MatTabLink>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  /** Theme color of the nav bar. */\n  @Input() color: ThemePalette = 'primary';\n\n  constructor(elementRef: ElementRef,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              /**\n               * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n               */\n              @Optional() platform?: Platform,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected() {\n    // noop\n  }\n\n  ngAfterContentInit() {\n    // We need this to run before the `changes` subscription in parent to ensure that the\n    // selectedIndex is up-to-date by the time the super class starts looking for it.\n    this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this.updateActiveLink();\n    });\n\n    super.ngAfterContentInit();\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(_element?: ElementRef) {\n    if (!this._items) {\n      return;\n    }\n\n    const items = this._items.toArray();\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].active) {\n        this.selectedIndex = i;\n        this._changeDetectorRef.markForCheck();\n        return;\n      }\n    }\n\n    // The ink bar should hide itself if no items are active.\n    this.selectedIndex = -1;\n    this._inkBar.hide();\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active ? \"page\" : null',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable,\n  CanDisableRipple, HasTabIndex, RippleTarget, FocusableOption {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this.elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (animationMode === 'NoopAnimations') {\n      this.rippleConfig.animation = {enterDuration: 0, exitDuration: 0};\n    }\n\n    _focusMonitor.monitor(elementRef);\n  }\n\n  focus() {\n    this.elementRef.nativeElement.focus();\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this.elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends CdkNestedTreeNode<T> implements AfterContentInit,\n  OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {_supportsShadowDom} from '@angular/cdk/platform';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {defer, fromEvent, merge, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {delay, filter, map, switchMap, take, tap} from 'rxjs/operators';\n\nimport {MatAutocomplete} from './autocomplete';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'class': 'mat-autocomplete-trigger',\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges,\n  OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Whether the element is inside of a ShadowRoot component. */\n  private _isInsideShadowRoot: boolean;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterViewInit() {\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n\n      if (_supportsShadowDom()) {\n        const element = this._element.nativeElement;\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n        // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n        // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n        this._isInsideShadowRoot = rootNode instanceof (window as any).ShadowRoot;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n               fromEvent(this._document, 'click') as Observable<MouseEvent>,\n               fromEvent(this._document, 'touchend') as Observable<TouchEvent>)\n        .pipe(filter(event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget =\n              (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                                                                event.target) as HTMLElement;\n          const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n\n          return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input() typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone, Optional} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectorRef,\n  ElementRef,\n  NgZone,\n  Optional,\n  QueryList,\n  EventEmitter,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\ntype MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n */\nexport abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit,\n  AfterViewInit, OnDestroy {\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: MatInkBar;\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              /**\n               * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n               * parameters to become required.\n               */\n              private _platform?: Platform,\n              public _animationMode?: string) {\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        this._itemSelected(event);\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._items) { return true; }\n\n    const tab = this._items ? this._items.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem = this._items && this._items.length ?\n        this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n  Input,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['selectedIndex'],\n  outputs: ['selectFocusedIndex', 'indexFocused'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends MatPaginatedTabHeader implements AfterContentChecked,\n  AfterContentInit, AfterViewInit, OnDestroy {\n\n  @ContentChildren(MatTabLabelWrapper) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Optional() dir: Directionality,\n              ngZone: NgZone,\n              platform: Platform,\n              // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} – ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return undefined;\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    );\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    const manager = this._keyManager;\n\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => manager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      manager.setFocusOrigin(origin).setFirstItemActive();\n    }\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n\n    this._restoreFocus();\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /** Restores focus to the element that was focused before the menu was open. */\n  private _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._state = MatDialogState.CLOSED;\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => {\n        this._overlayRef.dispose();\n      }, event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options);\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatButton` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    this._getHostElement().focus(options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    const element = this._elementRef.nativeElement;\n\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(element);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      const activeElement = this._document.activeElement;\n\n      // Otherwise ensure that focus is on the container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the bottom sheet already, because it's possible that the\n      // consumer turned off `autoFocus` in order to move focus themselves.\n      if (activeElement !== element && !element.contains(activeElement)) {\n        element.focus();\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          clearTimeout(this._closeFallbackTimeout);\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(event => {\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has fired.\n        this._closeFallbackTimeout = setTimeout(() => {\n          this._overlayRef.dispose();\n        }, event.totalTime + 100);\n\n        this._overlayRef.detachBackdrop();\n      });\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusOptions, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.1.4-bfa185305');\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from its utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.1.4-bfa185305');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_disableRipple","value","coerceBooleanProperty","MatTabNav","prototype","_itemSelected","ngAfterContentInit","_this","_items","changes","pipe","startWith","takeUntil","_destroyed","subscribe","updateActiveLink","_super","call","_element","items","toArray","i","length","active","selectedIndex","_changeDetectorRef","markForCheck","_inkBar","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","Platform","decorators","Optional","String","Inject","ANIMATION_MODULE_TYPE","propDecorators","_tabListContainer","ViewChild","static","_tabList","_nextPaginator","_previousPaginator","backgroundColor","Input","disableRipple","color","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","MatTabLink","_tabNavBar","elementRef","ngZone","platform","globalRippleOptions","tabIndex","_focusMonitor","animationMode","_tabLinkRipple","setupTriggerEvents","nativeElement","rippleConfig","parseInt","animation","enterDuration","exitDuration","monitor","get","_isActive","enumerable","configurable","disabled","stopMonitoring","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_elementRef","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","_MatTreeNodeMixinBase","CdkTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","_tabIndex","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTableDataSource","_filter","_sort","sort","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","_internalPageChanges","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","_renderChangesSubscription","unsubscribe","_renderData","obj","filterPredicate","_updatePaginator","sortData","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","_animationMode","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","[class._mat-animation-noopable]","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","fromEvent","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","_handlePaginatorPress","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","containerEl","scrollLeft","scrollWidth","scrollDistance","translateX","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","timer","maxScrollDistance","distance","max","Directionality","viewportRuler","outputs","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_animationDuration","test","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_setAnimationTransitionState","_arrowDirection","MatSortHeader","viewState","_viewState","_disableViewStateAnimation","_isDisabled","_isSorted","_showIndicatorHint","id","_getArrowDirectionState","_getArrowViewState","_updateArrowDirection","start","_getAriaSortAttribute","_renderArrow","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","ContentChildren","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","backgroundSize","axis","sign","tickSize","rotate","_isMinValue","_thumbGap","vertical","_invertAxis","MatSlider","_getDirection","percent","_shouldInvertMouseCoords","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_tickIntervalPercent","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","options","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","thumbLabel","displayWith","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_setIndicatorHintVisible","visible","_openedVia","openedVia","_restoreFocus","_updateFocusTrapState","MatDrawer","_focusTrap","enabled","_isFocusTrapEnabled","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-drawer-opened]","mode","HostBinding","openedChange","_openedStream","openedStart","_closedStream","closedStart","onPositionChanged","opened","_animationStartListener","HostListener","_animationDoneListener","backdropClick","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","drawer","_drawers","_isDrawerOpen","_start","_end","debounceTime","_contentMarginChanges","close","_left","_width","_right","_contentMargins","ngDoCheck","_setContainerClass","className","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","NG_VALIDATORS","MatSlideToggleRequiredValidator","CheckboxRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","scale","MatProgressSpinner","_diameter","BASE_SIZE","_fallbackAnimation","trackedDiameters","_diameters","head","Set","_noopAnimations","_forceAnimations","diameter","strokeWidth","_styleRoot","_attachStyleNode","_strokeWidth","newValue","_getShadowRoot","animationClass","viewBox","_circleRadius","PI","_strokeCircumference","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","_getAnimationText","appendChild","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_trapFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_enableAnimations","destroy","_animationStarted","isOpen","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanelWrap","transformPanel","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","typeaheadDebounceInterval","sortComparator","selectionChange","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_setIsMenuOpen","parentMenu","_setMenuElevation","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","panelOpen","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","withTypeAhead","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","find","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","MatListOption","_handleBlur","selectionList","_hasFocus","_setSelected","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_setOptionsFromValues","_i","item","disableRippleChanges","colorChanges","firstChange","_isDestroyed","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","_updateDirectDescendants","_item","setFocusOrigin","parentElement","getAttribute","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","_allItems","reset","notifyOnChanges","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_containsFocus","accordion","_handleHeaderFocus","expandedHeight","collapsedHeight","MatExpansionPanelHeader","_animationsDisabled","_toggle","_isExpanded","expanded","_getExpandedState","_getPanelId","_getTogglePosition","togglePosition","_showToggle","hideToggle","_keydown","_handleHeaderKeydown","_parentChangeSubscription","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","header","MAT_ACCORDION","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","handleError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ErrorHandler","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatCalendar","MatDatepickerIntl","headerComponent","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","params","bodyExpansion","uniqueId","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","_lazyContent","_body","focusedElement","bodyElement","useValue","[class.mat-expansion-panel-spacing]","accordionHideToggleChange","[attr.readonly]","MatInput","AutofillMonitor","readonly","_MatInputMixinBase","MatInputModule","MatTextareaAutosize","TextFieldModule","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_initWeekdays","_createWeekCells","_matCalendarBody","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","yearsPerPage","isSameMultiYearView","_selectedYear","_todayYear","activeYear","minYearOfPage","getActiveOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","MatChipList","_clearSelection","chips","chip","correspondingChip","selectViaInteraction","skip","MatChipListChange","_blur","_hasFocusedChip","_chipInput","focused","_markAsTouched","_allowFocusEscape","_userTabIndex","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_closeFallbackTimeout","_result","dialogResult","detachBackdrop","totalTime","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","getState","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","splice","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","minRows","maxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","BUTTON_HOST_ATTRIBUTES","DEFAULT_ROUND_BUTTON_COLOR","_origin","attribute","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_supportsShadowDom","rootNode","getRootNode","_isInsideShadowRoot","ShadowRoot","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","composedPath","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","year1","dateAdapter","year2","startingYear","getStartingYear","exp","parentRegistry","httpClient","sanitizer","errorHandler","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}
{"version":3,"file":"material.umd.min.js","sources":["../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sort/sort-header.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/card/card.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase: CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor &\n    typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-rc.0-c185950');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatTreeNodeOutlet","viewContainer","_node","this","Directive","selector","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","Optional","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_elementRef","_tree","tabIndex","_this","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","CommonModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","transform","minHeight","transition","animate","style","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","static","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","MatSortModule","MatSort","MatSortHeader","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","trigger","visibility","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","blur","MatSlider","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","_doCheckSubject","_drawers","_element","_updateContentMargins","drawer","mode","openedChange","_setContainerClass","opened","onPositionChanged","_validateDrawers","_end","_start","throwMatDuplicatedDrawerError","_right","_left","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","_width","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","diameters","INDETERMINATE_ANIMATION_TEMPLATE","replace","_strokeCircumference","Set","BASE_SIZE","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","debounceTime","ngDoCheck","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","_fallbackAnimation","_diameter","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","_color","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
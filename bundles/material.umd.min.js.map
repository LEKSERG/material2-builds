{"version":3,"file":"material.umd.min.js","sources":["../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/card/card.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static _diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static _styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner._diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner._styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner._styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner._diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color || (this.radioGroup && this.radioGroup.color) || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._destroyed) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-rc.0-cf03621');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatTreeNodeOutlet","viewContainer","_node","this","Directive","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","Optional","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_elementRef","_tree","tabIndex","_this","call","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","CommonModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","_implicitContent","ViewChild","TemplateRef","static","textLabel","ariaLabel","ariaLabelledby","MatTab","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","nativeElement","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","MatSlider","_calculatePercentage","_calculateValue","percentage","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(click)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","_doCheckSubject","debounceTime","_updateContentMargins","MatDrawerContainer","_contentMarginChanges","drawer","close","ngDoCheck","_drawers","_element","mode","openedChange","_setContainerClass","opened","onPositionChanged","_validateDrawers","_end","_start","throwMatDuplicatedDrawerError","_right","_left","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_isDrawerOpen","_width","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","_styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","_diameters","INDETERMINATE_ANIMATION_TEMPLATE","replace","_strokeCircumference","Set","BASE_SIZE","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","errorStateMatcher","sortComparator","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","_fallbackAnimation","_diameter","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","_headers","MatExpansionPanelHeader","hideToggle","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_chipListMultiple","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_syncChipsState","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}
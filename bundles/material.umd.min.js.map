{"version":3,"file":"material.umd.min.js","sources":["../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0-e7b7b30 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0-e7b7b30 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0-e7b7b30\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0-e7b7b30 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0-e7b7b30 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0-e7b7b30\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0-e7b7b30 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0-e7b7b30 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0-e7b7b30 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0-e7b7b30 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0-e7b7b30\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0-e7b7b30 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0-e7b7b30 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0-e7b7b30\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0-e7b7b30\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0-e7b7b30\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._destroyed) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0-e7b7b30\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0-e7b7b30\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0-e7b7b30 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0-e7b7b30 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0-e7b7b30\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0-e7b7b30 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  private _document: Document;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0-e7b7b30 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0-e7b7b30 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0-e7b7b30\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0-e7b7b30 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0-e7b7b30\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0-e7b7b30 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0-e7b7b30\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0-e7b7b30 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0-e7b7b30\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0-e7b7b30\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0-e7b7b30\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.0-e7b7b30');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0-e7b7b30\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","this","_toolbarRows","length","Array","from","_elementRef","nativeElement","childNodes","filter","node","classList","contains","nodeType","_document","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatTreeNodeOutlet","viewContainer","_node","Directive","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","Optional","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_super","_tree","tabIndex","call","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","CommonModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","MatTab","_implicitContent","ViewChild","TemplateRef","static","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","Subject","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","position","_positionIndex","origin","_computePositionFromOrigin","complete","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTabContent","MatInkBar","MatToolbarBase","_MatToolbarMixinBase","document","isDevMode","isBrowser","_checkToolbarMixedModes","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_tickIntervalPercent","pixelsPerTick","trackSize","tickInterval","step","MatSlider","MatSliderChange","source","_calculatePercentage","_calculateValue","percentage","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","vertical","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","_validateDrawers","drawer","_drawers","_isDrawerOpen","_start","_end","updateContentMargins","_doCheckSubject","debounceTime","MatDrawerContainer","_contentMarginChanges","close","_left","mode","_width","_right","opened","_contentMargins","ngDoCheck","_element","openedChange","_setContainerClass","onPositionChanged","throwMatDuplicatedDrawerError","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_sliderDimensions","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","closestValue","pixelsPerStep","stepsPerTick","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","createElement","styleRoot","_styleRoot","currentDiameter","_diameter","diameters","_diameters","diametersForElement","setAttribute","_getAnimationText","appendChild","Set","INDETERMINATE_ANIMATION_TEMPLATE","replace","_strokeCircumference","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","_fallbackAnimation","trackedDiameters","head","_getShadowRoot","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatExpansionPanelHeader","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","hideToggle","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","startAt","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","chips","chip","MatChipList","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_allowFocusEscape","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCardTitleGroup","MatCardModule","MatCard","MatCardHeader","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}
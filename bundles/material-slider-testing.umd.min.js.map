{"version":3,"sources":["src/material/material-slider-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","slider","testing","tslib","cdk","coercion","this","tslib_1","MatSliderHarness","_super","_this","apply","arguments","_textLabel","locatorFor","_wrapper","__extends","with","options","HarnessPredicate","prototype","getId","__awaiter","id","__generator","_a","label","host","sent","getAttribute","getDisplayValue","text","getPercentage","_b","_calculatePercentage","getValue","coerceNumberProperty","getMaxValue","getMinValue","isDisabled","disabled","coerceBooleanProperty","getOrientation","setValue","value","sliderEl","wrapperEl","orientation","percentage","height","width","isVertical","relativeX","relativeY","_c","Promise","all","__read","getDimensions","hasClass","Math","round","click","focus","blur","min","hostSelector","ComponentHarness","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/slider/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.slider = global.ng.material.slider || {}, global.ng.material.slider.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.cdk.coercion));\n}(this, function (exports, tslib_1, testing, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-slider in tests.\n     * @dynamic\n     */\n    var MatSliderHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSliderHarness, _super);\n        function MatSliderHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._textLabel = _this.locatorFor('.mat-slider-thumb-label-text');\n            _this._wrapper = _this.locatorFor('.mat-slider-wrapper');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a mat-slider with\n         * specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `selector` finds a slider whose host element matches the given selector.\n         *   - `id` finds a slider with specific id.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSliderHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSliderHarness, options);\n        };\n        /** Gets the slider's id. */\n        MatSliderHarness.prototype.getId = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var id;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).getAttribute('id')];\n                        case 2:\n                            id = _a.sent();\n                            // In case no id has been specified, the \"id\" property always returns\n                            // an empty string. To make this method more explicit, we return null.\n                            return [2 /*return*/, id !== '' ? id : null];\n                    }\n                });\n            });\n        };\n        /** Gets the current display value of the slider. */\n        MatSliderHarness.prototype.getDisplayValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._textLabel()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Gets the current percentage value of the slider. */\n        MatSliderHarness.prototype.getPercentage = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = this._calculatePercentage;\n                            return [4 /*yield*/, this.getValue()];\n                        case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the current value of the slider. */\n        MatSliderHarness.prototype.getValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_b.sent()).getAttribute('aria-valuenow')];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the maximum value of the slider. */\n        MatSliderHarness.prototype.getMaxValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_b.sent()).getAttribute('aria-valuemax')];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the minimum value of the slider. */\n        MatSliderHarness.prototype.getMinValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = coercion.coerceNumberProperty;\n                            return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_b.sent()).getAttribute('aria-valuemin')];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the slider is disabled. */\n        MatSliderHarness.prototype.isDisabled = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('aria-disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets the orientation of the slider. */\n        MatSliderHarness.prototype.getOrientation = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: \n                        // \"aria-orientation\" will always be set to either \"horizontal\" or \"vertical\".\n                        return [2 /*return*/, (_a.sent()).getAttribute('aria-orientation')];\n                    }\n                });\n            });\n        };\n        /**\n         * Sets the value of the slider by clicking on the slider track.\n         *\n         * Note that in rare cases the value cannot be set to the exact specified value. This\n         * can happen if not every value of the slider maps to a single pixel that could be\n         * clicked using mouse interaction. In such cases consider using the keyboard to\n         * select the given value or expand the slider's size for a better user experience.\n         */\n        MatSliderHarness.prototype.setValue = function (value) {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a, sliderEl, wrapperEl, orientation, percentage, _b, height, width, isVertical, relativeX, relativeY;\n                return tslib_1.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, Promise.all([this.host(), this._wrapper(), this.getOrientation()])];\n                        case 1:\n                            _a = tslib_1.__read.apply(void 0, [_c.sent(), 3]), sliderEl = _a[0], wrapperEl = _a[1], orientation = _a[2];\n                            return [4 /*yield*/, this._calculatePercentage(value)];\n                        case 2:\n                            percentage = _c.sent();\n                            return [4 /*yield*/, wrapperEl.getDimensions()];\n                        case 3:\n                            _b = _c.sent(), height = _b.height, width = _b.width;\n                            isVertical = orientation === 'vertical';\n                            return [4 /*yield*/, sliderEl.hasClass('mat-slider-invert-mouse-coords')];\n                        case 4:\n                            // In case the slider is inverted in LTR mode or not inverted in RTL mode,\n                            // we need to invert the percentage so that the proper value is set.\n                            if (_c.sent()) {\n                                percentage = 1 - percentage;\n                            }\n                            relativeX = isVertical ? 0 : Math.round(width * percentage);\n                            relativeY = isVertical ? Math.round(height * percentage) : 0;\n                            return [4 /*yield*/, wrapperEl.click(relativeX, relativeY)];\n                        case 5:\n                            _c.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Focuses the slider and returns a void promise that indicates when the\n         * action is complete.\n         */\n        MatSliderHarness.prototype.focus = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /**\n         * Blurs the slider and returns a void promise that indicates when the\n         * action is complete.\n         */\n        MatSliderHarness.prototype.blur = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Calculates the percentage of the given value. */\n        MatSliderHarness.prototype._calculatePercentage = function (value) {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a, min, max;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, Promise.all([this.getMinValue(), this.getMaxValue()])];\n                        case 1:\n                            _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), min = _a[0], max = _a[1];\n                            return [2 /*return*/, (value - min) / (max - min)];\n                    }\n                });\n            });\n        };\n        MatSliderHarness.hostSelector = 'mat-slider';\n        return MatSliderHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSliderHarness = MatSliderHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-slider-testing.umd.js.map\n"]}
{"version":3,"sources":["src/material/material-snack-bar.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","snackBar","cdk","overlay","portal","common","core","button","rxjs","tslib","operators","animations","a11y","layout","this","i1","i0","tslib_1","i2","i3","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_this","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","prototype","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","Object","defineProperty","get","enumerable","configurable","decorators","type","Component","args","moduleId","id","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","styles","ctorParameters","undefined","Inject","matSnackBarAnimations","snackBarState","trigger","state","style","transform","opacity","transition","animate","MatSnackBarContainer","_super","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","call","_destroyed","_animationState","_role","__extends","attachComponentPortal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","event","toState","fromState","_completeExit","onEnter_1","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","take","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","Default","[attr.role]","[@state]","(@state.done)","NgZone","ElementRef","ChangeDetectorRef","propDecorators","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","MatSnackBarModule","NgModule","imports","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","declarations","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","set","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","__assign","_attachSnackBarContainer","overlayRef","injector","PortalInjector","viewContainerRef","WeakMap","containerPortal","ComponentPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","portal$1","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","HandsetPortrait","takeUntil","detachments","overlayElement","matches","remove","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","direction","positionStrategy","position","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","Optional","SkipSelf","ngInjectableDef","ɵɵdefineInjectable","MatSnackBar_Factory","ɵɵinject","INJECTOR","token"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('@angular/material/button'), require('rxjs'), require('tslib'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/layout')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/snack-bar', ['exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common', '@angular/core', '@angular/material/core', '@angular/material/button', 'rxjs', 'tslib', 'rxjs/operators', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/layout'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.snackBar = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.common, global.ng.core, global.ng.material.core, global.ng.material.button, global.rxjs, global.tslib, global.rxjs.operators, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.layout));\n}(this, function (exports, i1, portal, common, i0, core, button, rxjs, tslib_1, operators, animations, i2, i3) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Maximum amount of milliseconds that can be passed into setTimeout. */\n    var MAX_TIMEOUT = Math.pow(2, 31) - 1;\n    /**\n     * Reference to a snack bar dispatched from the snack bar service.\n     */\n    var MatSnackBarRef = /** @class */ (function () {\n        function MatSnackBarRef(containerInstance, _overlayRef) {\n            var _this = this;\n            this._overlayRef = _overlayRef;\n            /** Subject for notifying the user that the snack bar has been dismissed. */\n            this._afterDismissed = new rxjs.Subject();\n            /** Subject for notifying the user that the snack bar has opened and appeared. */\n            this._afterOpened = new rxjs.Subject();\n            /** Subject for notifying the user that the snack bar action was called. */\n            this._onAction = new rxjs.Subject();\n            /** Whether the snack bar was dismissed using the action button. */\n            this._dismissedByAction = false;\n            this.containerInstance = containerInstance;\n            // Dismiss snackbar on action.\n            this.onAction().subscribe(function () { return _this.dismiss(); });\n            containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n        }\n        /** Dismisses the snack bar. */\n        MatSnackBarRef.prototype.dismiss = function () {\n            if (!this._afterDismissed.closed) {\n                this.containerInstance.exit();\n            }\n            clearTimeout(this._durationTimeoutId);\n        };\n        /** Marks the snackbar action clicked. */\n        MatSnackBarRef.prototype.dismissWithAction = function () {\n            if (!this._onAction.closed) {\n                this._dismissedByAction = true;\n                this._onAction.next();\n                this._onAction.complete();\n            }\n        };\n        /**\n         * Marks the snackbar action clicked.\n         * @deprecated Use `dismissWithAction` instead.\n         * @breaking-change 8.0.0\n         */\n        MatSnackBarRef.prototype.closeWithAction = function () {\n            this.dismissWithAction();\n        };\n        /** Dismisses the snack bar after some duration */\n        MatSnackBarRef.prototype._dismissAfter = function (duration) {\n            var _this = this;\n            // Note that we need to cap the duration to the maximum value for setTimeout, because\n            // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n            this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, Math.min(duration, MAX_TIMEOUT));\n        };\n        /** Marks the snackbar as opened */\n        MatSnackBarRef.prototype._open = function () {\n            if (!this._afterOpened.closed) {\n                this._afterOpened.next();\n                this._afterOpened.complete();\n            }\n        };\n        /** Cleans up the DOM after closing. */\n        MatSnackBarRef.prototype._finishDismiss = function () {\n            this._overlayRef.dispose();\n            if (!this._onAction.closed) {\n                this._onAction.complete();\n            }\n            this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n            this._afterDismissed.complete();\n            this._dismissedByAction = false;\n        };\n        /** Gets an observable that is notified when the snack bar is finished closing. */\n        MatSnackBarRef.prototype.afterDismissed = function () {\n            return this._afterDismissed.asObservable();\n        };\n        /** Gets an observable that is notified when the snack bar has opened and appeared. */\n        MatSnackBarRef.prototype.afterOpened = function () {\n            return this.containerInstance._onEnter;\n        };\n        /** Gets an observable that is notified when the snack bar action is called. */\n        MatSnackBarRef.prototype.onAction = function () {\n            return this._onAction.asObservable();\n        };\n        return MatSnackBarRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to access the data that was passed in to a snack bar. */\n    var MAT_SNACK_BAR_DATA = new i0.InjectionToken('MatSnackBarData');\n    /**\n     * Configuration used when opening a snack-bar.\n     */\n    var MatSnackBarConfig = /** @class */ (function () {\n        function MatSnackBarConfig() {\n            /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n            this.politeness = 'assertive';\n            /**\n             * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n             * component or template, the announcement message will default to the specified message.\n             */\n            this.announcementMessage = '';\n            /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n            this.duration = 0;\n            /** Data being injected into the child component. */\n            this.data = null;\n            /** The horizontal position to place the snack bar. */\n            this.horizontalPosition = 'center';\n            /** The vertical position to place the snack bar. */\n            this.verticalPosition = 'bottom';\n        }\n        return MatSnackBarConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A component used to open as the default snack bar, matching material spec.\n     * This should only be used internally by the snack bar service.\n     */\n    var SimpleSnackBar = /** @class */ (function () {\n        function SimpleSnackBar(snackBarRef, data) {\n            this.snackBarRef = snackBarRef;\n            this.data = data;\n        }\n        /** Performs the action on the snack bar. */\n        SimpleSnackBar.prototype.action = function () {\n            this.snackBarRef.dismissWithAction();\n        };\n        Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n            /** If the action button should be shown. */\n            get: function () {\n                return !!this.data.action;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        SimpleSnackBar.decorators = [\n            { type: i0.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'simple-snack-bar',\n                        template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        host: {\n                            'class': 'mat-simple-snackbar',\n                        },\n                        styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        SimpleSnackBar.ctorParameters = function () { return [\n            { type: MatSnackBarRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n        ]; };\n        return SimpleSnackBar;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the Material snack bar.\n     * @docs-private\n     */\n    var matSnackBarAnimations = {\n        /** Animation that shows and hides a snack bar. */\n        snackBarState: animations.trigger('state', [\n            animations.state('void, hidden', animations.style({\n                transform: 'scale(0.8)',\n                opacity: 0,\n            })),\n            animations.state('visible', animations.style({\n                transform: 'scale(1)',\n                opacity: 1,\n            })),\n            animations.transition('* => visible', animations.animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n            animations.transition('* => void, * => hidden', animations.animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', animations.style({\n                opacity: 0\n            }))),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Internal component that wraps user-provided snack bar content.\n     * @docs-private\n     */\n    var MatSnackBarContainer = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSnackBarContainer, _super);\n        function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, \n        /** The snack bar configuration. */\n        snackBarConfig) {\n            var _this = _super.call(this) || this;\n            _this._ngZone = _ngZone;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this.snackBarConfig = snackBarConfig;\n            /** Whether the component has been destroyed. */\n            _this._destroyed = false;\n            /** Subject for notifying that the snack bar has exited from view. */\n            _this._onExit = new rxjs.Subject();\n            /** Subject for notifying that the snack bar has finished entering the view. */\n            _this._onEnter = new rxjs.Subject();\n            /** The state of the snack bar animations. */\n            _this._animationState = 'void';\n            // Based on the ARIA spec, `alert` and `status` roles have an\n            // implicit `assertive` and `polite` politeness respectively.\n            if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n                _this._role = 'alert';\n            }\n            else if (snackBarConfig.politeness === 'off') {\n                _this._role = null;\n            }\n            else {\n                _this._role = 'status';\n            }\n            return _this;\n        }\n        /** Attach a component portal as content to this snack bar container. */\n        MatSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n        /** Attach a template portal as content to this snack bar container. */\n        MatSnackBarContainer.prototype.attachTemplatePortal = function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n        /** Handle end of animations, updating the state of the snackbar. */\n        MatSnackBarContainer.prototype.onAnimationEnd = function (event) {\n            var fromState = event.fromState, toState = event.toState;\n            if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n                this._completeExit();\n            }\n            if (toState === 'visible') {\n                // Note: we shouldn't use `this` inside the zone callback,\n                // because it can cause a memory leak.\n                var onEnter_1 = this._onEnter;\n                this._ngZone.run(function () {\n                    onEnter_1.next();\n                    onEnter_1.complete();\n                });\n            }\n        };\n        /** Begin animation of snack bar entrance into view. */\n        MatSnackBarContainer.prototype.enter = function () {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        };\n        /** Begin animation of the snack bar exiting from view. */\n        MatSnackBarContainer.prototype.exit = function () {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            return this._onExit;\n        };\n        /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n        MatSnackBarContainer.prototype.ngOnDestroy = function () {\n            this._destroyed = true;\n            this._completeExit();\n        };\n        /**\n         * Waits for the zone to settle before removing the element. Helps prevent\n         * errors where we end up removing an element which is in the middle of an animation.\n         */\n        MatSnackBarContainer.prototype._completeExit = function () {\n            var _this = this;\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1)).subscribe(function () {\n                _this._onExit.next();\n                _this._onExit.complete();\n            });\n        };\n        /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n        MatSnackBarContainer.prototype._applySnackBarClasses = function () {\n            var element = this._elementRef.nativeElement;\n            var panelClasses = this.snackBarConfig.panelClass;\n            if (panelClasses) {\n                if (Array.isArray(panelClasses)) {\n                    // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                    panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n                }\n                else {\n                    element.classList.add(panelClasses);\n                }\n            }\n            if (this.snackBarConfig.horizontalPosition === 'center') {\n                element.classList.add('mat-snack-bar-center');\n            }\n            if (this.snackBarConfig.verticalPosition === 'top') {\n                element.classList.add('mat-snack-bar-top');\n            }\n        };\n        /** Asserts that no content is already attached to the container. */\n        MatSnackBarContainer.prototype._assertNotAttached = function () {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach snack bar content after content is already attached');\n            }\n        };\n        MatSnackBarContainer.decorators = [\n            { type: i0.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'snack-bar-container',\n                        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                        // In Ivy embedded views will be change detected from their declaration place, rather than\n                        // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                        // because it might cause snack bars that were opened from a template not to be out of date.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: i0.ChangeDetectionStrategy.Default,\n                        encapsulation: i0.ViewEncapsulation.None,\n                        animations: [matSnackBarAnimations.snackBarState],\n                        host: {\n                            '[attr.role]': '_role',\n                            'class': 'mat-snack-bar-container',\n                            '[@state]': '_animationState',\n                            '(@state.done)': 'onAnimationEnd($event)'\n                        },\n                        styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media(-ms-high-contrast: active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSnackBarContainer.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: i0.ElementRef },\n            { type: i0.ChangeDetectorRef },\n            { type: MatSnackBarConfig }\n        ]; };\n        MatSnackBarContainer.propDecorators = {\n            _portalOutlet: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]\n        };\n        return MatSnackBarContainer;\n    }(portal.BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSnackBarModule = /** @class */ (function () {\n        function MatSnackBarModule() {\n        }\n        MatSnackBarModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            i1.OverlayModule,\n                            portal.PortalModule,\n                            common.CommonModule,\n                            button.MatButtonModule,\n                            core.MatCommonModule,\n                        ],\n                        exports: [MatSnackBarContainer, core.MatCommonModule],\n                        declarations: [MatSnackBarContainer, SimpleSnackBar],\n                        entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                    },] }\n        ];\n        return MatSnackBarModule;\n    }());\n\n    /** Injection token that can be used to specify default snack bar. */\n    var MAT_SNACK_BAR_DEFAULT_OPTIONS = new i0.InjectionToken('mat-snack-bar-default-options', {\n        providedIn: 'root',\n        factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n    /** @docs-private */\n    function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n        return new MatSnackBarConfig();\n    }\n    /**\n     * Service to dispatch Material Design snack bar messages.\n     */\n    var MatSnackBar = /** @class */ (function () {\n        function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n            this._overlay = _overlay;\n            this._live = _live;\n            this._injector = _injector;\n            this._breakpointObserver = _breakpointObserver;\n            this._parentSnackBar = _parentSnackBar;\n            this._defaultConfig = _defaultConfig;\n            /**\n             * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n             * If there is a parent snack-bar service, all operations should delegate to that parent\n             * via `_openedSnackBarRef`.\n             */\n            this._snackBarRefAtThisLevel = null;\n        }\n        Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n            /** Reference to the currently opened snackbar at *any* level. */\n            get: function () {\n                var parent = this._parentSnackBar;\n                return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n            },\n            set: function (value) {\n                if (this._parentSnackBar) {\n                    this._parentSnackBar._openedSnackBarRef = value;\n                }\n                else {\n                    this._snackBarRefAtThisLevel = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates and dispatches a snack bar with a custom component for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param component Component to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        MatSnackBar.prototype.openFromComponent = function (component, config) {\n            return this._attach(component, config);\n        };\n        /**\n         * Creates and dispatches a snack bar with a custom template for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param template Template to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        MatSnackBar.prototype.openFromTemplate = function (template, config) {\n            return this._attach(template, config);\n        };\n        /**\n         * Opens a snackbar with a message and an optional action.\n         * @param message The message to show in the snackbar.\n         * @param action The label for the snackbar action.\n         * @param config Additional configuration options for the snackbar.\n         */\n        MatSnackBar.prototype.open = function (message, action, config) {\n            if (action === void 0) { action = ''; }\n            var _config = tslib_1.__assign({}, this._defaultConfig, config);\n            // Since the user doesn't have access to the component, we can\n            // override the data to pass in our own message and action.\n            _config.data = { message: message, action: action };\n            if (!_config.announcementMessage) {\n                _config.announcementMessage = message;\n            }\n            return this.openFromComponent(SimpleSnackBar, _config);\n        };\n        /**\n         * Dismisses the currently-visible snack bar.\n         */\n        MatSnackBar.prototype.dismiss = function () {\n            if (this._openedSnackBarRef) {\n                this._openedSnackBarRef.dismiss();\n            }\n        };\n        MatSnackBar.prototype.ngOnDestroy = function () {\n            // Only dismiss the snack bar at the current level on destroy.\n            if (this._snackBarRefAtThisLevel) {\n                this._snackBarRefAtThisLevel.dismiss();\n            }\n        };\n        /**\n         * Attaches the snack bar container component to the overlay.\n         */\n        MatSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var injector = new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarConfig, config]\n            ]));\n            var containerPortal = new portal.ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n            var containerRef = overlayRef.attach(containerPortal);\n            containerRef.instance.snackBarConfig = config;\n            return containerRef.instance;\n        };\n        /**\n         * Places a new component or a template as the content of the snack bar container.\n         */\n        MatSnackBar.prototype._attach = function (content, userConfig) {\n            var config = tslib_1.__assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n            var overlayRef = this._createOverlay(config);\n            var container = this._attachSnackBarContainer(overlayRef, config);\n            var snackBarRef = new MatSnackBarRef(container, overlayRef);\n            if (content instanceof i0.TemplateRef) {\n                var portal$1 = new portal.TemplatePortal(content, null, {\n                    $implicit: config.data,\n                    snackBarRef: snackBarRef\n                });\n                snackBarRef.instance = container.attachTemplatePortal(portal$1);\n            }\n            else {\n                var injector = this._createInjector(config, snackBarRef);\n                var portal$1 = new portal.ComponentPortal(content, undefined, injector);\n                var contentRef = container.attachComponentPortal(portal$1);\n                // We can't pass this via the injector, because the injector is created earlier.\n                snackBarRef.instance = contentRef.instance;\n            }\n            // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n            // appropriate. This class is applied to the overlay element because the overlay must expand to\n            // fill the width of the screen for full width snackbars.\n            this._breakpointObserver.observe(i3.Breakpoints.HandsetPortrait).pipe(operators.takeUntil(overlayRef.detachments())).subscribe(function (state) {\n                var classList = overlayRef.overlayElement.classList;\n                var className = 'mat-snack-bar-handset';\n                state.matches ? classList.add(className) : classList.remove(className);\n            });\n            this._animateSnackBar(snackBarRef, config);\n            this._openedSnackBarRef = snackBarRef;\n            return this._openedSnackBarRef;\n        };\n        /** Animates the old snack bar out and the new one in. */\n        MatSnackBar.prototype._animateSnackBar = function (snackBarRef, config) {\n            var _this = this;\n            // When the snackbar is dismissed, clear the reference to it.\n            snackBarRef.afterDismissed().subscribe(function () {\n                // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n                if (_this._openedSnackBarRef == snackBarRef) {\n                    _this._openedSnackBarRef = null;\n                }\n                if (config.announcementMessage) {\n                    _this._live.clear();\n                }\n            });\n            if (this._openedSnackBarRef) {\n                // If a snack bar is already in view, dismiss it and enter the\n                // new snack bar after exit animation is complete.\n                this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                    snackBarRef.containerInstance.enter();\n                });\n                this._openedSnackBarRef.dismiss();\n            }\n            else {\n                // If no snack bar is in view, enter the new snack bar.\n                snackBarRef.containerInstance.enter();\n            }\n            // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n            if (config.duration && config.duration > 0) {\n                snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(config.duration); });\n            }\n            if (config.announcementMessage) {\n                this._live.announce(config.announcementMessage, config.politeness);\n            }\n        };\n        /**\n         * Creates a new overlay and places it in the correct location.\n         * @param config The user-specified snack bar config.\n         */\n        MatSnackBar.prototype._createOverlay = function (config) {\n            var overlayConfig = new i1.OverlayConfig();\n            overlayConfig.direction = config.direction;\n            var positionStrategy = this._overlay.position().global();\n            // Set horizontal position.\n            var isRtl = config.direction === 'rtl';\n            var isLeft = (config.horizontalPosition === 'left' ||\n                (config.horizontalPosition === 'start' && !isRtl) ||\n                (config.horizontalPosition === 'end' && isRtl));\n            var isRight = !isLeft && config.horizontalPosition !== 'center';\n            if (isLeft) {\n                positionStrategy.left('0');\n            }\n            else if (isRight) {\n                positionStrategy.right('0');\n            }\n            else {\n                positionStrategy.centerHorizontally();\n            }\n            // Set horizontal position.\n            if (config.verticalPosition === 'top') {\n                positionStrategy.top('0');\n            }\n            else {\n                positionStrategy.bottom('0');\n            }\n            overlayConfig.positionStrategy = positionStrategy;\n            return this._overlay.create(overlayConfig);\n        };\n        /**\n         * Creates an injector to be used inside of a snack bar component.\n         * @param config Config that was used to create the snack bar.\n         * @param snackBarRef Reference to the snack bar.\n         */\n        MatSnackBar.prototype._createInjector = function (config, snackBarRef) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            return new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarRef, snackBarRef],\n                [MAT_SNACK_BAR_DATA, config.data]\n            ]));\n        };\n        MatSnackBar.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: MatSnackBarModule },] }\n        ];\n        /** @nocollapse */\n        MatSnackBar.ctorParameters = function () { return [\n            { type: i1.Overlay },\n            { type: i2.LiveAnnouncer },\n            { type: i0.Injector },\n            { type: i3.BreakpointObserver },\n            { type: MatSnackBar, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: MatSnackBarConfig, decorators: [{ type: i0.Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatSnackBar.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n        return MatSnackBar;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatSnackBarModule = MatSnackBarModule;\n    exports.MAT_SNACK_BAR_DEFAULT_OPTIONS = MAT_SNACK_BAR_DEFAULT_OPTIONS;\n    exports.MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY = MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY;\n    exports.MatSnackBar = MatSnackBar;\n    exports.MatSnackBarContainer = MatSnackBarContainer;\n    exports.MAT_SNACK_BAR_DATA = MAT_SNACK_BAR_DATA;\n    exports.MatSnackBarConfig = MatSnackBarConfig;\n    exports.MatSnackBarRef = MatSnackBarRef;\n    exports.SimpleSnackBar = SimpleSnackBar;\n    exports.matSnackBarAnimations = matSnackBarAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-snack-bar.umd.js.map\n"]}
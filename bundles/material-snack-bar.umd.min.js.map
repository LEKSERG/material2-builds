{"version":3,"sources":["src/material/material-snack-bar.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","snackBar","cdk","overlay","portal","common","core","button","rxjs","tslib","operators","animations","a11y","layout","bidi","scrolling","coercion","platform","observers","this","i1","i0","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_this","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","prototype","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","Object","defineProperty","get","enumerable","configurable","decorators","type","Component","args","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","styles","ctorParameters","undefined","Inject","matSnackBarAnimations","snackBarState","trigger","state","style","transform","opacity","transition","animate","MatSnackBarContainer","_super","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","call","_destroyed","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_role","__extends","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","toState","fromState","_completeExit","onEnter_1","run","enter","detectChanges","ngOnDestroy","onMicrotaskEmpty","pipe","take","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","Default","[attr.role]","[@state]","(@state.done)","NgZone","ElementRef","ChangeDetectorRef","propDecorators","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","MatSnackBarModule","NgModule","imports","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","declarations","entryComponents","OverlayKeyboardDispatcher","document","_attachedOverlays","_keydownListener","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","_document","_detach","overlayRef","remove","_isAttached","body","addEventListener","push","index","indexOf","splice","removeEventListener","Injectable","providedIn","DOCUMENT","ɵprov","ɵɵdefineInjectable","OverlayKeyboardDispatcher_Factory","ɵɵinject","token","Optional","SkipSelf","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","top","left","_isEnabled","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","coerceCssPixelValue","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","detach","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","hasV8BreakIterator","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","Intl","v8BreakIterator","Platform","_platformId","isBrowser","isPlatformBrowser","EDGE","test","navigator","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PLATFORM_ID","Platform_Factory","ScrollDispatcher","_platform","_scrolled","_globalSubscription","_scrolledCount","Map","register","scrollable","has","set","elementScrolled","deregister","scrollableReference","delete","auditTimeInMs","Observable","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","of","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","scrollingContainers","_subscription","_scrollableContainsElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","ScrollDispatcher_Factory","ViewportRuler","ngZone","_change","merge","_invalidateCache","change","_updateViewportSize","_viewportSize","output","getViewportRect","documentRect","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","ScrollStrategyOptions","noop","close","config","block","reposition","ScrollStrategyOptions_Factory","OverlayConfig","e_1","scrollStrategy","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","configKeys_1","__values","configKeys_1_1","done","key","value","e_1_1","error","return","OverlayContainer","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","previousContainers","getElementsByClassName","createElement","appendChild","OverlayContainer_Factory","OverlayRef","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","__assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","nextSibling","backdropToDetach","timeoutId","finishDetach","cssClasses","isAdd","coerceArray","takeUntil","children","ConnectionPositionPair","origin","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","e_2","_b","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_c","_d","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","flexibleFits_1","flexibleFits_1_1","fit","score","weight","e_2_1","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","positions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","_i","arguments","reduce","currentValue","currentOverflow","axis","pair","HTMLElement","dest","source","hasOwnProperty","mediaQueryStyleNode","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","overlayContainer","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","ComponentFactoryResolver","Injector","Directionality","Location","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","announce","message","defaultOptions","__read","clear","_previousTimeout","Promise","resolve","textContent","previousElements","liveEl","LiveAnnouncer_Factory","mediaQueriesForWebkitCompatibility","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","observe","elementText","_previousAnnouncedText","Directive","exportAs","ContentObserver","Input","Set","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","createEmptyStyleRule","head","sheet","insertRule","e","console","MediaMatcher_Factory","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","_destroySubject","isMatched","splitQueries","mediaQuery","_registerQuery","mql","observables","observable","stateObservable","combineLatest","concat","skip","debounceTime","breakpointStates","response","breakpoints","handler","startWith","nextMql","BreakpointObserver_Factory","queries","split","a1","a2","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","component","_attach","openFromTemplate","open","_attachSnackBarContainer","injector","PortalInjector","viewContainerRef","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","portal$1","TemplatePortal","$implicit","_createInjector","contentRef","Breakpoints","HandsetPortrait","_animateSnackBar","isLeft","isRight","MatSnackBar_Factory","INJECTOR"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('@angular/material/button'), require('rxjs'), require('tslib'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/layout'), require('@angular/cdk/bidi'), require('@angular/cdk/scrolling'), require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/cdk/observers')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/snack-bar', ['exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common', '@angular/core', '@angular/material/core', '@angular/material/button', 'rxjs', 'tslib', 'rxjs/operators', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/layout', '@angular/cdk/bidi', '@angular/cdk/scrolling', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/cdk/observers'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.snackBar = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.common, global.ng.core, global.ng.material.core, global.ng.material.button, global.rxjs, global.tslib, global.rxjs.operators, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.layout, global.ng.cdk.bidi, global.ng.cdk.scrolling, global.ng.cdk.coercion, global.ng.cdk.platform, global.ng.cdk.observers));\n}(this, (function (exports, overlay, portal, i1, i0, core, button, rxjs, tslib, operators, animations, a11y, layout, bidi, scrolling, coercion, platform, observers) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Maximum amount of milliseconds that can be passed into setTimeout. */\n    var MAX_TIMEOUT = Math.pow(2, 31) - 1;\n    /**\n     * Reference to a snack bar dispatched from the snack bar service.\n     */\n    var MatSnackBarRef = /** @class */ (function () {\n        function MatSnackBarRef(containerInstance, _overlayRef) {\n            var _this = this;\n            this._overlayRef = _overlayRef;\n            /** Subject for notifying the user that the snack bar has been dismissed. */\n            this._afterDismissed = new rxjs.Subject();\n            /** Subject for notifying the user that the snack bar has opened and appeared. */\n            this._afterOpened = new rxjs.Subject();\n            /** Subject for notifying the user that the snack bar action was called. */\n            this._onAction = new rxjs.Subject();\n            /** Whether the snack bar was dismissed using the action button. */\n            this._dismissedByAction = false;\n            this.containerInstance = containerInstance;\n            // Dismiss snackbar on action.\n            this.onAction().subscribe(function () { return _this.dismiss(); });\n            containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n        }\n        /** Dismisses the snack bar. */\n        MatSnackBarRef.prototype.dismiss = function () {\n            if (!this._afterDismissed.closed) {\n                this.containerInstance.exit();\n            }\n            clearTimeout(this._durationTimeoutId);\n        };\n        /** Marks the snackbar action clicked. */\n        MatSnackBarRef.prototype.dismissWithAction = function () {\n            if (!this._onAction.closed) {\n                this._dismissedByAction = true;\n                this._onAction.next();\n                this._onAction.complete();\n            }\n        };\n        /**\n         * Marks the snackbar action clicked.\n         * @deprecated Use `dismissWithAction` instead.\n         * @breaking-change 8.0.0\n         */\n        MatSnackBarRef.prototype.closeWithAction = function () {\n            this.dismissWithAction();\n        };\n        /** Dismisses the snack bar after some duration */\n        MatSnackBarRef.prototype._dismissAfter = function (duration) {\n            var _this = this;\n            // Note that we need to cap the duration to the maximum value for setTimeout, because\n            // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n            this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, Math.min(duration, MAX_TIMEOUT));\n        };\n        /** Marks the snackbar as opened */\n        MatSnackBarRef.prototype._open = function () {\n            if (!this._afterOpened.closed) {\n                this._afterOpened.next();\n                this._afterOpened.complete();\n            }\n        };\n        /** Cleans up the DOM after closing. */\n        MatSnackBarRef.prototype._finishDismiss = function () {\n            this._overlayRef.dispose();\n            if (!this._onAction.closed) {\n                this._onAction.complete();\n            }\n            this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n            this._afterDismissed.complete();\n            this._dismissedByAction = false;\n        };\n        /** Gets an observable that is notified when the snack bar is finished closing. */\n        MatSnackBarRef.prototype.afterDismissed = function () {\n            return this._afterDismissed.asObservable();\n        };\n        /** Gets an observable that is notified when the snack bar has opened and appeared. */\n        MatSnackBarRef.prototype.afterOpened = function () {\n            return this.containerInstance._onEnter;\n        };\n        /** Gets an observable that is notified when the snack bar action is called. */\n        MatSnackBarRef.prototype.onAction = function () {\n            return this._onAction.asObservable();\n        };\n        return MatSnackBarRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to access the data that was passed in to a snack bar. */\n    var MAT_SNACK_BAR_DATA = new i0.InjectionToken('MatSnackBarData');\n    /**\n     * Configuration used when opening a snack-bar.\n     */\n    var MatSnackBarConfig = /** @class */ (function () {\n        function MatSnackBarConfig() {\n            /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n            this.politeness = 'assertive';\n            /**\n             * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n             * component or template, the announcement message will default to the specified message.\n             */\n            this.announcementMessage = '';\n            /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n            this.duration = 0;\n            /** Data being injected into the child component. */\n            this.data = null;\n            /** The horizontal position to place the snack bar. */\n            this.horizontalPosition = 'center';\n            /** The vertical position to place the snack bar. */\n            this.verticalPosition = 'bottom';\n        }\n        return MatSnackBarConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A component used to open as the default snack bar, matching material spec.\n     * This should only be used internally by the snack bar service.\n     */\n    var SimpleSnackBar = /** @class */ (function () {\n        function SimpleSnackBar(snackBarRef, data) {\n            this.snackBarRef = snackBarRef;\n            this.data = data;\n        }\n        /** Performs the action on the snack bar. */\n        SimpleSnackBar.prototype.action = function () {\n            this.snackBarRef.dismissWithAction();\n        };\n        Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n            /** If the action button should be shown. */\n            get: function () {\n                return !!this.data.action;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        SimpleSnackBar.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'simple-snack-bar',\n                        template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        host: {\n                            'class': 'mat-simple-snackbar',\n                        },\n                        styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        SimpleSnackBar.ctorParameters = function () { return [\n            { type: MatSnackBarRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n        ]; };\n        return SimpleSnackBar;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the Material snack bar.\n     * @docs-private\n     */\n    var matSnackBarAnimations = {\n        /** Animation that shows and hides a snack bar. */\n        snackBarState: animations.trigger('state', [\n            animations.state('void, hidden', animations.style({\n                transform: 'scale(0.8)',\n                opacity: 0,\n            })),\n            animations.state('visible', animations.style({\n                transform: 'scale(1)',\n                opacity: 1,\n            })),\n            animations.transition('* => visible', animations.animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n            animations.transition('* => void, * => hidden', animations.animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', animations.style({\n                opacity: 0\n            }))),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Internal component that wraps user-provided snack bar content.\n     * @docs-private\n     */\n    var MatSnackBarContainer = /** @class */ (function (_super) {\n        tslib.__extends(MatSnackBarContainer, _super);\n        function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, \n        /** The snack bar configuration. */\n        snackBarConfig) {\n            var _this = _super.call(this) || this;\n            _this._ngZone = _ngZone;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this.snackBarConfig = snackBarConfig;\n            /** Whether the component has been destroyed. */\n            _this._destroyed = false;\n            /** Subject for notifying that the snack bar has exited from view. */\n            _this._onExit = new rxjs.Subject();\n            /** Subject for notifying that the snack bar has finished entering the view. */\n            _this._onEnter = new rxjs.Subject();\n            /** The state of the snack bar animations. */\n            _this._animationState = 'void';\n            /**\n             * Attaches a DOM portal to the snack bar container.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            _this.attachDomPortal = function (portal) {\n                _this._assertNotAttached();\n                _this._applySnackBarClasses();\n                return _this._portalOutlet.attachDomPortal(portal);\n            };\n            // Based on the ARIA spec, `alert` and `status` roles have an\n            // implicit `assertive` and `polite` politeness respectively.\n            if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n                _this._role = 'alert';\n            }\n            else if (snackBarConfig.politeness === 'off') {\n                _this._role = null;\n            }\n            else {\n                _this._role = 'status';\n            }\n            return _this;\n        }\n        /** Attach a component portal as content to this snack bar container. */\n        MatSnackBarContainer.prototype.attachComponentPortal = function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n        /** Attach a template portal as content to this snack bar container. */\n        MatSnackBarContainer.prototype.attachTemplatePortal = function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n        /** Handle end of animations, updating the state of the snackbar. */\n        MatSnackBarContainer.prototype.onAnimationEnd = function (event) {\n            var fromState = event.fromState, toState = event.toState;\n            if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n                this._completeExit();\n            }\n            if (toState === 'visible') {\n                // Note: we shouldn't use `this` inside the zone callback,\n                // because it can cause a memory leak.\n                var onEnter_1 = this._onEnter;\n                this._ngZone.run(function () {\n                    onEnter_1.next();\n                    onEnter_1.complete();\n                });\n            }\n        };\n        /** Begin animation of snack bar entrance into view. */\n        MatSnackBarContainer.prototype.enter = function () {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        };\n        /** Begin animation of the snack bar exiting from view. */\n        MatSnackBarContainer.prototype.exit = function () {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            return this._onExit;\n        };\n        /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n        MatSnackBarContainer.prototype.ngOnDestroy = function () {\n            this._destroyed = true;\n            this._completeExit();\n        };\n        /**\n         * Waits for the zone to settle before removing the element. Helps prevent\n         * errors where we end up removing an element which is in the middle of an animation.\n         */\n        MatSnackBarContainer.prototype._completeExit = function () {\n            var _this = this;\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1)).subscribe(function () {\n                _this._onExit.next();\n                _this._onExit.complete();\n            });\n        };\n        /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n        MatSnackBarContainer.prototype._applySnackBarClasses = function () {\n            var element = this._elementRef.nativeElement;\n            var panelClasses = this.snackBarConfig.panelClass;\n            if (panelClasses) {\n                if (Array.isArray(panelClasses)) {\n                    // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                    panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n                }\n                else {\n                    element.classList.add(panelClasses);\n                }\n            }\n            if (this.snackBarConfig.horizontalPosition === 'center') {\n                element.classList.add('mat-snack-bar-center');\n            }\n            if (this.snackBarConfig.verticalPosition === 'top') {\n                element.classList.add('mat-snack-bar-top');\n            }\n        };\n        /** Asserts that no content is already attached to the container. */\n        MatSnackBarContainer.prototype._assertNotAttached = function () {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach snack bar content after content is already attached');\n            }\n        };\n        MatSnackBarContainer.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'snack-bar-container',\n                        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                        // In Ivy embedded views will be change detected from their declaration place, rather than\n                        // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                        // because it might cause snack bars that were opened from a template not to be out of date.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: i0.ChangeDetectionStrategy.Default,\n                        encapsulation: i0.ViewEncapsulation.None,\n                        animations: [matSnackBarAnimations.snackBarState],\n                        host: {\n                            '[attr.role]': '_role',\n                            'class': 'mat-snack-bar-container',\n                            '[@state]': '_animationState',\n                            '(@state.done)': 'onAnimationEnd($event)'\n                        },\n                        styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSnackBarContainer.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: i0.ElementRef },\n            { type: i0.ChangeDetectorRef },\n            { type: MatSnackBarConfig }\n        ]; };\n        MatSnackBarContainer.propDecorators = {\n            _portalOutlet: [{ type: i0.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]\n        };\n        return MatSnackBarContainer;\n    }(portal.BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSnackBarModule = /** @class */ (function () {\n        function MatSnackBarModule() {\n        }\n        MatSnackBarModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            overlay.OverlayModule,\n                            portal.PortalModule,\n                            i1.CommonModule,\n                            button.MatButtonModule,\n                            core.MatCommonModule,\n                        ],\n                        exports: [MatSnackBarContainer, core.MatCommonModule],\n                        declarations: [MatSnackBarContainer, SimpleSnackBar],\n                        entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                    },] }\n        ];\n        return MatSnackBarModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n     * if any. It maintains a list of attached overlays to determine best suited overlay based\n     * on event target and order of overlay opens.\n     */\n    var OverlayKeyboardDispatcher = /** @class */ (function () {\n        function OverlayKeyboardDispatcher(document) {\n            var _this = this;\n            /** Currently attached overlays in the order they were attached. */\n            this._attachedOverlays = [];\n            /** Keyboard event listener that will be attached to the body. */\n            this._keydownListener = function (event) {\n                var overlays = _this._attachedOverlays;\n                for (var i = overlays.length - 1; i > -1; i--) {\n                    // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                    // We want to target the most recent overlay, rather than trying to match where the event came\n                    // from, because some components might open an overlay, but keep focus on a trigger element\n                    // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                    // because we don't want overlays that don't handle keyboard events to block the ones below\n                    // them that do.\n                    if (overlays[i]._keydownEventSubscriptions > 0) {\n                        overlays[i]._keydownEvents.next(event);\n                        break;\n                    }\n                }\n            };\n            this._document = document;\n        }\n        OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {\n            this._detach();\n        };\n        /** Add a new overlay to the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {\n            // Ensure that we don't get the same overlay multiple times.\n            this.remove(overlayRef);\n            // Lazily start dispatcher once first overlay is added\n            if (!this._isAttached) {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n                this._isAttached = true;\n            }\n            this._attachedOverlays.push(overlayRef);\n        };\n        /** Remove an overlay from the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {\n            var index = this._attachedOverlays.indexOf(overlayRef);\n            if (index > -1) {\n                this._attachedOverlays.splice(index, 1);\n            }\n            // Remove the global listener once there are no more overlays.\n            if (this._attachedOverlays.length === 0) {\n                this._detach();\n            }\n        };\n        /** Detaches the global keyboard event listener. */\n        OverlayKeyboardDispatcher.prototype._detach = function () {\n            if (this._isAttached) {\n                this._document.body.removeEventListener('keydown', this._keydownListener);\n                this._isAttached = false;\n            }\n        };\n        OverlayKeyboardDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayKeyboardDispatcher.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        OverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n        return OverlayKeyboardDispatcher;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n        return dispatcher || new OverlayKeyboardDispatcher(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n        // If there is already an OverlayKeyboardDispatcher available, use that.\n        // Otherwise, provide a new one.\n        provide: OverlayKeyboardDispatcher,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayKeyboardDispatcher],\n            // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n            // of the type expected by Angular\n            i1.DOCUMENT\n        ],\n        useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will prevent the user from scrolling while the overlay is visible.\n     */\n    var BlockScrollStrategy = /** @class */ (function () {\n        function BlockScrollStrategy(_viewportRuler, document) {\n            this._viewportRuler = _viewportRuler;\n            this._previousHTMLStyles = { top: '', left: '' };\n            this._isEnabled = false;\n            this._document = document;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        BlockScrollStrategy.prototype.attach = function () { };\n        /** Blocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.enable = function () {\n            if (this._canBeEnabled()) {\n                var root = this._document.documentElement;\n                this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n                // Cache the previous inline styles in case the user had set them.\n                this._previousHTMLStyles.left = root.style.left || '';\n                this._previousHTMLStyles.top = root.style.top || '';\n                // Note: we're using the `html` node, instead of the `body`, because the `body` may\n                // have the user agent margin, whereas the `html` is guaranteed not to have one.\n                root.style.left = coercion.coerceCssPixelValue(-this._previousScrollPosition.left);\n                root.style.top = coercion.coerceCssPixelValue(-this._previousScrollPosition.top);\n                root.classList.add('cdk-global-scrollblock');\n                this._isEnabled = true;\n            }\n        };\n        /** Unblocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.disable = function () {\n            if (this._isEnabled) {\n                var html = this._document.documentElement;\n                var body = this._document.body;\n                var htmlStyle = html.style;\n                var bodyStyle = body.style;\n                var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n                var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n                this._isEnabled = false;\n                htmlStyle.left = this._previousHTMLStyles.left;\n                htmlStyle.top = this._previousHTMLStyles.top;\n                html.classList.remove('cdk-global-scrollblock');\n                // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n                // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n                window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        };\n        BlockScrollStrategy.prototype._canBeEnabled = function () {\n            // Since the scroll strategies can't be singletons, we have to use a global CSS class\n            // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n            // scrolling multiple times.\n            var html = this._document.documentElement;\n            if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n                return false;\n            }\n            var body = this._document.body;\n            var viewport = this._viewportRuler.getViewportSize();\n            return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n        };\n        return BlockScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n     */\n    function getMatScrollStrategyAlreadyAttachedError() {\n        return Error(\"Scroll strategy has already been attached.\");\n    }\n\n    /**\n     * Strategy that will close the overlay as soon as the user starts scrolling.\n     */\n    var CloseScrollStrategy = /** @class */ (function () {\n        function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._config = _config;\n            this._scrollSubscription = null;\n            /** Detaches the overlay ref and disables the scroll strategy. */\n            this._detach = function () {\n                _this.disable();\n                if (_this._overlayRef.hasAttached()) {\n                    _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                }\n            };\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        CloseScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables the closing of the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (this._scrollSubscription) {\n                return;\n            }\n            var stream = this._scrollDispatcher.scrolled(0);\n            if (this._config && this._config.threshold && this._config.threshold > 1) {\n                this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                this._scrollSubscription = stream.subscribe(function () {\n                    var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                    if (Math.abs(scrollPosition - _this._initialScrollPosition) > _this._config.threshold) {\n                        _this._detach();\n                    }\n                    else {\n                        _this._overlayRef.updatePosition();\n                    }\n                });\n            }\n            else {\n                this._scrollSubscription = stream.subscribe(this._detach);\n            }\n        };\n        /** Disables the closing the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        CloseScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return CloseScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Scroll strategy that doesn't do anything. */\n    var NoopScrollStrategy = /** @class */ (function () {\n        function NoopScrollStrategy() {\n        }\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.enable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.disable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.attach = function () { };\n        return NoopScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): move this to live with the rest of the scrolling code\n    // TODO(jelbourn): someday replace this with IntersectionObservers\n    /**\n     * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is scrolled out of view\n     * @docs-private\n     */\n    function isElementScrolledOutsideView(element, scrollContainers) {\n        return scrollContainers.some(function (containerBounds) {\n            var outsideAbove = element.bottom < containerBounds.top;\n            var outsideBelow = element.top > containerBounds.bottom;\n            var outsideLeft = element.right < containerBounds.left;\n            var outsideRight = element.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    }\n    /**\n     * Gets whether an element is clipped by any of its scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is clipped\n     * @docs-private\n     */\n    function isElementClippedByScrolling(element, scrollContainers) {\n        return scrollContainers.some(function (scrollContainerRect) {\n            var clippedAbove = element.top < scrollContainerRect.top;\n            var clippedBelow = element.bottom > scrollContainerRect.bottom;\n            var clippedLeft = element.left < scrollContainerRect.left;\n            var clippedRight = element.right > scrollContainerRect.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will update the element position as the user is scrolling.\n     */\n    var RepositionScrollStrategy = /** @class */ (function () {\n        function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            this._config = _config;\n            this._scrollSubscription = null;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        RepositionScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (!this._scrollSubscription) {\n                var throttle = this._config ? this._config.scrollThrottle : 0;\n                this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                    _this._overlayRef.updatePosition();\n                    // TODO(crisbeto): make `close` on by default once all components can handle it.\n                    if (_this._config && _this._config.autoClose) {\n                        var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                        var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                        // TODO(crisbeto): include all ancestor scroll containers here once\n                        // we have a way of exposing the trigger element to the scroll strategy.\n                        var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                        if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                            _this.disable();\n                            _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                        }\n                    }\n                });\n            }\n        };\n        /** Disables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        RepositionScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return RepositionScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Whether the current platform supports the V8 Break Iterator. The V8 check\n    // is necessary to detect all Blink based browsers.\n    var hasV8BreakIterator;\n    // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n    // cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n    // the consumer is providing a polyfilled `Map`. See:\n    // https://github.com/Microsoft/ChakraCore/issues/3189\n    // https://github.com/angular/components/issues/15687\n    try {\n        hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n    }\n    catch (_a) {\n        hasV8BreakIterator = false;\n    }\n    /**\n     * Service to detect the current platform by comparing the userAgent strings and\n     * checking browser-specific global properties.\n     */\n    var Platform = /** @class */ (function () {\n        /**\n         * @breaking-change 8.0.0 remove optional decorator\n         */\n        function Platform(_platformId) {\n            this._platformId = _platformId;\n            // We want to use the Angular platform check because if the Document is shimmed\n            // without the navigator, the following checks will fail. This is preferred because\n            // sometimes the Document may be shimmed without the user's knowledge or intention\n            /** Whether the Angular application is being rendered in the browser. */\n            this.isBrowser = this._platformId ?\n                i1.isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n            /** Whether the current browser is Microsoft Edge. */\n            this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n            /** Whether the current rendering engine is Microsoft Trident. */\n            this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n            // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n            /** Whether the current rendering engine is Blink. */\n            this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n                typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n            // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n            // ensure that Webkit runs standalone and is not used as another engine's base.\n            /** Whether the current rendering engine is WebKit. */\n            this.WEBKIT = this.isBrowser &&\n                /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n            /** Whether the current platform is Apple iOS. */\n            this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n                !('MSStream' in window);\n            // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n            // them self as Gecko-like browsers and modify the userAgent's according to that.\n            // Since we only cover one explicit Firefox case, we can simply check for Firefox\n            // instead of having an unstable check for Gecko.\n            /** Whether the current browser is Firefox. */\n            this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n            /** Whether the current platform is Android. */\n            // Trident on mobile adds the android platform to the userAgent to trick detections.\n            this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n            // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n            // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n            // Safari browser should also use Webkit as its layout engine.\n            /** Whether the current browser is Safari. */\n            this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n        }\n        Platform.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        Platform.ctorParameters = function () { return [\n            { type: Object, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i0.PLATFORM_ID,] }] }\n        ]; };\n        Platform.ɵprov = i0.ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(i0.ɵɵinject(i0.PLATFORM_ID, 8)); }, token: Platform, providedIn: \"root\" });\n        return Platform;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the scrolling events by default. */\n    var DEFAULT_SCROLL_TIME = 20;\n    /**\n     * Service contained all registered Scrollable references and emits an event when any one of the\n     * Scrollable references emit a scrolled event.\n     */\n    var ScrollDispatcher = /** @class */ (function () {\n        function ScrollDispatcher(_ngZone, _platform) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n            this._scrolled = new rxjs.Subject();\n            /** Keeps track of the global `scroll` and `resize` subscriptions. */\n            this._globalSubscription = null;\n            /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n            this._scrolledCount = 0;\n            /**\n             * Map of all the scrollable references that are registered with the service and their\n             * scroll event subscriptions.\n             */\n            this.scrollContainers = new Map();\n        }\n        /**\n         * Registers a scrollable instance with the service and listens for its scrolled events. When the\n         * scrollable is scrolled, the service emits the event to its scrolled observable.\n         * @param scrollable Scrollable instance to be registered.\n         */\n        ScrollDispatcher.prototype.register = function (scrollable) {\n            var _this = this;\n            if (!this.scrollContainers.has(scrollable)) {\n                this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                    .subscribe(function () { return _this._scrolled.next(scrollable); }));\n            }\n        };\n        /**\n         * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n         * @param scrollable Scrollable instance to be deregistered.\n         */\n        ScrollDispatcher.prototype.deregister = function (scrollable) {\n            var scrollableReference = this.scrollContainers.get(scrollable);\n            if (scrollableReference) {\n                scrollableReference.unsubscribe();\n                this.scrollContainers.delete(scrollable);\n            }\n        };\n        /**\n         * Returns an observable that emits an event whenever any of the registered Scrollable\n         * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n         * to override the default \"throttle\" time.\n         *\n         * **Note:** in order to avoid hitting change detection for every scroll event,\n         * all of the events emitted from this stream will be run outside the Angular zone.\n         * If you need to update any data bindings as a result of a scroll event, you have\n         * to run the callback using `NgZone.run`.\n         */\n        ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {\n            var _this = this;\n            if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n            if (!this._platform.isBrowser) {\n                return rxjs.of();\n            }\n            return new rxjs.Observable(function (observer) {\n                if (!_this._globalSubscription) {\n                    _this._addGlobalListener();\n                }\n                // In the case of a 0ms delay, use an observable without auditTime\n                // since it does add a perceptible delay in processing overhead.\n                var subscription = auditTimeInMs > 0 ?\n                    _this._scrolled.pipe(operators.auditTime(auditTimeInMs)).subscribe(observer) :\n                    _this._scrolled.subscribe(observer);\n                _this._scrolledCount++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._scrolledCount--;\n                    if (!_this._scrolledCount) {\n                        _this._removeGlobalListener();\n                    }\n                };\n            });\n        };\n        ScrollDispatcher.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._removeGlobalListener();\n            this.scrollContainers.forEach(function (_, container) { return _this.deregister(container); });\n            this._scrolled.complete();\n        };\n        /**\n         * Returns an observable that emits whenever any of the\n         * scrollable ancestors of an element are scrolled.\n         * @param elementRef Element whose ancestors to listen for.\n         * @param auditTimeInMs Time to throttle the scroll events.\n         */\n        ScrollDispatcher.prototype.ancestorScrolled = function (elementRef, auditTimeInMs) {\n            var ancestors = this.getAncestorScrollContainers(elementRef);\n            return this.scrolled(auditTimeInMs).pipe(operators.filter(function (target) {\n                return !target || ancestors.indexOf(target) > -1;\n            }));\n        };\n        /** Returns all registered Scrollables that contain the provided element. */\n        ScrollDispatcher.prototype.getAncestorScrollContainers = function (elementRef) {\n            var _this = this;\n            var scrollingContainers = [];\n            this.scrollContainers.forEach(function (_subscription, scrollable) {\n                if (_this._scrollableContainsElement(scrollable, elementRef)) {\n                    scrollingContainers.push(scrollable);\n                }\n            });\n            return scrollingContainers;\n        };\n        /** Returns true if the element is contained within the provided Scrollable. */\n        ScrollDispatcher.prototype._scrollableContainsElement = function (scrollable, elementRef) {\n            var element = elementRef.nativeElement;\n            var scrollableElement = scrollable.getElementRef().nativeElement;\n            // Traverse through the element parents until we reach null, checking if any of the elements\n            // are the scrollable's element.\n            do {\n                if (element == scrollableElement) {\n                    return true;\n                }\n            } while (element = element.parentElement);\n            return false;\n        };\n        /** Sets up the global scroll listeners. */\n        ScrollDispatcher.prototype._addGlobalListener = function () {\n            var _this = this;\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                return rxjs.fromEvent(window.document, 'scroll').subscribe(function () { return _this._scrolled.next(); });\n            });\n        };\n        /** Cleans up the global scroll listener. */\n        ScrollDispatcher.prototype._removeGlobalListener = function () {\n            if (this._globalSubscription) {\n                this._globalSubscription.unsubscribe();\n                this._globalSubscription = null;\n            }\n        };\n        ScrollDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollDispatcher.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: platform.Platform }\n        ]; };\n        ScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n        return ScrollDispatcher;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the resize events by default. */\n    var DEFAULT_RESIZE_TIME = 20;\n    /**\n     * Simple utility for getting the bounds of the browser viewport.\n     * @docs-private\n     */\n    var ViewportRuler = /** @class */ (function () {\n        function ViewportRuler(_platform, ngZone) {\n            var _this = this;\n            this._platform = _platform;\n            ngZone.runOutsideAngular(function () {\n                _this._change = _platform.isBrowser ?\n                    rxjs.merge(rxjs.fromEvent(window, 'resize'), rxjs.fromEvent(window, 'orientationchange')) :\n                    rxjs.of();\n                // Note that we need to do the subscription inside `runOutsideAngular`\n                // since subscribing is what causes the event listener to be added.\n                _this._invalidateCache = _this.change().subscribe(function () { return _this._updateViewportSize(); });\n            });\n        }\n        ViewportRuler.prototype.ngOnDestroy = function () {\n            this._invalidateCache.unsubscribe();\n        };\n        /** Returns the viewport's width and height. */\n        ViewportRuler.prototype.getViewportSize = function () {\n            if (!this._viewportSize) {\n                this._updateViewportSize();\n            }\n            var output = { width: this._viewportSize.width, height: this._viewportSize.height };\n            // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n            if (!this._platform.isBrowser) {\n                this._viewportSize = null;\n            }\n            return output;\n        };\n        /** Gets a ClientRect for the viewport's bounds. */\n        ViewportRuler.prototype.getViewportRect = function () {\n            // Use the document element's bounding rect rather than the window scroll properties\n            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n            // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n            // can disagree when the page is pinch-zoomed (on devices that support touch).\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n            // We use the documentElement instead of the body because, by default (without a css reset)\n            // browsers typically give the document body an 8px margin, which is not included in\n            // getBoundingClientRect().\n            var scrollPosition = this.getViewportScrollPosition();\n            var _a = this.getViewportSize(), width = _a.width, height = _a.height;\n            return {\n                top: scrollPosition.top,\n                left: scrollPosition.left,\n                bottom: scrollPosition.top + height,\n                right: scrollPosition.left + width,\n                height: height,\n                width: width,\n            };\n        };\n        /** Gets the (top, left) scroll position of the viewport. */\n        ViewportRuler.prototype.getViewportScrollPosition = function () {\n            // While we can get a reference to the fake document\n            // during SSR, it doesn't have getBoundingClientRect.\n            if (!this._platform.isBrowser) {\n                return { top: 0, left: 0 };\n            }\n            // The top-left-corner of the viewport is determined by the scroll position of the document\n            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n            // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n            // `document.documentElement` works consistently, where the `top` and `left` values will\n            // equal negative the scroll position.\n            var documentElement = document.documentElement;\n            var documentRect = documentElement.getBoundingClientRect();\n            var top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                documentElement.scrollTop || 0;\n            var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                documentElement.scrollLeft || 0;\n            return { top: top, left: left };\n        };\n        /**\n         * Returns a stream that emits whenever the size of the viewport changes.\n         * @param throttleTime Time in milliseconds to throttle the stream.\n         */\n        ViewportRuler.prototype.change = function (throttleTime) {\n            if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }\n            return throttleTime > 0 ? this._change.pipe(operators.auditTime(throttleTime)) : this._change;\n        };\n        /** Updates the cached viewport size. */\n        ViewportRuler.prototype._updateViewportSize = function () {\n            this._viewportSize = this._platform.isBrowser ?\n                { width: window.innerWidth, height: window.innerHeight } :\n                { width: 0, height: 0 };\n        };\n        ViewportRuler.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ViewportRuler.ctorParameters = function () { return [\n            { type: platform.Platform },\n            { type: i0.NgZone }\n        ]; };\n        ViewportRuler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(i0.ɵɵinject(Platform), i0.ɵɵinject(i0.NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n        return ViewportRuler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Options for how an overlay will handle scrolling.\n     *\n     * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n     * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n     */\n    var ScrollStrategyOptions = /** @class */ (function () {\n        function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            /** Do nothing on scroll. */\n            this.noop = function () { return new NoopScrollStrategy(); };\n            /**\n             * Close the overlay as soon as the user scrolls.\n             * @param config Configuration to be used inside the scroll strategy.\n             */\n            this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n            /** Block scrolling. */\n            this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n            /**\n             * Update the overlay's position on scroll.\n             * @param config Configuration to be used inside the scroll strategy.\n             * Allows debouncing the reposition calls.\n             */\n            this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n            this._document = document;\n        }\n        ScrollStrategyOptions.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollStrategyOptions.ctorParameters = function () { return [\n            { type: scrolling.ScrollDispatcher },\n            { type: scrolling.ViewportRuler },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        ScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(ScrollDispatcher), i0.ɵɵinject(ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n        return ScrollStrategyOptions;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Initial configuration used when creating an overlay. */\n    var OverlayConfig = /** @class */ (function () {\n        function OverlayConfig(config) {\n            var e_1, _a;\n            /** Strategy to be used when handling scroll events while the overlay is open. */\n            this.scrollStrategy = new NoopScrollStrategy();\n            /** Custom class to add to the overlay pane. */\n            this.panelClass = '';\n            /** Whether the overlay has a backdrop. */\n            this.hasBackdrop = false;\n            /** Custom class to add to the backdrop */\n            this.backdropClass = 'cdk-overlay-dark-backdrop';\n            /**\n             * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.disposeOnNavigation = false;\n            if (config) {\n                // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n                // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n                // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n                var configKeys = Object.keys(config);\n                try {\n                    for (var configKeys_1 = tslib.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n                        var key = configKeys_1_1.value;\n                        if (config[key] !== undefined) {\n                            // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                            // as \"I don't know *which* key this is, so the only valid value is the intersection\n                            // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                            // is not smart enough to see that the right-hand-side is actually an access of the same\n                            // exact type with the same exact key, meaning that the value type must be identical.\n                            // So we use `any` to work around this.\n                            this[key] = config[key];\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        return OverlayConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Container inside which all overlays will render. */\n    var OverlayContainer = /** @class */ (function () {\n        function OverlayContainer(document) {\n            this._document = document;\n        }\n        OverlayContainer.prototype.ngOnDestroy = function () {\n            if (this._containerElement && this._containerElement.parentNode) {\n                this._containerElement.parentNode.removeChild(this._containerElement);\n            }\n        };\n        /**\n         * This method returns the overlay container element. It will lazily\n         * create the element the first time  it is called to facilitate using\n         * the container in non-browser environments.\n         * @returns the container element\n         */\n        OverlayContainer.prototype.getContainerElement = function () {\n            if (!this._containerElement) {\n                this._createContainer();\n            }\n            return this._containerElement;\n        };\n        /**\n         * Create the overlay container element, which is simply a div\n         * with the 'cdk-overlay-container' class on the document body.\n         */\n        OverlayContainer.prototype._createContainer = function () {\n            var containerClass = 'cdk-overlay-container';\n            var previousContainers = this._document.getElementsByClassName(containerClass);\n            // Remove any old containers. This can happen when transitioning from the server to the client.\n            for (var i = 0; i < previousContainers.length; i++) {\n                previousContainers[i].parentNode.removeChild(previousContainers[i]);\n            }\n            var container = this._document.createElement('div');\n            container.classList.add(containerClass);\n            this._document.body.appendChild(container);\n            this._containerElement = container;\n        };\n        OverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        OverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1.DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n        return OverlayContainer;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n        return parentContainer || new OverlayContainer(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_CONTAINER_PROVIDER = {\n        // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n        provide: OverlayContainer,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayContainer],\n            i1.DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ],\n        useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Reference to an overlay that has been created with the Overlay service.\n     * Used to manipulate or dispose of said overlay.\n     */\n    var OverlayRef = /** @class */ (function () {\n        function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            var _this = this;\n            this._portalOutlet = _portalOutlet;\n            this._host = _host;\n            this._pane = _pane;\n            this._config = _config;\n            this._ngZone = _ngZone;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._document = _document;\n            this._location = _location;\n            this._backdropElement = null;\n            this._backdropClick = new rxjs.Subject();\n            this._attachments = new rxjs.Subject();\n            this._detachments = new rxjs.Subject();\n            this._locationChanges = rxjs.Subscription.EMPTY;\n            this._backdropClickHandler = function (event) { return _this._backdropClick.next(event); };\n            this._keydownEventsObservable = new rxjs.Observable(function (observer) {\n                var subscription = _this._keydownEvents.subscribe(observer);\n                _this._keydownEventSubscriptions++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._keydownEventSubscriptions--;\n                };\n            });\n            /** Stream of keydown events dispatched to this overlay. */\n            this._keydownEvents = new rxjs.Subject();\n            /** Amount of subscriptions to the keydown events. */\n            this._keydownEventSubscriptions = 0;\n            if (_config.scrollStrategy) {\n                this._scrollStrategy = _config.scrollStrategy;\n                this._scrollStrategy.attach(this);\n            }\n            this._positionStrategy = _config.positionStrategy;\n        }\n        Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n            /** The overlay's HTML element */\n            get: function () {\n                return this._pane;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n            /** The overlay's backdrop HTML element. */\n            get: function () {\n                return this._backdropElement;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n            /**\n             * Wrapper around the panel element. Can be used for advanced\n             * positioning where a wrapper with specific styling is\n             * required around the overlay pane.\n             */\n            get: function () {\n                return this._host;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Attaches content, given via a Portal, to the overlay.\n         * If the overlay is configured to have a backdrop, it will be created.\n         *\n         * @param portal Portal instance to which to attach the overlay.\n         * @returns The portal attachment result.\n         */\n        OverlayRef.prototype.attach = function (portal) {\n            var _this = this;\n            var attachResult = this._portalOutlet.attach(portal);\n            if (this._positionStrategy) {\n                this._positionStrategy.attach(this);\n            }\n            // Update the pane element with the given configuration.\n            if (!this._host.parentElement && this._previousHostParent) {\n                this._previousHostParent.appendChild(this._host);\n            }\n            this._updateStackingOrder();\n            this._updateElementSize();\n            this._updateElementDirection();\n            if (this._scrollStrategy) {\n                this._scrollStrategy.enable();\n            }\n            // Update the position once the zone is stable so that the overlay will be fully rendered\n            // before attempting to position it, as the position may depend on the size of the rendered\n            // content.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                // The overlay could've been detached before the zone has stabilized.\n                if (_this.hasAttached()) {\n                    _this.updatePosition();\n                }\n            });\n            // Enable pointer events for the overlay pane element.\n            this._togglePointerEvents(true);\n            if (this._config.hasBackdrop) {\n                this._attachBackdrop();\n            }\n            if (this._config.panelClass) {\n                this._toggleClasses(this._pane, this._config.panelClass, true);\n            }\n            // Only emit the `attachments` event once all other setup is done.\n            this._attachments.next();\n            // Track this overlay by the keyboard dispatcher\n            this._keyboardDispatcher.add(this);\n            // @breaking-change 8.0.0 remove the null check for `_location`\n            // once the constructor parameter is made required.\n            if (this._config.disposeOnNavigation && this._location) {\n                this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n            }\n            return attachResult;\n        };\n        /**\n         * Detaches an overlay from a portal.\n         * @returns The portal detachment result.\n         */\n        OverlayRef.prototype.detach = function () {\n            if (!this.hasAttached()) {\n                return;\n            }\n            this.detachBackdrop();\n            // When the overlay is detached, the pane element should disable pointer events.\n            // This is necessary because otherwise the pane element will cover the page and disable\n            // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n            this._togglePointerEvents(false);\n            if (this._positionStrategy && this._positionStrategy.detach) {\n                this._positionStrategy.detach();\n            }\n            if (this._scrollStrategy) {\n                this._scrollStrategy.disable();\n            }\n            var detachmentResult = this._portalOutlet.detach();\n            // Only emit after everything is detached.\n            this._detachments.next();\n            // Remove this overlay from keyboard dispatcher tracking.\n            this._keyboardDispatcher.remove(this);\n            // Keeping the host element in the DOM can cause scroll jank, because it still gets\n            // rendered, even though it's transparent and unclickable which is why we remove it.\n            this._detachContentWhenStable();\n            // Stop listening for location changes.\n            this._locationChanges.unsubscribe();\n            return detachmentResult;\n        };\n        /** Cleans up the overlay from the DOM. */\n        OverlayRef.prototype.dispose = function () {\n            var isAttached = this.hasAttached();\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._disposeScrollStrategy();\n            this.detachBackdrop();\n            this._locationChanges.unsubscribe();\n            this._keyboardDispatcher.remove(this);\n            this._portalOutlet.dispose();\n            this._attachments.complete();\n            this._backdropClick.complete();\n            this._keydownEvents.complete();\n            if (this._host && this._host.parentNode) {\n                this._host.parentNode.removeChild(this._host);\n                this._host = null;\n            }\n            this._previousHostParent = this._pane = null;\n            if (isAttached) {\n                this._detachments.next();\n            }\n            this._detachments.complete();\n        };\n        /** Whether the overlay has attached content. */\n        OverlayRef.prototype.hasAttached = function () {\n            return this._portalOutlet.hasAttached();\n        };\n        /** Gets an observable that emits when the backdrop has been clicked. */\n        OverlayRef.prototype.backdropClick = function () {\n            return this._backdropClick.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been attached. */\n        OverlayRef.prototype.attachments = function () {\n            return this._attachments.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been detached. */\n        OverlayRef.prototype.detachments = function () {\n            return this._detachments.asObservable();\n        };\n        /** Gets an observable of keydown events targeted to this overlay. */\n        OverlayRef.prototype.keydownEvents = function () {\n            return this._keydownEventsObservable;\n        };\n        /** Gets the current overlay configuration, which is immutable. */\n        OverlayRef.prototype.getConfig = function () {\n            return this._config;\n        };\n        /** Updates the position of the overlay based on the position strategy. */\n        OverlayRef.prototype.updatePosition = function () {\n            if (this._positionStrategy) {\n                this._positionStrategy.apply();\n            }\n        };\n        /** Switches to a new position strategy and updates the overlay position. */\n        OverlayRef.prototype.updatePositionStrategy = function (strategy) {\n            if (strategy === this._positionStrategy) {\n                return;\n            }\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._positionStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                this.updatePosition();\n            }\n        };\n        /** Update the size properties of the overlay. */\n        OverlayRef.prototype.updateSize = function (sizeConfig) {\n            this._config = tslib.__assign(tslib.__assign({}, this._config), sizeConfig);\n            this._updateElementSize();\n        };\n        /** Sets the LTR/RTL direction for the overlay. */\n        OverlayRef.prototype.setDirection = function (dir) {\n            this._config = tslib.__assign(tslib.__assign({}, this._config), { direction: dir });\n            this._updateElementDirection();\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        OverlayRef.prototype.addPanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, true);\n            }\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        OverlayRef.prototype.removePanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, false);\n            }\n        };\n        /**\n         * Returns the layout direction of the overlay panel.\n         */\n        OverlayRef.prototype.getDirection = function () {\n            var direction = this._config.direction;\n            if (!direction) {\n                return 'ltr';\n            }\n            return typeof direction === 'string' ? direction : direction.value;\n        };\n        /** Switches to a new scroll strategy. */\n        OverlayRef.prototype.updateScrollStrategy = function (strategy) {\n            if (strategy === this._scrollStrategy) {\n                return;\n            }\n            this._disposeScrollStrategy();\n            this._scrollStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                strategy.enable();\n            }\n        };\n        /** Updates the text direction of the overlay panel. */\n        OverlayRef.prototype._updateElementDirection = function () {\n            this._host.setAttribute('dir', this.getDirection());\n        };\n        /** Updates the size of the overlay element based on the overlay config. */\n        OverlayRef.prototype._updateElementSize = function () {\n            if (!this._pane) {\n                return;\n            }\n            var style = this._pane.style;\n            style.width = coercion.coerceCssPixelValue(this._config.width);\n            style.height = coercion.coerceCssPixelValue(this._config.height);\n            style.minWidth = coercion.coerceCssPixelValue(this._config.minWidth);\n            style.minHeight = coercion.coerceCssPixelValue(this._config.minHeight);\n            style.maxWidth = coercion.coerceCssPixelValue(this._config.maxWidth);\n            style.maxHeight = coercion.coerceCssPixelValue(this._config.maxHeight);\n        };\n        /** Toggles the pointer events for the overlay pane element. */\n        OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n            this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n        };\n        /** Attaches a backdrop for this overlay. */\n        OverlayRef.prototype._attachBackdrop = function () {\n            var _this = this;\n            var showingClass = 'cdk-overlay-backdrop-showing';\n            this._backdropElement = this._document.createElement('div');\n            this._backdropElement.classList.add('cdk-overlay-backdrop');\n            if (this._config.backdropClass) {\n                this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n            }\n            // Insert the backdrop before the pane in the DOM order,\n            // in order to handle stacked overlays properly.\n            this._host.parentElement.insertBefore(this._backdropElement, this._host);\n            // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n            // action desired when such a click occurs (usually closing the overlay).\n            this._backdropElement.addEventListener('click', this._backdropClickHandler);\n            // Add class to fade-in the backdrop after one frame.\n            if (typeof requestAnimationFrame !== 'undefined') {\n                this._ngZone.runOutsideAngular(function () {\n                    requestAnimationFrame(function () {\n                        if (_this._backdropElement) {\n                            _this._backdropElement.classList.add(showingClass);\n                        }\n                    });\n                });\n            }\n            else {\n                this._backdropElement.classList.add(showingClass);\n            }\n        };\n        /**\n         * Updates the stacking order of the element, moving it to the top if necessary.\n         * This is required in cases where one overlay was detached, while another one,\n         * that should be behind it, was destroyed. The next time both of them are opened,\n         * the stacking will be wrong, because the detached element's pane will still be\n         * in its original DOM position.\n         */\n        OverlayRef.prototype._updateStackingOrder = function () {\n            if (this._host.nextSibling) {\n                this._host.parentNode.appendChild(this._host);\n            }\n        };\n        /** Detaches the backdrop (if any) associated with the overlay. */\n        OverlayRef.prototype.detachBackdrop = function () {\n            var _this = this;\n            var backdropToDetach = this._backdropElement;\n            if (!backdropToDetach) {\n                return;\n            }\n            var timeoutId;\n            var finishDetach = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach) {\n                    backdropToDetach.removeEventListener('click', _this._backdropClickHandler);\n                    backdropToDetach.removeEventListener('transitionend', finishDetach);\n                    if (backdropToDetach.parentNode) {\n                        backdropToDetach.parentNode.removeChild(backdropToDetach);\n                    }\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                if (_this._config.backdropClass) {\n                    _this._toggleClasses(backdropToDetach, _this._config.backdropClass, false);\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            this._ngZone.runOutsideAngular(function () {\n                backdropToDetach.addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach, 500); });\n        };\n        /** Toggles a single CSS class or an array of classes on an element. */\n        OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {\n            var classList = element.classList;\n            coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                // We can't do a spread here, because IE doesn't support setting multiple classes.\n                // Also trying to add an empty string to a DOMTokenList will throw.\n                if (cssClass) {\n                    isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n                }\n            });\n        };\n        /** Detaches the overlay content next time the zone stabilizes. */\n        OverlayRef.prototype._detachContentWhenStable = function () {\n            var _this = this;\n            // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n            // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n            // be patched to run inside the zone, which will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(function () {\n                // We can't remove the host here immediately, because the overlay pane's content\n                // might still be animating. This stream helps us avoid interrupting the animation\n                // by waiting for the pane to become empty.\n                var subscription = _this._ngZone.onStable\n                    .asObservable()\n                    .pipe(operators.takeUntil(rxjs.merge(_this._attachments, _this._detachments)))\n                    .subscribe(function () {\n                    // Needs a couple of checks for the pane and host, because\n                    // they may have been removed by the time the zone stabilizes.\n                    if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                        if (_this._pane && _this._config.panelClass) {\n                            _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                        }\n                        if (_this._host && _this._host.parentElement) {\n                            _this._previousHostParent = _this._host.parentElement;\n                            _this._previousHostParent.removeChild(_this._host);\n                        }\n                        subscription.unsubscribe();\n                    }\n                });\n            });\n        };\n        /** Disposes of a scroll strategy. */\n        OverlayRef.prototype._disposeScrollStrategy = function () {\n            var scrollStrategy = this._scrollStrategy;\n            if (scrollStrategy) {\n                scrollStrategy.disable();\n                if (scrollStrategy.detach) {\n                    scrollStrategy.detach();\n                }\n            }\n        };\n        return OverlayRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The points of the origin element and the overlay element to connect. */\n    var ConnectionPositionPair = /** @class */ (function () {\n        function ConnectionPositionPair(origin, overlay, \n        /** Offset along the X axis. */\n        offsetX, \n        /** Offset along the Y axis. */\n        offsetY, \n        /** Class(es) to be applied to the panel while this position is active. */\n        panelClass) {\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            this.panelClass = panelClass;\n            this.originX = origin.originX;\n            this.originY = origin.originY;\n            this.overlayX = overlay.overlayX;\n            this.overlayY = overlay.overlayY;\n        }\n        return ConnectionPositionPair;\n    }());\n    /**\n     * Set of properties regarding the position of the origin and overlay relative to the viewport\n     * with respect to the containing Scrollable elements.\n     *\n     * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n     * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     * The overlay and origin are outside view if there is no overlap between their bounding client\n     * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     *       -----------                    -----------\n     *       | outside |                    | clipped |\n     *       |  view   |              --------------------------\n     *       |         |              |     |         |        |\n     *       ----------               |     -----------        |\n     *  --------------------------    |                        |\n     *  |                        |    |      Scrollable        |\n     *  |                        |    |                        |\n     *  |                        |     --------------------------\n     *  |      Scrollable        |\n     *  |                        |\n     *  --------------------------\n     *\n     *  @docs-private\n     */\n    var ScrollingVisibility = /** @class */ (function () {\n        function ScrollingVisibility() {\n        }\n        return ScrollingVisibility;\n    }());\n    /** The change event emitted by the strategy when a fallback position is used. */\n    var ConnectedOverlayPositionChange = /** @class */ (function () {\n        function ConnectedOverlayPositionChange(\n        /** The position used as a result of this change. */\n        connectionPair, \n        /** @docs-private */\n        scrollableViewProperties) {\n            this.connectionPair = connectionPair;\n            this.scrollableViewProperties = scrollableViewProperties;\n        }\n        /** @nocollapse */\n        ConnectedOverlayPositionChange.ctorParameters = function () { return [\n            { type: ConnectionPositionPair },\n            { type: ScrollingVisibility, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return ConnectedOverlayPositionChange;\n    }());\n    /**\n     * Validates whether a vertical position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateVerticalPosition(property, value) {\n        if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n        }\n    }\n    /**\n     * Validates whether a horizontal position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateHorizontalPosition(property, value) {\n        if (value !== 'start' && value !== 'end' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: refactor clipping detection into a separate thing (part of scrolling module)\n    // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n    /** Class to be added to the overlay bounding box. */\n    var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     */\n    var FlexibleConnectedPositionStrategy = /** @class */ (function () {\n        function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n            /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n            this._lastBoundingBoxSize = { width: 0, height: 0 };\n            /** Whether the overlay was pushed in a previous positioning. */\n            this._isPushed = false;\n            /** Whether the overlay can be pushed on-screen on the initial open. */\n            this._canPush = true;\n            /** Whether the overlay can grow via flexible width/height after the initial open. */\n            this._growAfterOpen = false;\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            this._hasFlexibleDimensions = true;\n            /** Whether the overlay position is locked. */\n            this._positionLocked = false;\n            /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n            this._viewportMargin = 0;\n            /** The Scrollable containers used to check scrollable view properties on position change. */\n            this._scrollables = [];\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            /** Subject that emits whenever the position changes. */\n            this._positionChanges = new rxjs.Subject();\n            /** Subscription to viewport size changes. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Default offset for the overlay along the x axis. */\n            this._offsetX = 0;\n            /** Default offset for the overlay along the y axis. */\n            this._offsetY = 0;\n            /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n            this._appliedPanelClasses = [];\n            /** Observable sequence of position changes. */\n            this.positionChanges = this._positionChanges.asObservable();\n            this.setOrigin(connectedTo);\n        }\n        Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attaches this position strategy to an overlay. */\n        FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            var _this = this;\n            if (this._overlayRef && overlayRef !== this._overlayRef) {\n                throw Error('This position strategy is already attached to an overlay');\n            }\n            this._validatePositions();\n            overlayRef.hostElement.classList.add(boundingBoxClass);\n            this._overlayRef = overlayRef;\n            this._boundingBox = overlayRef.hostElement;\n            this._pane = overlayRef.overlayElement;\n            this._isDisposed = false;\n            this._isInitialRender = true;\n            this._lastPosition = null;\n            this._resizeSubscription.unsubscribe();\n            this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n                // When the window is resized, we want to trigger the next reposition as if it\n                // was an initial render, in order for the strategy to pick a new optimal position,\n                // otherwise position locking will cause it to stay at the old one.\n                _this._isInitialRender = true;\n                _this.apply();\n            });\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin best fits on-screen.\n         *\n         * The selection of a position goes as follows:\n         *  - If any positions fit completely within the viewport as-is,\n         *      choose the first position that does so.\n         *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n         *      choose the position with the greatest available size modified by the positions' weight.\n         *  - If pushing is enabled, take the position that went off-screen the least and push it\n         *      on-screen.\n         *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n         * @docs-private\n         */\n        FlexibleConnectedPositionStrategy.prototype.apply = function () {\n            var e_1, _a, e_2, _b;\n            // We shouldn't do anything if the strategy was disposed or we're on the server.\n            if (this._isDisposed || !this._platform.isBrowser) {\n                return;\n            }\n            // If the position has been applied already (e.g. when the overlay was opened) and the\n            // consumer opted into locking in the position, re-use the old position, in order to\n            // prevent the overlay from jumping around.\n            if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n                this.reapplyLastPosition();\n                return;\n            }\n            this._clearPanelClasses();\n            this._resetOverlayElementStyles();\n            this._resetBoundingBoxStyles();\n            // We need the bounding rects for the origin and the overlay to determine how to position\n            // the overlay relative to the origin.\n            // We use the viewport rect to determine whether a position would go off-screen.\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            var originRect = this._originRect;\n            var overlayRect = this._overlayRect;\n            var viewportRect = this._viewportRect;\n            // Positions where the overlay will fit with flexible dimensions.\n            var flexibleFits = [];\n            // Fallback if none of the preferred positions fit within the viewport.\n            var fallback;\n            try {\n                // Go through each of the preferred positions looking for a good fit.\n                // If a good fit is found, it will be applied immediately.\n                for (var _c = tslib.__values(this._preferredPositions), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var pos = _d.value;\n                    // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n                    var originPoint = this._getOriginPoint(originRect, pos);\n                    // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n                    // overlay in this position. We use the top-left corner for calculations and later translate\n                    // this into an appropriate (top, left, bottom, right) style.\n                    var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n                    // Calculate how well the overlay would fit into the viewport with this point.\n                    var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n                    // If the overlay, without any further work, fits into the viewport, use this position.\n                    if (overlayFit.isCompletelyWithinViewport) {\n                        this._isPushed = false;\n                        this._applyPosition(pos, originPoint);\n                        return;\n                    }\n                    // If the overlay has flexible dimensions, we can use this position\n                    // so long as there's enough space for the minimum dimensions.\n                    if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                        // Save positions where the overlay will fit with flexible dimensions. We will use these\n                        // if none of the positions fit *without* flexible dimensions.\n                        flexibleFits.push({\n                            position: pos,\n                            origin: originPoint,\n                            overlayRect: overlayRect,\n                            boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                        });\n                        continue;\n                    }\n                    // If the current preferred position does not fit on the screen, remember the position\n                    // if it has more visible area on-screen than we've seen and move onto the next preferred\n                    // position.\n                    if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                        fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // If there are any positions where the overlay would fit with flexible dimensions, choose the\n            // one that has the greatest area available modified by the position's weight\n            if (flexibleFits.length) {\n                var bestFit = null;\n                var bestScore = -1;\n                try {\n                    for (var flexibleFits_1 = tslib.__values(flexibleFits), flexibleFits_1_1 = flexibleFits_1.next(); !flexibleFits_1_1.done; flexibleFits_1_1 = flexibleFits_1.next()) {\n                        var fit = flexibleFits_1_1.value;\n                        var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                        if (score > bestScore) {\n                            bestScore = score;\n                            bestFit = fit;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (flexibleFits_1_1 && !flexibleFits_1_1.done && (_b = flexibleFits_1.return)) _b.call(flexibleFits_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                this._isPushed = false;\n                this._applyPosition(bestFit.position, bestFit.origin);\n                return;\n            }\n            // When none of the preferred positions fit within the viewport, take the position\n            // that went off-screen the least and attempt to push it on-screen.\n            if (this._canPush) {\n                // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n                this._isPushed = true;\n                this._applyPosition(fallback.position, fallback.originPoint);\n                return;\n            }\n            // All options for getting the overlay within the viewport have been exhausted, so go with the\n            // position that went off-screen the least.\n            this._applyPosition(fallback.position, fallback.originPoint);\n        };\n        FlexibleConnectedPositionStrategy.prototype.detach = function () {\n            this._clearPanelClasses();\n            this._lastPosition = null;\n            this._previousPushAmount = null;\n            this._resizeSubscription.unsubscribe();\n        };\n        /** Cleanup after the element gets destroyed. */\n        FlexibleConnectedPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed) {\n                return;\n            }\n            // We can't use `_resetBoundingBoxStyles` here, because it resets\n            // some properties to zero, rather than removing them.\n            if (this._boundingBox) {\n                extendStyles(this._boundingBox.style, {\n                    top: '',\n                    left: '',\n                    right: '',\n                    bottom: '',\n                    height: '',\n                    width: '',\n                    alignItems: '',\n                    justifyContent: '',\n                });\n            }\n            if (this._pane) {\n                this._resetOverlayElementStyles();\n            }\n            if (this._overlayRef) {\n                this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n            }\n            this.detach();\n            this._positionChanges.complete();\n            this._overlayRef = this._boundingBox = null;\n            this._isDisposed = true;\n        };\n        /**\n         * This re-aligns the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {\n            if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n                this._originRect = this._getOriginRect();\n                this._overlayRect = this._pane.getBoundingClientRect();\n                this._viewportRect = this._getNarrowedViewportRect();\n                var lastPosition = this._lastPosition || this._preferredPositions[0];\n                var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n                this._applyPosition(lastPosition, originPoint);\n            }\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._scrollables = scrollables;\n            return this;\n        };\n        /**\n         * Adds new preferred positions.\n         * @param positions List of positions options for this overlay.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions;\n            // If the last calculated position object isn't part of the positions anymore, clear\n            // it in order to avoid it being picked up if the consumer tries to re-apply.\n            if (positions.indexOf(this._lastPosition) === -1) {\n                this._lastPosition = null;\n            }\n            this._validatePositions();\n            return this;\n        };\n        /**\n         * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n         * @param margin Required margin between the overlay and the viewport edge in pixels.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {\n            this._viewportMargin = margin;\n            return this;\n        };\n        /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {\n            if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n            this._hasFlexibleDimensions = flexibleDimensions;\n            return this;\n        };\n        /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n        FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {\n            if (growAfterOpen === void 0) { growAfterOpen = true; }\n            this._growAfterOpen = growAfterOpen;\n            return this;\n        };\n        /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {\n            if (canPush === void 0) { canPush = true; }\n            this._canPush = canPush;\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            if (isLocked === void 0) { isLocked = true; }\n            this._positionLocked = isLocked;\n            return this;\n        };\n        /**\n         * Sets the origin, relative to which to position the overlay.\n         * Using an element origin is useful for building components that need to be positioned\n         * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n         * used for cases like contextual menus which open relative to the user's pointer.\n         * @param origin Reference to the new origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._origin = origin;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the x-axis.\n         * @param offset New offset in the X axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {\n            this._offsetX = offset;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the y-axis.\n         * @param offset New offset in the Y axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {\n            this._offsetY = offset;\n            return this;\n        };\n        /**\n         * Configures that the position strategy should set a `transform-origin` on some elements\n         * inside the overlay, depending on the current position that is being applied. This is\n         * useful for the cases where the origin of an animation can change depending on the\n         * alignment of the overlay.\n         * @param selector CSS selector that will be used to find the target\n         *    elements onto which to set the transform origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {\n            this._transformOriginSelector = selector;\n            return this;\n        };\n        /**\n         * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {\n            var x;\n            if (pos.originX == 'center') {\n                // Note: when centering we should always use the `left`\n                // offset, otherwise the position will be wrong in RTL.\n                x = originRect.left + (originRect.width / 2);\n            }\n            else {\n                var startX = this._isRtl() ? originRect.right : originRect.left;\n                var endX = this._isRtl() ? originRect.left : originRect.right;\n                x = pos.originX == 'start' ? startX : endX;\n            }\n            var y;\n            if (pos.originY == 'center') {\n                y = originRect.top + (originRect.height / 2);\n            }\n            else {\n                y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n            }\n            return { x: x, y: y };\n        };\n        /**\n         * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n         * origin point to which the overlay should be connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n            // Calculate the (overlayStartX, overlayStartY), the start of the\n            // potential overlay position relative to the origin point.\n            var overlayStartX;\n            if (pos.overlayX == 'center') {\n                overlayStartX = -overlayRect.width / 2;\n            }\n            else if (pos.overlayX === 'start') {\n                overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n            }\n            else {\n                overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n            }\n            var overlayStartY;\n            if (pos.overlayY == 'center') {\n                overlayStartY = -overlayRect.height / 2;\n            }\n            else {\n                overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n            }\n            // The (x, y) coordinates of the overlay.\n            return {\n                x: originPoint.x + overlayStartX,\n                y: originPoint.y + overlayStartY,\n            };\n        };\n        /** Gets how well an overlay at the given point will fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {\n            var x = point.x, y = point.y;\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            // Account for the offsets since they could push the overlay out of the viewport.\n            if (offsetX) {\n                x += offsetX;\n            }\n            if (offsetY) {\n                y += offsetY;\n            }\n            // How much the overlay would overflow at this position, on each side.\n            var leftOverflow = 0 - x;\n            var rightOverflow = (x + overlay.width) - viewport.width;\n            var topOverflow = 0 - y;\n            var bottomOverflow = (y + overlay.height) - viewport.height;\n            // Visible parts of the element on each axis.\n            var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n            var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n            var visibleArea = visibleWidth * visibleHeight;\n            return {\n                visibleArea: visibleArea,\n                isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n                fitsInViewportVertically: visibleHeight === overlay.height,\n                fitsInViewportHorizontally: visibleWidth == overlay.width,\n            };\n        };\n        /**\n         * Whether the overlay can fit within the viewport when it may resize either its width or height.\n         * @param fit How well the overlay fits in the viewport at some position.\n         * @param point The (x, y) coordinates of the overlat at some position.\n         * @param viewport The geometry of the viewport.\n         */\n        FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {\n            if (this._hasFlexibleDimensions) {\n                var availableHeight = viewport.bottom - point.y;\n                var availableWidth = viewport.right - point.x;\n                var minHeight = this._overlayRef.getConfig().minHeight;\n                var minWidth = this._overlayRef.getConfig().minWidth;\n                var verticalFit = fit.fitsInViewportVertically ||\n                    (minHeight != null && minHeight <= availableHeight);\n                var horizontalFit = fit.fitsInViewportHorizontally ||\n                    (minWidth != null && minWidth <= availableWidth);\n                return verticalFit && horizontalFit;\n            }\n            return false;\n        };\n        /**\n         * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n         * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n         * right and bottom).\n         *\n         * @param start Starting point from which the overlay is pushed.\n         * @param overlay Dimensions of the overlay.\n         * @param scrollPosition Current viewport scroll position.\n         * @returns The point at which to position the overlay after pushing. This is effectively a new\n         *     originPoint.\n         */\n        FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {\n            // If the position is locked and we've pushed the overlay already, reuse the previous push\n            // amount, rather than pushing it again. If we were to continue pushing, the element would\n            // remain in the viewport, which goes against the expectations when position locking is enabled.\n            if (this._previousPushAmount && this._positionLocked) {\n                return {\n                    x: start.x + this._previousPushAmount.x,\n                    y: start.y + this._previousPushAmount.y\n                };\n            }\n            var viewport = this._viewportRect;\n            // Determine how much the overlay goes outside the viewport on each\n            // side, which we'll use to decide which direction to push it.\n            var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n            var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n            var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n            var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n            // Amount by which to push the overlay in each axis such that it remains on-screen.\n            var pushX = 0;\n            var pushY = 0;\n            // If the overlay fits completely within the bounds of the viewport, push it from whichever\n            // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n            // viewport and allow for the trailing end of the overlay to go out of bounds.\n            if (overlay.width <= viewport.width) {\n                pushX = overflowLeft || -overflowRight;\n            }\n            else {\n                pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n            }\n            if (overlay.height <= viewport.height) {\n                pushY = overflowTop || -overflowBottom;\n            }\n            else {\n                pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n            }\n            this._previousPushAmount = { x: pushX, y: pushY };\n            return {\n                x: start.x + pushX,\n                y: start.y + pushY,\n            };\n        };\n        /**\n         * Applies a computed position to the overlay and emits a position change.\n         * @param position The position preference\n         * @param originPoint The point on the origin element where the overlay is connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {\n            this._setTransformOrigin(position);\n            this._setOverlayElementStyles(originPoint, position);\n            this._setBoundingBoxStyles(originPoint, position);\n            if (position.panelClass) {\n                this._addPanelClasses(position.panelClass);\n            }\n            // Save the last connected position in case the position needs to be re-calculated.\n            this._lastPosition = position;\n            // Notify that the position has been changed along with its change properties.\n            // We only emit if we've got any subscriptions, because the scroll visibility\n            // calculcations can be somewhat expensive.\n            if (this._positionChanges.observers.length) {\n                var scrollableViewProperties = this._getScrollVisibility();\n                var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n                this._positionChanges.next(changeEvent);\n            }\n            this._isInitialRender = false;\n        };\n        /** Sets the transform origin based on the configured selector and the passed-in position.  */\n        FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {\n            if (!this._transformOriginSelector) {\n                return;\n            }\n            var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n            var xOrigin;\n            var yOrigin = position.overlayY;\n            if (position.overlayX === 'center') {\n                xOrigin = 'center';\n            }\n            else if (this._isRtl()) {\n                xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n            }\n            else {\n                xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n            }\n            for (var i = 0; i < elements.length; i++) {\n                elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n            }\n        };\n        /**\n         * Gets the position and size of the overlay's sizing container.\n         *\n         * This method does no measuring and applies no styles so that we can cheaply compute the\n         * bounds for all positions and choose the best fit based on these results.\n         */\n        FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {\n            var viewport = this._viewportRect;\n            var isRtl = this._isRtl();\n            var height, top, bottom;\n            if (position.overlayY === 'top') {\n                // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n                top = origin.y;\n                height = viewport.height - top + this._viewportMargin;\n            }\n            else if (position.overlayY === 'bottom') {\n                // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n                // the viewport margin back in, because the viewport rect is narrowed down to remove the\n                // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n                bottom = viewport.height - origin.y + this._viewportMargin * 2;\n                height = viewport.height - bottom + this._viewportMargin;\n            }\n            else {\n                // If neither top nor bottom, it means that the overlay is vertically centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n                // `origin.y - viewport.top`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n                var previousHeight = this._lastBoundingBoxSize.height;\n                height = smallestDistanceToViewportEdge * 2;\n                top = origin.y - smallestDistanceToViewportEdge;\n                if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                    top = origin.y - (previousHeight / 2);\n                }\n            }\n            // The overlay is opening 'right-ward' (the content flows to the right).\n            var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n                (position.overlayX === 'end' && isRtl);\n            // The overlay is opening 'left-ward' (the content flows to the left).\n            var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n                (position.overlayX === 'start' && isRtl);\n            var width, left, right;\n            if (isBoundedByLeftViewportEdge) {\n                right = viewport.width - origin.x + this._viewportMargin;\n                width = origin.x - this._viewportMargin;\n            }\n            else if (isBoundedByRightViewportEdge) {\n                left = origin.x;\n                width = viewport.right - origin.x;\n            }\n            else {\n                // If neither start nor end, it means that the overlay is horizontally centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.right - origin.x` and\n                // `origin.x - viewport.left`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n                var previousWidth = this._lastBoundingBoxSize.width;\n                width = smallestDistanceToViewportEdge * 2;\n                left = origin.x - smallestDistanceToViewportEdge;\n                if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                    left = origin.x - (previousWidth / 2);\n                }\n            }\n            return { top: top, left: left, bottom: bottom, right: right, width: width, height: height };\n        };\n        /**\n         * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n         * origin's connection point and stetches to the bounds of the viewport.\n         *\n         * @param origin The point on the origin element where the overlay is connected.\n         * @param position The position preference\n         */\n        FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {\n            var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n            // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n            // when applying a new size.\n            if (!this._isInitialRender && !this._growAfterOpen) {\n                boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n                boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n            }\n            var styles = {};\n            if (this._hasExactPosition()) {\n                styles.top = styles.left = '0';\n                styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n                styles.width = styles.height = '100%';\n            }\n            else {\n                var maxHeight = this._overlayRef.getConfig().maxHeight;\n                var maxWidth = this._overlayRef.getConfig().maxWidth;\n                styles.height = coercion.coerceCssPixelValue(boundingBoxRect.height);\n                styles.top = coercion.coerceCssPixelValue(boundingBoxRect.top);\n                styles.bottom = coercion.coerceCssPixelValue(boundingBoxRect.bottom);\n                styles.width = coercion.coerceCssPixelValue(boundingBoxRect.width);\n                styles.left = coercion.coerceCssPixelValue(boundingBoxRect.left);\n                styles.right = coercion.coerceCssPixelValue(boundingBoxRect.right);\n                // Push the pane content towards the proper direction.\n                if (position.overlayX === 'center') {\n                    styles.alignItems = 'center';\n                }\n                else {\n                    styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n                }\n                if (position.overlayY === 'center') {\n                    styles.justifyContent = 'center';\n                }\n                else {\n                    styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n                }\n                if (maxHeight) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(maxHeight);\n                }\n                if (maxWidth) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(maxWidth);\n                }\n            }\n            this._lastBoundingBoxSize = boundingBoxRect;\n            extendStyles(this._boundingBox.style, styles);\n        };\n        /** Resets the styles for the bounding box so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {\n            extendStyles(this._boundingBox.style, {\n                top: '0',\n                left: '0',\n                right: '0',\n                bottom: '0',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        };\n        /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {\n            extendStyles(this._pane.style, {\n                top: '',\n                left: '',\n                bottom: '',\n                right: '',\n                position: '',\n                transform: '',\n            });\n        };\n        /** Sets positioning styles to the overlay element. */\n        FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {\n            var styles = {};\n            var hasExactPosition = this._hasExactPosition();\n            var hasFlexibleDimensions = this._hasFlexibleDimensions;\n            var config = this._overlayRef.getConfig();\n            if (hasExactPosition) {\n                var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n                extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n                extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n            }\n            else {\n                styles.position = 'static';\n            }\n            // Use a transform to apply the offsets. We do this because the `center` positions rely on\n            // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n            // off the position. We also can't use margins, because they won't have an effect in some\n            // cases where the element doesn't have anything to \"push off of\". Finally, this works\n            // better both with flexible and non-flexible positioning.\n            var transformString = '';\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            if (offsetX) {\n                transformString += \"translateX(\" + offsetX + \"px) \";\n            }\n            if (offsetY) {\n                transformString += \"translateY(\" + offsetY + \"px)\";\n            }\n            styles.transform = transformString.trim();\n            // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n            // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n            // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n            // Note that this doesn't apply when we have an exact position, in which case we do want to\n            // apply them because they'll be cleared from the bounding box.\n            if (config.maxHeight) {\n                if (hasExactPosition) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(config.maxHeight);\n                }\n                else if (hasFlexibleDimensions) {\n                    styles.maxHeight = '';\n                }\n            }\n            if (config.maxWidth) {\n                if (hasExactPosition) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(config.maxWidth);\n                }\n                else if (hasFlexibleDimensions) {\n                    styles.maxWidth = '';\n                }\n            }\n            extendStyles(this._pane.style, styles);\n        };\n        /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the\n            // preferred position has changed since the last `apply`.\n            var styles = { top: null, bottom: null };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n            // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n            // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n            // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n            // otherwise our positioning will be thrown off.\n            overlayPoint.y -= virtualKeyboardOffset;\n            // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n            // above or below the origin and the direction in which the element will expand.\n            if (position.overlayY === 'bottom') {\n                // When using `bottom`, we adjust the y position such that it is the distance\n                // from the bottom of the viewport rather than the top.\n                var documentHeight = this._document.documentElement.clientHeight;\n                styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n            }\n            else {\n                styles.top = coercion.coerceCssPixelValue(overlayPoint.y);\n            }\n            return styles;\n        };\n        /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the preferred position has\n            // changed since the last `apply`.\n            var styles = { left: null, right: null };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n            // or \"after\" the origin, which determines the direction in which the element will expand.\n            // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n            // page is in RTL or LTR.\n            var horizontalStyleProperty;\n            if (this._isRtl()) {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n            }\n            else {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n            }\n            // When we're setting `right`, we adjust the x position such that it is the distance\n            // from the right edge of the viewport rather than the left edge.\n            if (horizontalStyleProperty === 'right') {\n                var documentWidth = this._document.documentElement.clientWidth;\n                styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n            }\n            else {\n                styles.left = coercion.coerceCssPixelValue(overlayPoint.x);\n            }\n            return styles;\n        };\n        /**\n         * Gets the view properties of the trigger and overlay, including whether they are clipped\n         * or completely outside the view of any of the strategy's scrollables.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {\n            // Note: needs fresh rects since the position could've changed.\n            var originBounds = this._getOriginRect();\n            var overlayBounds = this._pane.getBoundingClientRect();\n            // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n            // every time, we should be able to use the scrollTop of the containers if the size of those\n            // containers hasn't changed.\n            var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n                return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n            });\n            return {\n                isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n                isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n                isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n                isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n            };\n        };\n        /** Subtracts the amount that an element is overflowing on an axis from its length. */\n        FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n            var overflows = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                overflows[_i - 1] = arguments[_i];\n            }\n            return overflows.reduce(function (currentValue, currentOverflow) {\n                return currentValue - Math.max(currentOverflow, 0);\n            }, length);\n        };\n        /** Narrows the given viewport rect by the current _viewportMargin. */\n        FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {\n            // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n            // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n            // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n            // and `innerHeight` that do. This is necessary, because the overlay container uses\n            // 100% `width` and `height` which don't include the scrollbar either.\n            var width = this._document.documentElement.clientWidth;\n            var height = this._document.documentElement.clientHeight;\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            return {\n                top: scrollPosition.top + this._viewportMargin,\n                left: scrollPosition.left + this._viewportMargin,\n                right: scrollPosition.left + width - this._viewportMargin,\n                bottom: scrollPosition.top + height - this._viewportMargin,\n                width: width - (2 * this._viewportMargin),\n                height: height - (2 * this._viewportMargin),\n            };\n        };\n        /** Whether the we're dealing with an RTL context */\n        FlexibleConnectedPositionStrategy.prototype._isRtl = function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        };\n        /** Determines whether the overlay uses exact or flexible positioning. */\n        FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {\n            return !this._hasFlexibleDimensions || this._isPushed;\n        };\n        /** Retrieves the offset of a position along the x or y axis. */\n        FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {\n            if (axis === 'x') {\n                // We don't do something like `position['offset' + axis]` in\n                // order to avoid breking minifiers that rename properties.\n                return position.offsetX == null ? this._offsetX : position.offsetX;\n            }\n            return position.offsetY == null ? this._offsetY : position.offsetY;\n        };\n        /** Validates that the current position match the expected values. */\n        FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(function (pair) {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        };\n        /** Adds a single CSS class or an array of classes on the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {\n            var _this = this;\n            if (this._pane) {\n                coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                    if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                        _this._appliedPanelClasses.push(cssClass);\n                        _this._pane.classList.add(cssClass);\n                    }\n                });\n            }\n        };\n        /** Clears the classes that the position strategy has applied from the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {\n            var _this = this;\n            if (this._pane) {\n                this._appliedPanelClasses.forEach(function (cssClass) {\n                    _this._pane.classList.remove(cssClass);\n                });\n                this._appliedPanelClasses = [];\n            }\n        };\n        /** Returns the ClientRect of the current origin. */\n        FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {\n            var origin = this._origin;\n            if (origin instanceof i0.ElementRef) {\n                return origin.nativeElement.getBoundingClientRect();\n            }\n            if (origin instanceof HTMLElement) {\n                return origin.getBoundingClientRect();\n            }\n            var width = origin.width || 0;\n            var height = origin.height || 0;\n            // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n            return {\n                top: origin.y,\n                bottom: origin.y + height,\n                left: origin.x,\n                right: origin.x + width,\n                height: height,\n                width: width\n            };\n        };\n        return FlexibleConnectedPositionStrategy;\n    }());\n    /** Shallow-extends a stylesheet object with another stylesheet object. */\n    function extendStyles(dest, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative to some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n     * @breaking-change 8.0.0\n     */\n    var ConnectedPositionStrategy = /** @class */ (function () {\n        function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n            // the extra logic, we create an instance of the positioning strategy that has some\n            // defaults that make it behave as the old position strategy and to which we'll\n            // proxy all of the API calls.\n            this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n            this.withFallbackPosition(originPos, overlayPos);\n        }\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n            /** Whether the we're dealing with an RTL context */\n            get: function () {\n                return this._overlayRef.getDirection() === 'rtl';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n            /** Emits an event when the connection point changes. */\n            get: function () {\n                return this._positionStrategy.positionChanges;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attach this position strategy to an overlay. */\n        ConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            this._overlayRef = overlayRef;\n            this._positionStrategy.attach(overlayRef);\n            if (this._direction) {\n                overlayRef.setDirection(this._direction);\n                this._direction = null;\n            }\n        };\n        /** Disposes all resources used by the position strategy. */\n        ConnectedPositionStrategy.prototype.dispose = function () {\n            this._positionStrategy.dispose();\n        };\n        /** @docs-private */\n        ConnectedPositionStrategy.prototype.detach = function () {\n            this._positionStrategy.detach();\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin fits on-screen.\n         * @docs-private\n         */\n        ConnectedPositionStrategy.prototype.apply = function () {\n            this._positionStrategy.apply();\n        };\n        /**\n         * Re-positions the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n            this._positionStrategy.reapplyLastPosition();\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._positionStrategy.withScrollableContainers(scrollables);\n        };\n        /**\n         * Adds a new preferred fallback position.\n         * @param originPos\n         * @param overlayPos\n         */\n        ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {\n            var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n            this._preferredPositions.push(position);\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the layout direction so the overlay's position can be adjusted to match.\n         * @param dir New layout direction.\n         */\n        ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n            // Since the direction might be declared before the strategy is attached,\n            // we save the value in a temporary property and we'll transfer it to the\n            // overlay ref on attachment.\n            if (this._overlayRef) {\n                this._overlayRef.setDirection(dir);\n            }\n            else {\n                this._direction = dir;\n            }\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the x-axis\n         * @param offset New offset in the X axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n            this._positionStrategy.withDefaultOffsetX(offset);\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the y-axis\n         * @param  offset New offset in the Y axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n            this._positionStrategy.withDefaultOffsetY(offset);\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            this._positionStrategy.withLockedPosition(isLocked);\n            return this;\n        };\n        /**\n         * Overwrites the current set of positions with an array of new ones.\n         * @param positions Position pairs to be set on the strategy.\n         */\n        ConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions.slice();\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the origin element, relative to which to position the overlay.\n         * @param origin Reference to the new origin element.\n         */\n        ConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._positionStrategy.setOrigin(origin);\n            return this;\n        };\n        return ConnectedPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Class to be added to the overlay pane wrapper. */\n    var wrapperClass = 'cdk-global-overlay-wrapper';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * explicit position relative to the browser's viewport. We use flexbox, instead of\n     * transforms, in order to avoid issues with subpixel rendering which can cause the\n     * element to become blurry.\n     */\n    var GlobalPositionStrategy = /** @class */ (function () {\n        function GlobalPositionStrategy() {\n            this._cssPosition = 'static';\n            this._topOffset = '';\n            this._bottomOffset = '';\n            this._leftOffset = '';\n            this._rightOffset = '';\n            this._alignItems = '';\n            this._justifyContent = '';\n            this._width = '';\n            this._height = '';\n        }\n        GlobalPositionStrategy.prototype.attach = function (overlayRef) {\n            var config = overlayRef.getConfig();\n            this._overlayRef = overlayRef;\n            if (this._width && !config.width) {\n                overlayRef.updateSize({ width: this._width });\n            }\n            if (this._height && !config.height) {\n                overlayRef.updateSize({ height: this._height });\n            }\n            overlayRef.hostElement.classList.add(wrapperClass);\n            this._isDisposed = false;\n        };\n        /**\n         * Sets the top position of the overlay. Clears any previously set vertical position.\n         * @param value New top offset.\n         */\n        GlobalPositionStrategy.prototype.top = function (value) {\n            if (value === void 0) { value = ''; }\n            this._bottomOffset = '';\n            this._topOffset = value;\n            this._alignItems = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the left position of the overlay. Clears any previously set horizontal position.\n         * @param value New left offset.\n         */\n        GlobalPositionStrategy.prototype.left = function (value) {\n            if (value === void 0) { value = ''; }\n            this._rightOffset = '';\n            this._leftOffset = value;\n            this._justifyContent = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the bottom position of the overlay. Clears any previously set vertical position.\n         * @param value New bottom offset.\n         */\n        GlobalPositionStrategy.prototype.bottom = function (value) {\n            if (value === void 0) { value = ''; }\n            this._topOffset = '';\n            this._bottomOffset = value;\n            this._alignItems = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the right position of the overlay. Clears any previously set horizontal position.\n         * @param value New right offset.\n         */\n        GlobalPositionStrategy.prototype.right = function (value) {\n            if (value === void 0) { value = ''; }\n            this._leftOffset = '';\n            this._rightOffset = value;\n            this._justifyContent = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the overlay width and clears any previously set width.\n         * @param value New width for the overlay\n         * @deprecated Pass the `width` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.width = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ width: value });\n            }\n            else {\n                this._width = value;\n            }\n            return this;\n        };\n        /**\n         * Sets the overlay height and clears any previously set height.\n         * @param value New height for the overlay\n         * @deprecated Pass the `height` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.height = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ height: value });\n            }\n            else {\n                this._height = value;\n            }\n            return this;\n        };\n        /**\n         * Centers the overlay horizontally with an optional offset.\n         * Clears any previously set horizontal position.\n         *\n         * @param offset Overlay offset from the horizontal center.\n         */\n        GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.left(offset);\n            this._justifyContent = 'center';\n            return this;\n        };\n        /**\n         * Centers the overlay vertically with an optional offset.\n         * Clears any previously set vertical position.\n         *\n         * @param offset Overlay offset from the vertical center.\n         */\n        GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.top(offset);\n            this._alignItems = 'center';\n            return this;\n        };\n        /**\n         * Apply the position to the element.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.apply = function () {\n            // Since the overlay ref applies the strategy asynchronously, it could\n            // have been disposed before it ends up being applied. If that is the\n            // case, we shouldn't do anything.\n            if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parentStyles = this._overlayRef.hostElement.style;\n            var config = this._overlayRef.getConfig();\n            styles.position = this._cssPosition;\n            styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n            styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n            styles.marginBottom = this._bottomOffset;\n            styles.marginRight = this._rightOffset;\n            if (config.width === '100%') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n            else if (this._justifyContent === 'center') {\n                parentStyles.justifyContent = 'center';\n            }\n            else if (this._overlayRef.getConfig().direction === 'rtl') {\n                // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n                // don't want that because our positioning is explicitly `left` and `right`, hence\n                // why we do another inversion to ensure that the overlay stays in the same position.\n                // TODO: reconsider this if we add `start` and `end` methods.\n                if (this._justifyContent === 'flex-start') {\n                    parentStyles.justifyContent = 'flex-end';\n                }\n                else if (this._justifyContent === 'flex-end') {\n                    parentStyles.justifyContent = 'flex-start';\n                }\n            }\n            else {\n                parentStyles.justifyContent = this._justifyContent;\n            }\n            parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n        };\n        /**\n         * Cleans up the DOM changes from the position strategy.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed || !this._overlayRef) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parent = this._overlayRef.hostElement;\n            var parentStyles = parent.style;\n            parent.classList.remove(wrapperClass);\n            parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n                styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n            this._overlayRef = null;\n            this._isDisposed = true;\n        };\n        return GlobalPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Builder for overlay position strategy. */\n    var OverlayPositionBuilder = /** @class */ (function () {\n        function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n        }\n        /**\n         * Creates a global position strategy.\n         */\n        OverlayPositionBuilder.prototype.global = function () {\n            return new GlobalPositionStrategy();\n        };\n        /**\n         * Creates a relative position strategy.\n         * @param elementRef\n         * @param originPos\n         * @param overlayPos\n         * @deprecated Use `flexibleConnectedTo` instead.\n         * @breaking-change 8.0.0\n         */\n        OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n            return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        /**\n         * Creates a flexible position strategy.\n         * @param origin Origin relative to which to position the overlay.\n         */\n        OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {\n            return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        OverlayPositionBuilder.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayPositionBuilder.ctorParameters = function () { return [\n            { type: scrolling.ViewportRuler },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: platform.Platform },\n            { type: OverlayContainer }\n        ]; };\n        OverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(ViewportRuler), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n        return OverlayPositionBuilder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Next overlay unique ID. */\n    var nextUniqueId = 0;\n    // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n    // which needs to be different depending on where OverlayModule is imported.\n    /**\n     * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n     * used as a low-level building block for other components. Dialogs, tooltips, menus,\n     * selects, etc. can all be built using overlays. The service should primarily be used by authors\n     * of re-usable components rather than developers building end-user applications.\n     *\n     * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n     */\n    var Overlay = /** @class */ (function () {\n        function Overlay(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            this.scrollStrategies = scrollStrategies;\n            this._overlayContainer = _overlayContainer;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._positionBuilder = _positionBuilder;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._injector = _injector;\n            this._ngZone = _ngZone;\n            this._document = _document;\n            this._directionality = _directionality;\n            this._location = _location;\n        }\n        /**\n         * Creates an overlay.\n         * @param config Configuration applied to the overlay.\n         * @returns Reference to the created overlay.\n         */\n        Overlay.prototype.create = function (config) {\n            var host = this._createHostElement();\n            var pane = this._createPaneElement(host);\n            var portalOutlet = this._createPortalOutlet(pane);\n            var overlayConfig = new OverlayConfig(config);\n            overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n            return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n        };\n        /**\n         * Gets a position builder that can be used, via fluent API,\n         * to construct and configure a position strategy.\n         * @returns An overlay position builder.\n         */\n        Overlay.prototype.position = function () {\n            return this._positionBuilder;\n        };\n        /**\n         * Creates the DOM element for an overlay and appends it to the overlay container.\n         * @returns Newly-created pane element\n         */\n        Overlay.prototype._createPaneElement = function (host) {\n            var pane = this._document.createElement('div');\n            pane.id = \"cdk-overlay-\" + nextUniqueId++;\n            pane.classList.add('cdk-overlay-pane');\n            host.appendChild(pane);\n            return pane;\n        };\n        /**\n         * Creates the host element that wraps around an overlay\n         * and can be used for advanced positioning.\n         * @returns Newly-create host element.\n         */\n        Overlay.prototype._createHostElement = function () {\n            var host = this._document.createElement('div');\n            this._overlayContainer.getContainerElement().appendChild(host);\n            return host;\n        };\n        /**\n         * Create a DomPortalOutlet into which the overlay content can be loaded.\n         * @param pane The DOM element to turn into a portal outlet.\n         * @returns A portal outlet for the given DOM element.\n         */\n        Overlay.prototype._createPortalOutlet = function (pane) {\n            // We have to resolve the ApplicationRef later in order to allow people\n            // to use overlay-based providers during app initialization.\n            if (!this._appRef) {\n                this._appRef = this._injector.get(i0.ApplicationRef);\n            }\n            return new portal.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n        };\n        Overlay.decorators = [\n            { type: i0.Injectable }\n        ];\n        /** @nocollapse */\n        Overlay.ctorParameters = function () { return [\n            { type: ScrollStrategyOptions },\n            { type: OverlayContainer },\n            { type: i0.ComponentFactoryResolver },\n            { type: OverlayPositionBuilder },\n            { type: OverlayKeyboardDispatcher },\n            { type: i0.Injector },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: bidi.Directionality },\n            { type: i1.Location, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return Overlay;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var LIVE_ANNOUNCER_ELEMENT_TOKEN = new i0.InjectionToken('liveAnnouncerElement', {\n        providedIn: 'root',\n        factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n    });\n    /** @docs-private */\n    function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n        return null;\n    }\n    /** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n    var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new i0.InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n    var LiveAnnouncer = /** @class */ (function () {\n        function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {\n            this._ngZone = _ngZone;\n            this._defaultOptions = _defaultOptions;\n            // We inject the live element and document as `any` because the constructor signature cannot\n            // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n            // a class decorator causes TypeScript to preserve the constructor signature types.\n            this._document = _document;\n            this._liveElement = elementToken || this._createLiveElement();\n        }\n        LiveAnnouncer.prototype.announce = function (message) {\n            var _a;\n            var _this = this;\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var defaultOptions = this._defaultOptions;\n            var politeness;\n            var duration;\n            if (args.length === 1 && typeof args[0] === 'number') {\n                duration = args[0];\n            }\n            else {\n                _a = tslib.__read(args, 2), politeness = _a[0], duration = _a[1];\n            }\n            this.clear();\n            clearTimeout(this._previousTimeout);\n            if (!politeness) {\n                politeness =\n                    (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n            }\n            if (duration == null && defaultOptions) {\n                duration = defaultOptions.duration;\n            }\n            // TODO: ensure changing the politeness works on all environments we support.\n            this._liveElement.setAttribute('aria-live', politeness);\n            // This 100ms timeout is necessary for some browser + screen-reader combinations:\n            // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n            // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n            //   second time without clearing and then using a non-zero delay.\n            // (using JAWS 17 at time of this writing).\n            return this._ngZone.runOutsideAngular(function () {\n                return new Promise(function (resolve) {\n                    clearTimeout(_this._previousTimeout);\n                    _this._previousTimeout = setTimeout(function () {\n                        _this._liveElement.textContent = message;\n                        resolve();\n                        if (typeof duration === 'number') {\n                            _this._previousTimeout = setTimeout(function () { return _this.clear(); }, duration);\n                        }\n                    }, 100);\n                });\n            });\n        };\n        /**\n         * Clears the current text from the announcer element. Can be used to prevent\n         * screen readers from reading the text out again while the user is going\n         * through the page landmarks.\n         */\n        LiveAnnouncer.prototype.clear = function () {\n            if (this._liveElement) {\n                this._liveElement.textContent = '';\n            }\n        };\n        LiveAnnouncer.prototype.ngOnDestroy = function () {\n            clearTimeout(this._previousTimeout);\n            if (this._liveElement && this._liveElement.parentNode) {\n                this._liveElement.parentNode.removeChild(this._liveElement);\n                this._liveElement = null;\n            }\n        };\n        LiveAnnouncer.prototype._createLiveElement = function () {\n            var elementClass = 'cdk-live-announcer-element';\n            var previousElements = this._document.getElementsByClassName(elementClass);\n            var liveEl = this._document.createElement('div');\n            // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n            for (var i = 0; i < previousElements.length; i++) {\n                previousElements[i].parentNode.removeChild(previousElements[i]);\n            }\n            liveEl.classList.add(elementClass);\n            liveEl.classList.add('cdk-visually-hidden');\n            liveEl.setAttribute('aria-atomic', 'true');\n            liveEl.setAttribute('aria-live', 'polite');\n            this._document.body.appendChild(liveEl);\n            return liveEl;\n        };\n        LiveAnnouncer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        LiveAnnouncer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n        ]; };\n        LiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\n        return LiveAnnouncer;\n    }());\n    /**\n     * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n     * with a wider range of browsers and screen readers.\n     */\n    var CdkAriaLive = /** @class */ (function () {\n        function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n            this._elementRef = _elementRef;\n            this._liveAnnouncer = _liveAnnouncer;\n            this._contentObserver = _contentObserver;\n            this._ngZone = _ngZone;\n            this._politeness = 'off';\n        }\n        Object.defineProperty(CdkAriaLive.prototype, \"politeness\", {\n            /** The aria-live politeness level to use when announcing messages. */\n            get: function () { return this._politeness; },\n            set: function (value) {\n                var _this = this;\n                this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n                if (this._politeness === 'off') {\n                    if (this._subscription) {\n                        this._subscription.unsubscribe();\n                        this._subscription = null;\n                    }\n                }\n                else if (!this._subscription) {\n                    this._subscription = this._ngZone.runOutsideAngular(function () {\n                        return _this._contentObserver\n                            .observe(_this._elementRef)\n                            .subscribe(function () {\n                            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                            var elementText = _this._elementRef.nativeElement.textContent;\n                            // The `MutationObserver` fires also for attribute\n                            // changes which we don't want to announce.\n                            if (elementText !== _this._previousAnnouncedText) {\n                                _this._liveAnnouncer.announce(elementText, _this._politeness);\n                                _this._previousAnnouncedText = elementText;\n                            }\n                        });\n                    });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkAriaLive.prototype.ngOnDestroy = function () {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n            }\n        };\n        CdkAriaLive.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkAriaLive]',\n                        exportAs: 'cdkAriaLive',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkAriaLive.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: LiveAnnouncer },\n            { type: observers.ContentObserver },\n            { type: i0.NgZone }\n        ]; };\n        CdkAriaLive.propDecorators = {\n            politeness: [{ type: i0.Input, args: ['cdkAriaLive',] }]\n        };\n        return CdkAriaLive;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Global registry for all dynamically-created, injected media queries. */\n    var mediaQueriesForWebkitCompatibility = new Set();\n    /** Style tag that holds all of the dynamically-created media queries. */\n    var mediaQueryStyleNode;\n    /** A utility for calling matchMedia queries. */\n    var MediaMatcher = /** @class */ (function () {\n        function MediaMatcher(_platform) {\n            this._platform = _platform;\n            this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n                // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                // call it from a different scope.\n                window.matchMedia.bind(window) :\n                noopMatchMedia;\n        }\n        /**\n         * Evaluates the given media query and returns the native MediaQueryList from which results\n         * can be retrieved.\n         * Confirms the layout engine will trigger for the selector query provided and returns the\n         * MediaQueryList for the query provided.\n         */\n        MediaMatcher.prototype.matchMedia = function (query) {\n            if (this._platform.WEBKIT) {\n                createEmptyStyleRule(query);\n            }\n            return this._matchMedia(query);\n        };\n        MediaMatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        MediaMatcher.ctorParameters = function () { return [\n            { type: platform.Platform }\n        ]; };\n        MediaMatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(i0.ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n        return MediaMatcher;\n    }());\n    /**\n     * For Webkit engines that only trigger the MediaQueryListListener when\n     * there is at least one CSS selector for the respective media query.\n     */\n    function createEmptyStyleRule(query) {\n        if (mediaQueriesForWebkitCompatibility.has(query)) {\n            return;\n        }\n        try {\n            if (!mediaQueryStyleNode) {\n                mediaQueryStyleNode = document.createElement('style');\n                mediaQueryStyleNode.setAttribute('type', 'text/css');\n                document.head.appendChild(mediaQueryStyleNode);\n            }\n            if (mediaQueryStyleNode.sheet) {\n                mediaQueryStyleNode.sheet\n                    .insertRule(\"@media \" + query + \" {.fx-query-test{ }}\", 0);\n                mediaQueriesForWebkitCompatibility.add(query);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    /** No-op matchMedia replacement for non-browser platforms. */\n    function noopMatchMedia(query) {\n        // Use `as any` here to avoid adding additional necessary properties for\n        // the noop matcher.\n        return {\n            matches: query === 'all' || query === '',\n            media: query,\n            addListener: function () { },\n            removeListener: function () { }\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Utility for checking the matching state of @media queries. */\n    var BreakpointObserver = /** @class */ (function () {\n        function BreakpointObserver(_mediaMatcher, _zone) {\n            this._mediaMatcher = _mediaMatcher;\n            this._zone = _zone;\n            /**  A map of all media queries currently being listened for. */\n            this._queries = new Map();\n            /** A subject for all other observables to takeUntil based on. */\n            this._destroySubject = new rxjs.Subject();\n        }\n        /** Completes the active subject, signalling to all other observables to complete. */\n        BreakpointObserver.prototype.ngOnDestroy = function () {\n            this._destroySubject.next();\n            this._destroySubject.complete();\n        };\n        /**\n         * Whether one or more media queries match the current viewport size.\n         * @param value One or more media queries to check.\n         * @returns Whether any of the media queries match.\n         */\n        BreakpointObserver.prototype.isMatched = function (value) {\n            var _this = this;\n            var queries = splitQueries(coercion.coerceArray(value));\n            return queries.some(function (mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; });\n        };\n        /**\n         * Gets an observable of results for the given queries that will emit new results for any changes\n         * in matching of the given queries.\n         * @param value One or more media queries to check.\n         * @returns A stream of matches for the given queries.\n         */\n        BreakpointObserver.prototype.observe = function (value) {\n            var _this = this;\n            var queries = splitQueries(coercion.coerceArray(value));\n            var observables = queries.map(function (query) { return _this._registerQuery(query).observable; });\n            var stateObservable = rxjs.combineLatest(observables);\n            // Emit the first state immediately, and then debounce the subsequent emissions.\n            stateObservable = rxjs.concat(stateObservable.pipe(operators.take(1)), stateObservable.pipe(operators.skip(1), operators.debounceTime(0)));\n            return stateObservable.pipe(operators.map(function (breakpointStates) {\n                var response = {\n                    matches: false,\n                    breakpoints: {},\n                };\n                breakpointStates.forEach(function (state) {\n                    response.matches = response.matches || state.matches;\n                    response.breakpoints[state.query] = state.matches;\n                });\n                return response;\n            }));\n        };\n        /** Registers a specific query to be listened for. */\n        BreakpointObserver.prototype._registerQuery = function (query) {\n            var _this = this;\n            // Only set up a new MediaQueryList if it is not already being listened for.\n            if (this._queries.has(query)) {\n                return this._queries.get(query);\n            }\n            var mql = this._mediaMatcher.matchMedia(query);\n            // Create callback for match changes and add it is as a listener.\n            var queryObservable = new rxjs.Observable(function (observer) {\n                // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n                // back into the zone because matchMedia is only included in Zone.js by loading the\n                // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n                // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n                // patches it.\n                var handler = function (e) { return _this._zone.run(function () { return observer.next(e); }); };\n                mql.addListener(handler);\n                return function () {\n                    mql.removeListener(handler);\n                };\n            }).pipe(operators.startWith(mql), operators.map(function (nextMql) { return ({ query: query, matches: nextMql.matches }); }), operators.takeUntil(this._destroySubject));\n            // Add the MediaQueryList to the set of queries.\n            var output = { observable: queryObservable, mql: mql };\n            this._queries.set(query, output);\n            return output;\n        };\n        BreakpointObserver.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        BreakpointObserver.ctorParameters = function () { return [\n            { type: MediaMatcher },\n            { type: i0.NgZone }\n        ]; };\n        BreakpointObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n        return BreakpointObserver;\n    }());\n    /**\n     * Split each query string into separate query strings if two queries are provided as comma\n     * separated.\n     */\n    function splitQueries(queries) {\n        return queries.map(function (query) { return query.split(','); })\n            .reduce(function (a1, a2) { return a1.concat(a2); })\n            .map(function (query) { return query.trim(); });\n    }\n\n    /** Injection token that can be used to specify default snack bar. */\n    var MAT_SNACK_BAR_DEFAULT_OPTIONS = new i0.InjectionToken('mat-snack-bar-default-options', {\n        providedIn: 'root',\n        factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n    /** @docs-private */\n    function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n        return new MatSnackBarConfig();\n    }\n    /**\n     * Service to dispatch Material Design snack bar messages.\n     */\n    var MatSnackBar = /** @class */ (function () {\n        function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n            this._overlay = _overlay;\n            this._live = _live;\n            this._injector = _injector;\n            this._breakpointObserver = _breakpointObserver;\n            this._parentSnackBar = _parentSnackBar;\n            this._defaultConfig = _defaultConfig;\n            /**\n             * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n             * If there is a parent snack-bar service, all operations should delegate to that parent\n             * via `_openedSnackBarRef`.\n             */\n            this._snackBarRefAtThisLevel = null;\n        }\n        Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n            /** Reference to the currently opened snackbar at *any* level. */\n            get: function () {\n                var parent = this._parentSnackBar;\n                return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n            },\n            set: function (value) {\n                if (this._parentSnackBar) {\n                    this._parentSnackBar._openedSnackBarRef = value;\n                }\n                else {\n                    this._snackBarRefAtThisLevel = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates and dispatches a snack bar with a custom component for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param component Component to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        MatSnackBar.prototype.openFromComponent = function (component, config) {\n            return this._attach(component, config);\n        };\n        /**\n         * Creates and dispatches a snack bar with a custom template for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param template Template to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        MatSnackBar.prototype.openFromTemplate = function (template, config) {\n            return this._attach(template, config);\n        };\n        /**\n         * Opens a snackbar with a message and an optional action.\n         * @param message The message to show in the snackbar.\n         * @param action The label for the snackbar action.\n         * @param config Additional configuration options for the snackbar.\n         */\n        MatSnackBar.prototype.open = function (message, action, config) {\n            if (action === void 0) { action = ''; }\n            var _config = tslib.__assign(tslib.__assign({}, this._defaultConfig), config);\n            // Since the user doesn't have access to the component, we can\n            // override the data to pass in our own message and action.\n            _config.data = { message: message, action: action };\n            if (!_config.announcementMessage) {\n                _config.announcementMessage = message;\n            }\n            return this.openFromComponent(SimpleSnackBar, _config);\n        };\n        /**\n         * Dismisses the currently-visible snack bar.\n         */\n        MatSnackBar.prototype.dismiss = function () {\n            if (this._openedSnackBarRef) {\n                this._openedSnackBarRef.dismiss();\n            }\n        };\n        MatSnackBar.prototype.ngOnDestroy = function () {\n            // Only dismiss the snack bar at the current level on destroy.\n            if (this._snackBarRefAtThisLevel) {\n                this._snackBarRefAtThisLevel.dismiss();\n            }\n        };\n        /**\n         * Attaches the snack bar container component to the overlay.\n         */\n        MatSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var injector = new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarConfig, config]\n            ]));\n            var containerPortal = new portal.ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n            var containerRef = overlayRef.attach(containerPortal);\n            containerRef.instance.snackBarConfig = config;\n            return containerRef.instance;\n        };\n        /**\n         * Places a new component or a template as the content of the snack bar container.\n         */\n        MatSnackBar.prototype._attach = function (content, userConfig) {\n            var config = tslib.__assign(tslib.__assign(tslib.__assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n            var overlayRef = this._createOverlay(config);\n            var container = this._attachSnackBarContainer(overlayRef, config);\n            var snackBarRef = new MatSnackBarRef(container, overlayRef);\n            if (content instanceof i0.TemplateRef) {\n                var portal$1 = new portal.TemplatePortal(content, null, {\n                    $implicit: config.data,\n                    snackBarRef: snackBarRef\n                });\n                snackBarRef.instance = container.attachTemplatePortal(portal$1);\n            }\n            else {\n                var injector = this._createInjector(config, snackBarRef);\n                var portal$1 = new portal.ComponentPortal(content, undefined, injector);\n                var contentRef = container.attachComponentPortal(portal$1);\n                // We can't pass this via the injector, because the injector is created earlier.\n                snackBarRef.instance = contentRef.instance;\n            }\n            // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n            // appropriate. This class is applied to the overlay element because the overlay must expand to\n            // fill the width of the screen for full width snackbars.\n            this._breakpointObserver.observe(layout.Breakpoints.HandsetPortrait).pipe(operators.takeUntil(overlayRef.detachments())).subscribe(function (state) {\n                var classList = overlayRef.overlayElement.classList;\n                var className = 'mat-snack-bar-handset';\n                state.matches ? classList.add(className) : classList.remove(className);\n            });\n            this._animateSnackBar(snackBarRef, config);\n            this._openedSnackBarRef = snackBarRef;\n            return this._openedSnackBarRef;\n        };\n        /** Animates the old snack bar out and the new one in. */\n        MatSnackBar.prototype._animateSnackBar = function (snackBarRef, config) {\n            var _this = this;\n            // When the snackbar is dismissed, clear the reference to it.\n            snackBarRef.afterDismissed().subscribe(function () {\n                // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n                if (_this._openedSnackBarRef == snackBarRef) {\n                    _this._openedSnackBarRef = null;\n                }\n                if (config.announcementMessage) {\n                    _this._live.clear();\n                }\n            });\n            if (this._openedSnackBarRef) {\n                // If a snack bar is already in view, dismiss it and enter the\n                // new snack bar after exit animation is complete.\n                this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                    snackBarRef.containerInstance.enter();\n                });\n                this._openedSnackBarRef.dismiss();\n            }\n            else {\n                // If no snack bar is in view, enter the new snack bar.\n                snackBarRef.containerInstance.enter();\n            }\n            // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n            if (config.duration && config.duration > 0) {\n                snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(config.duration); });\n            }\n            if (config.announcementMessage) {\n                this._live.announce(config.announcementMessage, config.politeness);\n            }\n        };\n        /**\n         * Creates a new overlay and places it in the correct location.\n         * @param config The user-specified snack bar config.\n         */\n        MatSnackBar.prototype._createOverlay = function (config) {\n            var overlayConfig = new overlay.OverlayConfig();\n            overlayConfig.direction = config.direction;\n            var positionStrategy = this._overlay.position().global();\n            // Set horizontal position.\n            var isRtl = config.direction === 'rtl';\n            var isLeft = (config.horizontalPosition === 'left' ||\n                (config.horizontalPosition === 'start' && !isRtl) ||\n                (config.horizontalPosition === 'end' && isRtl));\n            var isRight = !isLeft && config.horizontalPosition !== 'center';\n            if (isLeft) {\n                positionStrategy.left('0');\n            }\n            else if (isRight) {\n                positionStrategy.right('0');\n            }\n            else {\n                positionStrategy.centerHorizontally();\n            }\n            // Set horizontal position.\n            if (config.verticalPosition === 'top') {\n                positionStrategy.top('0');\n            }\n            else {\n                positionStrategy.bottom('0');\n            }\n            overlayConfig.positionStrategy = positionStrategy;\n            return this._overlay.create(overlayConfig);\n        };\n        /**\n         * Creates an injector to be used inside of a snack bar component.\n         * @param config Config that was used to create the snack bar.\n         * @param snackBarRef Reference to the snack bar.\n         */\n        MatSnackBar.prototype._createInjector = function (config, snackBarRef) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            return new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarRef, snackBarRef],\n                [MAT_SNACK_BAR_DATA, config.data]\n            ]));\n        };\n        MatSnackBar.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: MatSnackBarModule },] }\n        ];\n        /** @nocollapse */\n        MatSnackBar.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: a11y.LiveAnnouncer },\n            { type: i0.Injector },\n            { type: layout.BreakpointObserver },\n            { type: MatSnackBar, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: MatSnackBarConfig, decorators: [{ type: i0.Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(Overlay), i0.ɵɵinject(LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n        return MatSnackBar;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_SNACK_BAR_DATA = MAT_SNACK_BAR_DATA;\n    exports.MAT_SNACK_BAR_DEFAULT_OPTIONS = MAT_SNACK_BAR_DEFAULT_OPTIONS;\n    exports.MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY = MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY;\n    exports.MatSnackBar = MatSnackBar;\n    exports.MatSnackBarConfig = MatSnackBarConfig;\n    exports.MatSnackBarContainer = MatSnackBarContainer;\n    exports.MatSnackBarModule = MatSnackBarModule;\n    exports.MatSnackBarRef = MatSnackBarRef;\n    exports.SimpleSnackBar = SimpleSnackBar;\n    exports.matSnackBarAnimations = matSnackBarAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-snack-bar.umd.js.map\n"]}
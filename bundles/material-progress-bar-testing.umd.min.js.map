{"version":3,"sources":["src/material/material-progress-bar-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","progressBar","testing","tslib","cdk","coercion","this","tslib_1","MatProgressBarHarness","_super","apply","arguments","__extends","with","options","HarnessPredicate","prototype","getValue","__awaiter","ariaValue","__generator","_a","label","host","sent","getAttribute","coerceNumberProperty","getMode","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,SAAUA,QAAQ,yBAA0BA,QAAQ,yBAC1H,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,yCAA0C,CAAC,UAAW,QAAS,wBAAyB,wBAAyBJ,GAC3IA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,YAAcV,EAAOQ,GAAGC,SAASC,aAAe,GAAIV,EAAOQ,GAAGC,SAASC,YAAYC,QAAU,IAAKX,EAAOY,MAAOZ,EAAOQ,GAAGK,IAAIC,SAAUd,EAAOQ,GAAGK,IAAIF,SAH5R,CAIEI,KAAM,SAAUb,EAASc,EAASF,EAAUH,GAAW;;;;;;;OAarD,IAAIM,EAAuC,SAAUC,GAEjD,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAOC,MAAMJ,KAAMK,YAAcL,KAuC/D,OAzCAC,EAAQK,UAAUJ,EAAuBC,GAQzCD,EAAsBK,KAAO,SAAUC,GAEnC,YADgB,IAAZA,IAAsBA,EAAU,IAC7B,IAAIZ,EAAQa,iBAAiBP,EAAuBM,IAG/DN,EAAsBQ,UAAUC,SAAW,WACvC,OAAOV,EAAQW,UAAUZ,UAAM,OAAQ,EAAQ,WAC3C,IAAUa,EACV,OAAOZ,EAAQa,YAAYd,KAAM,SAAUe,GACvC,OAAQA,EAAGC,OACP,KAAK,EAAG,MAAO,CAAC,EAAahB,KAAKiB,QAClC,KAAK,EAED,MAAO,CAAC,EADDF,EAAGG,OACgBC,aAAa,kBAC3C,KAAK,EAED,MAAO,CAAC,GADRN,EAAYE,EAAGG,QACmBnB,EAASqB,qBAAqBP,GAAa,YAMjGX,EAAsBQ,UAAUW,QAAU,WACtC,OAAOpB,EAAQW,UAAUZ,UAAM,OAAQ,EAAQ,WAC3C,OAAOC,EAAQa,YAAYd,KAAM,SAAUe,GACvC,OAAQA,EAAGC,OACP,KAAK,EAAG,MAAO,CAAC,EAAahB,KAAKiB,QAClC,KAAK,EAAG,MAAO,CAAC,EAAeF,EAAGG,OAAQC,aAAa,eAKvEjB,EAAsBoB,aAAe,mBAC9BpB,EA1C+B,CA2CxCN,EAAQ2B;;;;;;;;;;;;;;OAkBVpC,EAAQe,sBAAwBA,EAEhCsB,OAAOC,eAAetC,EAAS,aAAc,CAAEuC,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/progress-bar/testing', ['exports', 'tslib', '@angular/cdk/coercion', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.progressBar = global.ng.material.progressBar || {}, global.ng.material.progressBar.testing = {}), global.tslib, global.ng.cdk.coercion, global.ng.cdk.testing));\n}(this, function (exports, tslib_1, coercion, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-progress-bar in tests.\n     * @dynamic\n     */\n    var MatProgressBarHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatProgressBarHarness, _super);\n        function MatProgressBarHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a progress bar with specific\n         * attributes.\n         */\n        MatProgressBarHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatProgressBarHarness, options);\n        };\n        /** Gets a promise for the progress bar's value. */\n        MatProgressBarHarness.prototype.getValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var host, ariaValue;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.getAttribute('aria-valuenow')];\n                        case 2:\n                            ariaValue = _a.sent();\n                            return [2 /*return*/, ariaValue ? coercion.coerceNumberProperty(ariaValue) : null];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the progress bar's mode. */\n        MatProgressBarHarness.prototype.getMode = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('mode')];\n                    }\n                });\n            });\n        };\n        MatProgressBarHarness.hostSelector = 'mat-progress-bar';\n        return MatProgressBarHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatProgressBarHarness = MatProgressBarHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-progress-bar-testing.umd.js.map\n"]}
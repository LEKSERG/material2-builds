{"version":3,"file":"material-slider.umd.js","sources":["npm_package.esm5/src/material/slider/slider.js","../../../../../../src/material/slider/slider-module.ts","../../../../../../src/material/slider/public-api.ts","../../../../../../src/material/slider/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, hasModifierKey, } from '@angular/cdk/keycodes';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinTabIndex, } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nvar DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport var MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatSlider; }),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nvar MatSliderChange = /** @class */ (function () {\n    function MatSliderChange() {\n    }\n    return MatSliderChange;\n}());\nexport { MatSliderChange };\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nvar MatSliderBase = /** @class */ (function () {\n    function MatSliderBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatSliderBase;\n}());\nvar _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nvar MatSlider = /** @class */ (function (_super) {\n    tslib_1.__extends(MatSlider, _super);\n    function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, \n    // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n    _animationMode) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._focusMonitor = _focusMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._dir = _dir;\n        _this._animationMode = _animationMode;\n        _this._invert = false;\n        _this._max = 100;\n        _this._min = 0;\n        _this._step = 1;\n        _this._thumbLabel = false;\n        _this._tickInterval = 0;\n        _this._value = null;\n        _this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        _this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        _this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        _this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        _this.onTouched = function () { };\n        _this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        _this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        _this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        _this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        _this._sliderDimensions = null;\n        _this._controlValueAccessorChangeFn = function () { };\n        /** Subscription to the Directionality change EventEmitter. */\n        _this._dirChangeSubscription = Subscription.EMPTY;\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatSlider.prototype, \"invert\", {\n        /** Whether the slider is inverted. */\n        get: function () { return this._invert; },\n        set: function (value) {\n            this._invert = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"max\", {\n        /** The maximum value that the slider can have. */\n        get: function () { return this._max; },\n        set: function (v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"min\", {\n        /** The minimum value that the slider can have. */\n        get: function () { return this._min; },\n        set: function (v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"step\", {\n        /** The values at which the thumb will snap. */\n        get: function () { return this._step; },\n        set: function (v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundToDecimal = this._step.toString().split('.').pop().length;\n            }\n            // Since this could modify the label, we need to notify the change detection.\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"thumbLabel\", {\n        /** Whether or not to show the thumb label. */\n        get: function () { return this._thumbLabel; },\n        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"tickInterval\", {\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         */\n        get: function () { return this._tickInterval; },\n        set: function (value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"value\", {\n        /** Value of the slider. */\n        get: function () {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        },\n        set: function (v) {\n            if (v !== this._value) {\n                var value = coerceNumberProperty(v);\n                // While incrementing by a decimal we can end up with values like 33.300000000000004.\n                // Truncate it to ensure that it matches the label and to make it easier to work with.\n                if (this._roundToDecimal) {\n                    value = parseFloat(value.toFixed(this._roundToDecimal));\n                }\n                this._value = value;\n                this._percent = this._calculatePercentage(this._value);\n                // Since this also modifies the percentage, we need to let the change detection know.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"vertical\", {\n        /** Whether the slider is vertical. */\n        get: function () { return this._vertical; },\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"displayValue\", {\n        /** The value to be used for display purposes. */\n        get: function () {\n            if (this.displayWith) {\n                // Value is never null but since setters and getters cannot have\n                // different types, the value getter is also typed to return null.\n                return this.displayWith(this.value);\n            }\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundToDecimal);\n            }\n            return this.value || 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** set focus to the host element */\n    MatSlider.prototype.focus = function (options) {\n        this._focusHostElement(options);\n    };\n    /** blur the host element */\n    MatSlider.prototype.blur = function () {\n        this._blurHostElement();\n    };\n    Object.defineProperty(MatSlider.prototype, \"percent\", {\n        /** The percentage of the slider that coincides with the value. */\n        get: function () { return this._clamp(this._percent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_invertAxis\", {\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         */\n        get: function () {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_isMinValue\", {\n        /** Whether the slider is at its minimum value. */\n        get: function () {\n            return this.percent === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_thumbGap\", {\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         */\n        get: function () {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_trackBackgroundStyles\", {\n        /** CSS styles for the track background element. */\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            var scale = this.vertical ? \"1, \" + (1 - this.percent) + \", 1\" : 1 - this.percent + \", 1, 1\";\n            var sign = this._shouldInvertMouseCoords() ? '-' : '';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale3d(\" + scale + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_trackFillStyles\", {\n        /** CSS styles for the track fill element. */\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            var scale = this.vertical ? \"1, \" + this.percent + \", 1\" : this.percent + \", 1, 1\";\n            var sign = this._shouldInvertMouseCoords() ? '' : '-';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale3d(\" + scale + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_ticksContainerStyles\", {\n        /** CSS styles for the ticks container element. */\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n            var offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_ticksStyles\", {\n        /** CSS styles for the ticks element. */\n        get: function () {\n            var tickSize = this._tickIntervalPercent * 100;\n            var backgroundSize = this.vertical ? \"2px \" + tickSize + \"%\" : tickSize + \"% 2px\";\n            var axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n            var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n            var styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': \"translateZ(0) translate\" + axis + \"(\" + sign + tickSize / 2 + \"%)\" + rotate\n            };\n            if (this._isMinValue && this._thumbGap) {\n                var side = this.vertical ?\n                    (this._invertAxis ? 'Bottom' : 'Top') :\n                    (this._invertAxis ? 'Right' : 'Left');\n                styles[\"padding\" + side] = this._thumbGap + \"px\";\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_thumbContainerStyles\", {\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': \"translate\" + axis + \"(-\" + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    MatSlider.prototype._shouldInvertMouseCoords = function () {\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    };\n    /** The language direction for this slider element. */\n    MatSlider.prototype._getDirection = function () {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    };\n    MatSlider.prototype.ngOnInit = function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (origin) {\n            _this._isActive = !!origin && origin !== 'keyboard';\n            _this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n        }\n    };\n    MatSlider.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    };\n    MatSlider.prototype._onMouseenter = function () {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    MatSlider.prototype._onMousedown = function (event) {\n        // Don't do anything if the slider is disabled or the\n        // user is using anything other than the main mouse button.\n        if (this.disabled || event.button !== 0) {\n            return;\n        }\n        var oldValue = this.value;\n        this._isSliding = false;\n        this._focusHostElement();\n        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });\n        // Emit a change and input event if the value changed.\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n    };\n    MatSlider.prototype._onSlide = function (event) {\n        if (this.disabled) {\n            return;\n        }\n        // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n        // state, call the slide start handler manually.\n        if (!this._isSliding) {\n            this._onSlideStart(null);\n        }\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        var oldValue = this.value;\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n        // Native range elements always emit `input` events when the value changed while sliding.\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n        }\n    };\n    MatSlider.prototype._onSlideStart = function (event) {\n        if (this.disabled || this._isSliding) {\n            return;\n        }\n        // Simulate mouseenter in case this is a mobile device.\n        this._onMouseenter();\n        this._isSliding = true;\n        this._focusHostElement();\n        this._valueOnSlideStart = this.value;\n        if (event) {\n            this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\n            event.preventDefault();\n        }\n    };\n    MatSlider.prototype._onSlideEnd = function () {\n        this._isSliding = false;\n        if (this._valueOnSlideStart != this.value && !this.disabled) {\n            this._emitChangeEvent();\n        }\n        this._valueOnSlideStart = null;\n    };\n    MatSlider.prototype._onFocus = function () {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    MatSlider.prototype._onBlur = function () {\n        this.onTouched();\n    };\n    MatSlider.prototype._onKeydown = function (event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        var oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    };\n    MatSlider.prototype._onKeyup = function () {\n        this._isSliding = false;\n    };\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    MatSlider.prototype._increment = function (numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    };\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    MatSlider.prototype._updateValueFromPosition = function (pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        var posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        var percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            var exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    };\n    /** Emits a change event if the current value is different from the last emitted value. */\n    MatSlider.prototype._emitChangeEvent = function () {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    };\n    /** Emits an input event when the current value is different from the last emitted value. */\n    MatSlider.prototype._emitInputEvent = function () {\n        this.input.emit(this._createChangeEvent());\n    };\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    MatSlider.prototype._updateTickIntervalPercent = function () {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            var pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            var pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    };\n    /** Creates a slider change object from the specified value. */\n    MatSlider.prototype._createChangeEvent = function (value) {\n        if (value === void 0) { value = this.value; }\n        var event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    };\n    /** Calculates the percentage of the slider that a value is. */\n    MatSlider.prototype._calculatePercentage = function (value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    };\n    /** Calculates the value a percentage of the slider corresponds to. */\n    MatSlider.prototype._calculateValue = function (percentage) {\n        return this.min + percentage * (this.max - this.min);\n    };\n    /** Return a number between two numbers. */\n    MatSlider.prototype._clamp = function (value, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        return Math.max(min, Math.min(value, max));\n    };\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    MatSlider.prototype._getSliderDimensions = function () {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    };\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    MatSlider.prototype._focusHostElement = function (options) {\n        this._elementRef.nativeElement.focus(options);\n    };\n    /** Blurs the native element. */\n    MatSlider.prototype._blurHostElement = function () {\n        this._elementRef.nativeElement.blur();\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    MatSlider.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    MatSlider.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    MatSlider.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    MatSlider.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    MatSlider.decorators = [\n        { type: Component, args: [{\n                    moduleId: module.id,\n                    selector: 'mat-slider',\n                    exportAs: 'matSlider',\n                    providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                    host: {\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                        '(mousedown)': '_onMousedown($event)',\n                        '(keydown)': '_onKeydown($event)',\n                        '(keyup)': '_onKeyup()',\n                        '(mouseenter)': '_onMouseenter()',\n                        '(slide)': '_onSlide($event)',\n                        '(slideend)': '_onSlideEnd()',\n                        '(slidestart)': '_onSlideStart($event)',\n                        // On Safari starting to slide temporarily triggers text selection mode which\n                        // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                        '(selectstart)': '$event.preventDefault()',\n                        'class': 'mat-slider',\n                        'role': 'slider',\n                        '[tabIndex]': 'tabIndex',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.aria-valuemax]': 'max',\n                        '[attr.aria-valuemin]': 'min',\n                        '[attr.aria-valuenow]': 'value',\n                        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                        '[class.mat-slider-disabled]': 'disabled',\n                        '[class.mat-slider-has-ticks]': 'tickInterval',\n                        '[class.mat-slider-horizontal]': '!vertical',\n                        '[class.mat-slider-axis-inverted]': '_invertAxis',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if mouse coordinates need to be inverted.\n                        '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                        '[class.mat-slider-sliding]': '_isSliding',\n                        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                        '[class.mat-slider-vertical]': 'vertical',\n                        '[class.mat-slider-min-value]': '_isMinValue',\n                        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    },\n                    template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                    inputs: ['disabled', 'color', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}@media(-ms-high-contrast: active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media(-ms-high-contrast: active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media(-ms-high-contrast: active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media(-ms-high-contrast: active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}/*# sourceMappingURL=slider.css.map */\\n\"]\n                }] }\n    ];\n    /** @nocollapse */\n    MatSlider.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ]; };\n    MatSlider.propDecorators = {\n        invert: [{ type: Input }],\n        max: [{ type: Input }],\n        min: [{ type: Input }],\n        step: [{ type: Input }],\n        thumbLabel: [{ type: Input }],\n        tickInterval: [{ type: Input }],\n        value: [{ type: Input }],\n        displayWith: [{ type: Input }],\n        vertical: [{ type: Input }],\n        change: [{ type: Output }],\n        input: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper', { static: false },] }]\n    };\n    return MatSlider;\n}(_MatSliderMixinBase));\nexport { MatSlider };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './slider-module';\nexport * from './slider';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["NG_VALUE_ACCESSOR","forwardRef","mixinTabIndex","mixinColor","mixinDisabled","tslib_1.__extends","EventEmitter","Subscription","coerceBooleanProperty","coerceNumberProperty","hasModifierKey","PAGE_UP","PAGE_DOWN","END","HOME","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","FocusMonitor","ChangeDetectorRef","Directionality","Optional","Attribute","Inject","ANIMATION_MODULE_TYPE","Input","Output","ViewChild","NgModule","CommonModule","MatCommonModule","HAMMER_GESTURE_CONFIG","GestureConfig"],"mappings":"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"}
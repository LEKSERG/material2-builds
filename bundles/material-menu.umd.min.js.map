{"version":3,"sources":["src/material/material-menu.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","menu","tslib","cdk","a11y","coercion","keycodes","core","rxjs","operators","animations","portal","common","bidi","overlay","platform","this","tslib_1","core$1","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","group","query","animate","fadeInItems","MatMenuContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","Subject","prototype","attach","context","_portal","TemplatePortal","detach","_outlet","DomPortalOutlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","ngOnDestroy","dispose","decorators","type","Directive","args","selector","ctorParameters","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","undefined","Inject","DOCUMENT","ChangeDetectorRef","MAT_MENU_PANEL","InjectionToken","MatMenuItem","_super","_elementRef","document","_focusMonitor","_parentMenu","_this","call","role","_hovered","_highlighted","_triggersSubmenu","monitor","addItem","__extends","focus","origin","options","focusVia","_getHostElement","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","length","i","nodeType","textContent","trim","Component","moduleId","id","exportAs","inputs","host","[attr.role]","class","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.tabindex]","[attr.aria-disabled]","[attr.disabled]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","template","ElementRef","FocusMonitor","Optional","propDecorators","Input","HostListener","mixinDisableRipple","mixinDisabled","MatMenuItemBase","MAT_MENU_DEFAULT_OPTIONS","providedIn","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","Subscription","EMPTY","_classList","_panelAnimationState","_animationDone","_overlapTrigger","_hasBackdrop","hasBackdrop","closed","EventEmitter","close","Object","defineProperty","get","set","value","throwMatMenuInvalidPositionX","Error","setPositionClasses","enumerable","configurable","throwMatMenuInvalidPositionY","coerceBooleanProperty","classes","previousPanelClass","_previousPanelClass","split","forEach","className","panelClass","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","tabOut","subscribe","emit","destroy","unsubscribe","changes","pipe","startWith","switchMap","items","merge","apply","__spread","map","item","_item","_handleKeydown","keyCode","manager","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","HOME","END","setFirstItemActive","setLastItemActive","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","asObservable","take","activeItem","first","parentElement","getAttribute","resetActiveItem","setActiveItem","setElevation","depth","newElevation","customElevation","keys","find","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","toState","activeItemIndex","scrollTop","_allItems","reset","filter","notifyOnChanges","NgZone","ContentChildren","descendants","templateRef","ViewChild","static","ContentChild","classList","Output","MatMenu","arguments","_MatMenu","ngZone","defaultOptions","providers","provide","useExisting","styles","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","triggersSubmenu","_scrollStrategy","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","takeUntil","_setIsMenuOpen","_restoreFocus","dir","_setMenuElevation","isOpen","throwMatMenuMissingError","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","_a","__read","originX","originFallbackX","_b","overlayFallbackY","_c","originY","originFallbackY","_d","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","(keydown)","(click)","Self","Directionality","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","NgModule","MatCommonModule","declarations","MatMenuModule","imports","CommonModule","MatRippleModule","OverlayModule","ɵangular_material_src_material_menu_menu_a","ɵangular_material_src_material_menu_menu_b","ɵangular_material_src_material_menu_menu_c"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/material/core'), require('@angular/cdk/bidi'), require('@angular/cdk/overlay'), require('@angular/cdk/platform')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/menu', ['exports', 'tslib', '@angular/cdk/a11y', '@angular/cdk/coercion', '@angular/cdk/keycodes', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/cdk/portal', '@angular/common', '@angular/material/core', '@angular/cdk/bidi', '@angular/cdk/overlay', '@angular/cdk/platform'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.menu = {}), global.tslib, global.ng.cdk.a11y, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.cdk.portal, global.ng.common, global.ng.material.core, global.ng.cdk.bidi, global.ng.cdk.overlay, global.ng.cdk.platform));\n}(this, function (exports, tslib_1, a11y, coercion, keycodes, core, rxjs, operators, animations, portal, common, core$1, bidi, overlay, platform) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the mat-menu component.\n     * Animation duration and timing values are based on:\n     * https://material.io/guidelines/components/menus.html#menus-usage\n     * @docs-private\n     */\n    var matMenuAnimations = {\n        /**\n         * This animation controls the menu panel's entry and exit from the page.\n         *\n         * When the menu panel is added to the DOM, it scales in and fades in its border.\n         *\n         * When the menu panel is removed from the DOM, it simply fades out after a brief\n         * delay to display the ripple.\n         */\n        transformMenu: animations.trigger('transformMenu', [\n            animations.state('void', animations.style({\n                opacity: 0,\n                transform: 'scale(0.8)'\n            })),\n            animations.transition('void => enter', animations.group([\n                animations.query('.mat-menu-content, .mat-mdc-menu-content', animations.animate('100ms linear', animations.style({\n                    opacity: 1\n                }))),\n                animations.animate('120ms cubic-bezier(0, 0, 0.2, 1)', animations.style({ transform: 'scale(1)' })),\n            ])),\n            animations.transition('* => void', animations.animate('100ms 25ms linear', animations.style({ opacity: 0 })))\n        ]),\n        /**\n         * This animation fades in the background color and content of the menu panel\n         * after its containing element is scaled in.\n         */\n        fadeInItems: animations.trigger('fadeInItems', [\n            // TODO(crisbeto): this is inside the `transformMenu`\n            // now. Remove next time we do breaking changes.\n            animations.state('showing', animations.style({ opacity: 1 })),\n            animations.transition('void => *', [\n                animations.style({ opacity: 0 }),\n                animations.animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    };\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     * @docs-private\n     */\n    var fadeInItems = matMenuAnimations.fadeInItems;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     * @docs-private\n     */\n    var transformMenu = matMenuAnimations.transformMenu;\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Menu content that will be rendered lazily once the menu is opened.\n     */\n    var MatMenuContent = /** @class */ (function () {\n        function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n            this._template = _template;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._appRef = _appRef;\n            this._injector = _injector;\n            this._viewContainerRef = _viewContainerRef;\n            this._document = _document;\n            this._changeDetectorRef = _changeDetectorRef;\n            /** Emits when the menu content has been attached. */\n            this._attached = new rxjs.Subject();\n        }\n        /**\n         * Attaches the content with a particular context.\n         * @docs-private\n         */\n        MatMenuContent.prototype.attach = function (context) {\n            if (context === void 0) { context = {}; }\n            if (!this._portal) {\n                this._portal = new portal.TemplatePortal(this._template, this._viewContainerRef);\n            }\n            this.detach();\n            if (!this._outlet) {\n                this._outlet = new portal.DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n            }\n            var element = this._template.elementRef.nativeElement;\n            // Because we support opening the same menu from different triggers (which in turn have their\n            // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n            // risk it staying attached to a pane that's no longer in the DOM.\n            element.parentNode.insertBefore(this._outlet.outletElement, element);\n            // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n            // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n            // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n            // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n            // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n            // @breaking-change 9.0.0 Make change detector ref required\n            if (this._changeDetectorRef) {\n                this._changeDetectorRef.markForCheck();\n            }\n            this._portal.attach(this._outlet, context);\n            this._attached.next();\n        };\n        /**\n         * Detaches the content.\n         * @docs-private\n         */\n        MatMenuContent.prototype.detach = function () {\n            if (this._portal.isAttached) {\n                this._portal.detach();\n            }\n        };\n        MatMenuContent.prototype.ngOnDestroy = function () {\n            if (this._outlet) {\n                this._outlet.dispose();\n            }\n        };\n        MatMenuContent.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'ng-template[matMenuContent]'\n                    },] }\n        ];\n        /** @nocollapse */\n        MatMenuContent.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.ComponentFactoryResolver },\n            { type: core.ApplicationRef },\n            { type: core.Injector },\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        return MatMenuContent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n     * @docs-private\n     */\n    function throwMatMenuMissingError() {\n        throw Error(\"matMenuTriggerFor: must pass in an mat-menu instance.\\n\\n    Example:\\n      <mat-menu #menu=\\\"matMenu\\\"></mat-menu>\\n      <button [matMenuTriggerFor]=\\\"menu\\\"></button>\");\n    }\n    /**\n     * Throws an exception for the case when menu's x-position value isn't valid.\n     * In other words, it doesn't match 'before' or 'after'.\n     * @docs-private\n     */\n    function throwMatMenuInvalidPositionX() {\n        throw Error(\"xPosition value must be either 'before' or after'.\\n      Example: <mat-menu xPosition=\\\"before\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n    }\n    /**\n     * Throws an exception for the case when menu's y-position value isn't valid.\n     * In other words, it doesn't match 'above' or 'below'.\n     * @docs-private\n     */\n    function throwMatMenuInvalidPositionY() {\n        throw Error(\"yPosition value must be either 'above' or below'.\\n      Example: <mat-menu yPosition=\\\"above\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token used to provide the parent menu to menu-specific components.\n     * @docs-private\n     */\n    var MAT_MENU_PANEL = new core.InjectionToken('MAT_MENU_PANEL');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Boilerplate for applying mixins to MatMenuItem.\n    /** @docs-private */\n    var MatMenuItemBase = /** @class */ (function () {\n        function MatMenuItemBase() {\n        }\n        return MatMenuItemBase;\n    }());\n    var _MatMenuItemMixinBase = core$1.mixinDisableRipple(core$1.mixinDisabled(MatMenuItemBase));\n    /**\n     * This directive is intended to be used inside an mat-menu tag.\n     * It exists mostly to set the role attribute.\n     */\n    var MatMenuItem = /** @class */ (function (_super) {\n        tslib_1.__extends(MatMenuItem, _super);\n        function MatMenuItem(_elementRef, document, _focusMonitor, _parentMenu) {\n            var _this = \n            // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n            _super.call(this) || this;\n            _this._elementRef = _elementRef;\n            _this._focusMonitor = _focusMonitor;\n            _this._parentMenu = _parentMenu;\n            /** ARIA role for the menu item. */\n            _this.role = 'menuitem';\n            /** Stream that emits when the menu item is hovered. */\n            _this._hovered = new rxjs.Subject();\n            /** Whether the menu item is highlighted. */\n            _this._highlighted = false;\n            /** Whether the menu item acts as a trigger for a sub-menu. */\n            _this._triggersSubmenu = false;\n            if (_focusMonitor) {\n                // Start monitoring the element so it gets the appropriate focused classes. We want\n                // to show the focus style for menu items only when the focus was not caused by a\n                // mouse or touch interaction.\n                _focusMonitor.monitor(_this._elementRef, false);\n            }\n            if (_parentMenu && _parentMenu.addItem) {\n                _parentMenu.addItem(_this);\n            }\n            _this._document = document;\n            return _this;\n        }\n        /** Focuses the menu item. */\n        MatMenuItem.prototype.focus = function (origin, options) {\n            if (origin === void 0) { origin = 'program'; }\n            if (this._focusMonitor) {\n                this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n            }\n            else {\n                this._getHostElement().focus(options);\n            }\n        };\n        MatMenuItem.prototype.ngOnDestroy = function () {\n            if (this._focusMonitor) {\n                this._focusMonitor.stopMonitoring(this._elementRef);\n            }\n            if (this._parentMenu && this._parentMenu.removeItem) {\n                this._parentMenu.removeItem(this);\n            }\n            this._hovered.complete();\n        };\n        /** Used to set the `tabindex`. */\n        MatMenuItem.prototype._getTabIndex = function () {\n            return this.disabled ? '-1' : '0';\n        };\n        /** Returns the host DOM element. */\n        MatMenuItem.prototype._getHostElement = function () {\n            return this._elementRef.nativeElement;\n        };\n        /** Prevents the default element actions if it is disabled. */\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatMenuItem.prototype._checkDisabled = function (event) {\n            if (this.disabled) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        };\n        /** Emits to the hover stream. */\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatMenuItem.prototype._handleMouseEnter = function () {\n            this._hovered.next(this);\n        };\n        /** Gets the label to be used when determining whether the option should be focused. */\n        MatMenuItem.prototype.getLabel = function () {\n            var element = this._elementRef.nativeElement;\n            var textNodeType = this._document ? this._document.TEXT_NODE : 3;\n            var output = '';\n            if (element.childNodes) {\n                var length_1 = element.childNodes.length;\n                // Go through all the top-level text nodes and extract their text.\n                // We skip anything that's not a text node to prevent the text from\n                // being thrown off by something like an icon.\n                for (var i = 0; i < length_1; i++) {\n                    if (element.childNodes[i].nodeType === textNodeType) {\n                        output += element.childNodes[i].textContent;\n                    }\n                }\n            }\n            return output.trim();\n        };\n        MatMenuItem.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: '[mat-menu-item]',\n                        exportAs: 'matMenuItem',\n                        inputs: ['disabled', 'disableRipple'],\n                        host: {\n                            '[attr.role]': 'role',\n                            'class': 'mat-menu-item',\n                            '[class.mat-menu-item-highlighted]': '_highlighted',\n                            '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                            '[attr.tabindex]': '_getTabIndex()',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.disabled]': 'disabled || null',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n                    }] }\n        ];\n        /** @nocollapse */\n        MatMenuItem.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: a11y.FocusMonitor },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_MENU_PANEL,] }, { type: core.Optional }] }\n        ]; };\n        MatMenuItem.propDecorators = {\n            role: [{ type: core.Input }],\n            _checkDisabled: [{ type: core.HostListener, args: ['click', ['$event'],] }],\n            _handleMouseEnter: [{ type: core.HostListener, args: ['mouseenter',] }]\n        };\n        return MatMenuItem;\n    }(_MatMenuItemMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token to be used to override the default options for `mat-menu`. */\n    var MAT_MENU_DEFAULT_OPTIONS = new core.InjectionToken('mat-menu-default-options', {\n        providedIn: 'root',\n        factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n    /** @docs-private */\n    function MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n        return {\n            overlapTrigger: false,\n            xPosition: 'after',\n            yPosition: 'below',\n            backdropClass: 'cdk-overlay-transparent-backdrop',\n        };\n    }\n    /**\n     * Start elevation for the menu panel.\n     * @docs-private\n     */\n    var MAT_MENU_BASE_ELEVATION = 4;\n    /** Base class with all of the `MatMenu` functionality. */\n    // tslint:disable-next-line:class-name\n    var _MatMenuBase = /** @class */ (function () {\n        function _MatMenuBase(_elementRef, _ngZone, _defaultOptions) {\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._defaultOptions = _defaultOptions;\n            this._xPosition = this._defaultOptions.xPosition;\n            this._yPosition = this._defaultOptions.yPosition;\n            /** Only the direct descendant menu items. */\n            this._directDescendantItems = new core.QueryList();\n            /** Subscription to tab events on the menu panel */\n            this._tabSubscription = rxjs.Subscription.EMPTY;\n            /** Config object to be passed into the menu's ngClass */\n            this._classList = {};\n            /** Current state of the panel animation. */\n            this._panelAnimationState = 'void';\n            /** Emits whenever an animation on the menu completes. */\n            this._animationDone = new rxjs.Subject();\n            /** Class to be added to the backdrop element. */\n            this.backdropClass = this._defaultOptions.backdropClass;\n            this._overlapTrigger = this._defaultOptions.overlapTrigger;\n            this._hasBackdrop = this._defaultOptions.hasBackdrop;\n            /** Event emitted when the menu is closed. */\n            this.closed = new core.EventEmitter();\n            /**\n             * Event emitted when the menu is closed.\n             * @deprecated Switch to `closed` instead\n             * @breaking-change 8.0.0\n             */\n            this.close = this.closed;\n        }\n        Object.defineProperty(_MatMenuBase.prototype, \"xPosition\", {\n            /** Position of the menu in the X axis. */\n            get: function () { return this._xPosition; },\n            set: function (value) {\n                if (value !== 'before' && value !== 'after') {\n                    throwMatMenuInvalidPositionX();\n                }\n                this._xPosition = value;\n                this.setPositionClasses();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatMenuBase.prototype, \"yPosition\", {\n            /** Position of the menu in the Y axis. */\n            get: function () { return this._yPosition; },\n            set: function (value) {\n                if (value !== 'above' && value !== 'below') {\n                    throwMatMenuInvalidPositionY();\n                }\n                this._yPosition = value;\n                this.setPositionClasses();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatMenuBase.prototype, \"overlapTrigger\", {\n            /** Whether the menu should overlap its trigger. */\n            get: function () { return this._overlapTrigger; },\n            set: function (value) {\n                this._overlapTrigger = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatMenuBase.prototype, \"hasBackdrop\", {\n            /** Whether the menu has a backdrop. */\n            get: function () { return this._hasBackdrop; },\n            set: function (value) {\n                this._hasBackdrop = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatMenuBase.prototype, \"panelClass\", {\n            /**\n             * This method takes classes set on the host mat-menu element and applies them on the\n             * menu template that displays in the overlay container.  Otherwise, it's difficult\n             * to style the containing menu from outside the component.\n             * @param classes list of class names\n             */\n            set: function (classes) {\n                var _this = this;\n                var previousPanelClass = this._previousPanelClass;\n                if (previousPanelClass && previousPanelClass.length) {\n                    previousPanelClass.split(' ').forEach(function (className) {\n                        _this._classList[className] = false;\n                    });\n                }\n                this._previousPanelClass = classes;\n                if (classes && classes.length) {\n                    classes.split(' ').forEach(function (className) {\n                        _this._classList[className] = true;\n                    });\n                    this._elementRef.nativeElement.className = '';\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatMenuBase.prototype, \"classList\", {\n            /**\n             * This method takes classes set on the host mat-menu element and applies them on the\n             * menu template that displays in the overlay container.  Otherwise, it's difficult\n             * to style the containing menu from outside the component.\n             * @deprecated Use `panelClass` instead.\n             * @breaking-change 8.0.0\n             */\n            get: function () { return this.panelClass; },\n            set: function (classes) { this.panelClass = classes; },\n            enumerable: true,\n            configurable: true\n        });\n        _MatMenuBase.prototype.ngOnInit = function () {\n            this.setPositionClasses();\n        };\n        _MatMenuBase.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._updateDirectDescendants();\n            this._keyManager = new a11y.FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n            this._tabSubscription = this._keyManager.tabOut.subscribe(function () { return _this.closed.emit('tab'); });\n        };\n        _MatMenuBase.prototype.ngOnDestroy = function () {\n            this._directDescendantItems.destroy();\n            this._tabSubscription.unsubscribe();\n            this.closed.complete();\n        };\n        /** Stream that emits whenever the hovered menu item changes. */\n        _MatMenuBase.prototype._hovered = function () {\n            // Coerce the `changes` property because Angular types it as `Observable<any>`\n            var itemChanges = this._directDescendantItems.changes;\n            return itemChanges.pipe(operators.startWith(this._directDescendantItems), operators.switchMap(function (items) { return rxjs.merge.apply(void 0, tslib_1.__spread(items.map(function (item) { return item._hovered; }))); }));\n        };\n        /*\n         * Registers a menu item with the menu.\n         * @docs-private\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 9.0.0\n         */\n        _MatMenuBase.prototype.addItem = function (_item) { };\n        /**\n         * Removes an item from the menu.\n         * @docs-private\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 9.0.0\n         */\n        _MatMenuBase.prototype.removeItem = function (_item) { };\n        /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n        _MatMenuBase.prototype._handleKeydown = function (event) {\n            var keyCode = event.keyCode;\n            var manager = this._keyManager;\n            switch (keyCode) {\n                case keycodes.ESCAPE:\n                    if (!keycodes.hasModifierKey(event)) {\n                        event.preventDefault();\n                        this.closed.emit('keydown');\n                    }\n                    break;\n                case keycodes.LEFT_ARROW:\n                    if (this.parentMenu && this.direction === 'ltr') {\n                        this.closed.emit('keydown');\n                    }\n                    break;\n                case keycodes.RIGHT_ARROW:\n                    if (this.parentMenu && this.direction === 'rtl') {\n                        this.closed.emit('keydown');\n                    }\n                    break;\n                case keycodes.HOME:\n                case keycodes.END:\n                    if (!keycodes.hasModifierKey(event)) {\n                        keyCode === keycodes.HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                        event.preventDefault();\n                    }\n                    break;\n                default:\n                    if (keyCode === keycodes.UP_ARROW || keyCode === keycodes.DOWN_ARROW) {\n                        manager.setFocusOrigin('keyboard');\n                    }\n                    manager.onKeydown(event);\n            }\n        };\n        /**\n         * Focus the first item in the menu.\n         * @param origin Action from which the focus originated. Used to set the correct styling.\n         */\n        _MatMenuBase.prototype.focusFirstItem = function (origin) {\n            if (origin === void 0) { origin = 'program'; }\n            var manager = this._keyManager;\n            // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n            if (this.lazyContent) {\n                this._ngZone.onStable.asObservable()\n                    .pipe(operators.take(1))\n                    .subscribe(function () { return manager.setFocusOrigin(origin).setFirstItemActive(); });\n            }\n            else {\n                manager.setFocusOrigin(origin).setFirstItemActive();\n            }\n            // If there's no active item at this point, it means that all the items are disabled.\n            // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n            // give _some_ feedback to screen readers.\n            if (!manager.activeItem && this._directDescendantItems.length) {\n                var element = this._directDescendantItems.first._getHostElement().parentElement;\n                // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                while (element) {\n                    if (element.getAttribute('role') === 'menu') {\n                        element.focus();\n                        break;\n                    }\n                    else {\n                        element = element.parentElement;\n                    }\n                }\n            }\n        };\n        /**\n         * Resets the active item in the menu. This is used when the menu is opened, allowing\n         * the user to start from the first option when pressing the down arrow.\n         */\n        _MatMenuBase.prototype.resetActiveItem = function () {\n            this._keyManager.setActiveItem(-1);\n        };\n        /**\n         * Sets the menu panel elevation.\n         * @param depth Number of parent menus that come before the menu.\n         */\n        _MatMenuBase.prototype.setElevation = function (depth) {\n            // The elevation starts at the base and increases by one for each level.\n            var newElevation = \"mat-elevation-z\" + (MAT_MENU_BASE_ELEVATION + depth);\n            var customElevation = Object.keys(this._classList).find(function (c) { return c.startsWith('mat-elevation-z'); });\n            if (!customElevation || customElevation === this._previousElevation) {\n                if (this._previousElevation) {\n                    this._classList[this._previousElevation] = false;\n                }\n                this._classList[newElevation] = true;\n                this._previousElevation = newElevation;\n            }\n        };\n        /**\n         * Adds classes to the menu panel based on its position. Can be used by\n         * consumers to add specific styling based on the position.\n         * @param posX Position of the menu along the x axis.\n         * @param posY Position of the menu along the y axis.\n         * @docs-private\n         */\n        _MatMenuBase.prototype.setPositionClasses = function (posX, posY) {\n            if (posX === void 0) { posX = this.xPosition; }\n            if (posY === void 0) { posY = this.yPosition; }\n            var classes = this._classList;\n            classes['mat-menu-before'] = posX === 'before';\n            classes['mat-menu-after'] = posX === 'after';\n            classes['mat-menu-above'] = posY === 'above';\n            classes['mat-menu-below'] = posY === 'below';\n        };\n        /** Starts the enter animation. */\n        _MatMenuBase.prototype._startAnimation = function () {\n            // @breaking-change 8.0.0 Combine with _resetAnimation.\n            this._panelAnimationState = 'enter';\n        };\n        /** Resets the panel animation to its initial state. */\n        _MatMenuBase.prototype._resetAnimation = function () {\n            // @breaking-change 8.0.0 Combine with _startAnimation.\n            this._panelAnimationState = 'void';\n        };\n        /** Callback that is invoked when the panel animation completes. */\n        _MatMenuBase.prototype._onAnimationDone = function (event) {\n            this._animationDone.next(event);\n            this._isAnimating = false;\n        };\n        _MatMenuBase.prototype._onAnimationStart = function (event) {\n            this._isAnimating = true;\n            // Scroll the content element to the top as soon as the animation starts. This is necessary,\n            // because we move focus to the first item while it's still being animated, which can throw\n            // the browser off when it determines the scroll position. Alternatively we can move focus\n            // when the animation is done, however moving focus asynchronously will interrupt screen\n            // readers which are in the process of reading out the menu already. We take the `element`\n            // from the `event` since we can't use a `ViewChild` to access the pane.\n            if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n                event.element.scrollTop = 0;\n            }\n        };\n        /**\n         * Sets up a stream that will keep track of any newly-added menu items and will update the list\n         * of direct descendants. We collect the descendants this way, because `_allItems` can include\n         * items that are part of child menus, and using a custom way of registering items is unreliable\n         * when it comes to maintaining the item order.\n         */\n        _MatMenuBase.prototype._updateDirectDescendants = function () {\n            var _this = this;\n            this._allItems.changes\n                .pipe(operators.startWith(this._allItems))\n                .subscribe(function (items) {\n                _this._directDescendantItems.reset(items.filter(function (item) { return item._parentMenu === _this; }));\n                _this._directDescendantItems.notifyOnChanges();\n            });\n        };\n        /** @nocollapse */\n        _MatMenuBase.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n        ]; };\n        _MatMenuBase.propDecorators = {\n            _allItems: [{ type: core.ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n            backdropClass: [{ type: core.Input }],\n            xPosition: [{ type: core.Input }],\n            yPosition: [{ type: core.Input }],\n            templateRef: [{ type: core.ViewChild, args: [core.TemplateRef, { static: false },] }],\n            items: [{ type: core.ContentChildren, args: [MatMenuItem,] }],\n            lazyContent: [{ type: core.ContentChild, args: [MatMenuContent, { static: false },] }],\n            overlapTrigger: [{ type: core.Input }],\n            hasBackdrop: [{ type: core.Input }],\n            panelClass: [{ type: core.Input, args: ['class',] }],\n            classList: [{ type: core.Input }],\n            closed: [{ type: core.Output }],\n            close: [{ type: core.Output }]\n        };\n        return _MatMenuBase;\n    }());\n    /** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\n    var MatMenu = /** @class */ (function (_super) {\n        tslib_1.__extends(MatMenu, _super);\n        function MatMenu() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return MatMenu;\n    }(_MatMenuBase));\n    // Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n    // extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n    // to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n    // queries and DI to work correctly, while still not referencing the actual menu class.\n    // Class responsibility is split up as follows:\n    // * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n    // * MatMenu - keeps the same name symbol name as the current menu and\n    // is used as a provider for DI and query purposes.\n    // * _MatMenu - the actual menu component implementation with the Angular metadata that should\n    // be tree shaken away for MDC.\n    /** @docs-public MatMenu */\n    var _MatMenu = /** @class */ (function (_super) {\n        tslib_1.__extends(_MatMenu, _super);\n        function _MatMenu(elementRef, ngZone, defaultOptions) {\n            return _super.call(this, elementRef, ngZone, defaultOptions) || this;\n        }\n        _MatMenu.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-menu',\n                        template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matMenu',\n                        animations: [\n                            matMenuAnimations.transformMenu,\n                            matMenuAnimations.fadeInItems\n                        ],\n                        providers: [\n                            { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                            { provide: MatMenu, useExisting: _MatMenu }\n                        ],\n                        styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}@media(-ms-high-contrast: active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}@media(-ms-high-contrast: active){.mat-menu-item.cdk-program-focused,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item-highlighted{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        _MatMenu.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n        ]; };\n        return _MatMenu;\n    }(MatMenu));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that determines the scroll handling while the menu is open. */\n    var MAT_MENU_SCROLL_STRATEGY = new core.InjectionToken('mat-menu-scroll-strategy');\n    /** @docs-private */\n    function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition(); };\n    }\n    /** @docs-private */\n    var MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n        provide: MAT_MENU_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n    };\n    /** Default top padding of the menu panel. */\n    var MENU_PANEL_TOP_PADDING = 8;\n    /** Options for binding a passive event listener. */\n    var passiveEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n    /**\n     * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n     * responsible for toggling the display of the provided menu instance.\n     */\n    var MatMenuTrigger = /** @class */ (function () {\n        function MatMenuTrigger(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, \n        // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n        // @breaking-change 8.0.0\n        _focusMonitor) {\n            var _this = this;\n            this._overlay = _overlay;\n            this._element = _element;\n            this._viewContainerRef = _viewContainerRef;\n            this._parentMenu = _parentMenu;\n            this._menuItemInstance = _menuItemInstance;\n            this._dir = _dir;\n            this._focusMonitor = _focusMonitor;\n            this._overlayRef = null;\n            this._menuOpen = false;\n            this._closingActionsSubscription = rxjs.Subscription.EMPTY;\n            this._hoverSubscription = rxjs.Subscription.EMPTY;\n            this._menuCloseSubscription = rxjs.Subscription.EMPTY;\n            /**\n             * Handles touch start events on the trigger.\n             * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n             */\n            this._handleTouchStart = function () { return _this._openedBy = 'touch'; };\n            // Tracking input type is necessary so it's possible to only auto-focus\n            // the first item of the list when the menu is opened via the keyboard\n            this._openedBy = null;\n            /**\n             * Whether focus should be restored when the menu is closed.\n             * Note that disabling this option can have accessibility implications\n             * and it's up to you to manage focus, if you decide to turn it off.\n             */\n            this.restoreFocus = true;\n            /** Event emitted when the associated menu is opened. */\n            this.menuOpened = new core.EventEmitter();\n            /**\n             * Event emitted when the associated menu is opened.\n             * @deprecated Switch to `menuOpened` instead\n             * @breaking-change 8.0.0\n             */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onMenuOpen = this.menuOpened;\n            /** Event emitted when the associated menu is closed. */\n            this.menuClosed = new core.EventEmitter();\n            /**\n             * Event emitted when the associated menu is closed.\n             * @deprecated Switch to `menuClosed` instead\n             * @breaking-change 8.0.0\n             */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onMenuClose = this.menuClosed;\n            _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n            if (_menuItemInstance) {\n                _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n            }\n            this._scrollStrategy = scrollStrategy;\n        }\n        Object.defineProperty(MatMenuTrigger.prototype, \"_deprecatedMatMenuTriggerFor\", {\n            /**\n             * @deprecated\n             * @breaking-change 8.0.0\n             */\n            get: function () { return this.menu; },\n            set: function (v) {\n                this.menu = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatMenuTrigger.prototype, \"menu\", {\n            /** References the menu instance that the trigger is associated with. */\n            get: function () { return this._menu; },\n            set: function (menu) {\n                var _this = this;\n                if (menu === this._menu) {\n                    return;\n                }\n                this._menu = menu;\n                this._menuCloseSubscription.unsubscribe();\n                if (menu) {\n                    this._menuCloseSubscription = menu.close.asObservable().subscribe(function (reason) {\n                        _this._destroyMenu();\n                        // If a click closed the menu, we should close the entire chain of nested menus.\n                        if ((reason === 'click' || reason === 'tab') && _this._parentMenu) {\n                            _this._parentMenu.closed.emit(reason);\n                        }\n                    });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatMenuTrigger.prototype.ngAfterContentInit = function () {\n            this._checkMenu();\n            this._handleHover();\n        };\n        MatMenuTrigger.prototype.ngOnDestroy = function () {\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n                this._overlayRef = null;\n            }\n            this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n            this._menuCloseSubscription.unsubscribe();\n            this._closingActionsSubscription.unsubscribe();\n            this._hoverSubscription.unsubscribe();\n        };\n        Object.defineProperty(MatMenuTrigger.prototype, \"menuOpen\", {\n            /** Whether the menu is open. */\n            get: function () {\n                return this._menuOpen;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatMenuTrigger.prototype, \"dir\", {\n            /** The text direction of the containing app. */\n            get: function () {\n                return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Whether the menu triggers a sub-menu or a top-level one. */\n        MatMenuTrigger.prototype.triggersSubmenu = function () {\n            return !!(this._menuItemInstance && this._parentMenu);\n        };\n        /** Toggles the menu between the open and closed states. */\n        MatMenuTrigger.prototype.toggleMenu = function () {\n            return this._menuOpen ? this.closeMenu() : this.openMenu();\n        };\n        /** Opens the menu. */\n        MatMenuTrigger.prototype.openMenu = function () {\n            var _this = this;\n            if (this._menuOpen) {\n                return;\n            }\n            this._checkMenu();\n            var overlayRef = this._createOverlay();\n            var overlayConfig = overlayRef.getConfig();\n            this._setPosition(overlayConfig.positionStrategy);\n            overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n                this.menu.hasBackdrop;\n            overlayRef.attach(this._getPortal());\n            if (this.menu.lazyContent) {\n                this.menu.lazyContent.attach(this.menuData);\n            }\n            this._closingActionsSubscription = this._menuClosingActions().subscribe(function () { return _this.closeMenu(); });\n            this._initMenu();\n            if (this.menu instanceof MatMenu) {\n                this.menu._startAnimation();\n            }\n        };\n        /** Closes the menu. */\n        MatMenuTrigger.prototype.closeMenu = function () {\n            this.menu.close.emit();\n        };\n        /**\n         * Focuses the menu trigger.\n         * @param origin Source of the menu trigger's focus.\n         */\n        MatMenuTrigger.prototype.focus = function (origin, options) {\n            if (origin === void 0) { origin = 'program'; }\n            if (this._focusMonitor) {\n                this._focusMonitor.focusVia(this._element, origin, options);\n            }\n            else {\n                this._element.nativeElement.focus(options);\n            }\n        };\n        /** Closes the menu and does the necessary cleanup. */\n        MatMenuTrigger.prototype._destroyMenu = function () {\n            var _this = this;\n            if (!this._overlayRef || !this.menuOpen) {\n                return;\n            }\n            var menu = this.menu;\n            this._closingActionsSubscription.unsubscribe();\n            this._overlayRef.detach();\n            if (menu instanceof MatMenu) {\n                menu._resetAnimation();\n                if (menu.lazyContent) {\n                    // Wait for the exit animation to finish before detaching the content.\n                    menu._animationDone\n                        .pipe(operators.filter(function (event) { return event.toState === 'void'; }), operators.take(1), \n                    // Interrupt if the content got re-attached.\n                    operators.takeUntil(menu.lazyContent._attached))\n                        .subscribe({\n                        next: function () { return menu.lazyContent.detach(); },\n                        // No matter whether the content got re-attached, reset the menu.\n                        complete: function () { return _this._setIsMenuOpen(false); }\n                    });\n                }\n                else {\n                    this._setIsMenuOpen(false);\n                }\n            }\n            else {\n                this._setIsMenuOpen(false);\n                if (menu.lazyContent) {\n                    menu.lazyContent.detach();\n                }\n            }\n            this._restoreFocus();\n        };\n        /**\n         * This method sets the menu state to open and focuses the first item if\n         * the menu was opened via the keyboard.\n         */\n        MatMenuTrigger.prototype._initMenu = function () {\n            this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n            this.menu.direction = this.dir;\n            this._setMenuElevation();\n            this._setIsMenuOpen(true);\n            this.menu.focusFirstItem(this._openedBy || 'program');\n        };\n        /** Updates the menu elevation based on the amount of parent menus that it has. */\n        MatMenuTrigger.prototype._setMenuElevation = function () {\n            if (this.menu.setElevation) {\n                var depth = 0;\n                var parentMenu = this.menu.parentMenu;\n                while (parentMenu) {\n                    depth++;\n                    parentMenu = parentMenu.parentMenu;\n                }\n                this.menu.setElevation(depth);\n            }\n        };\n        /** Restores focus to the element that was focused before the menu was open. */\n        MatMenuTrigger.prototype._restoreFocus = function () {\n            // We should reset focus if the user is navigating using a keyboard or\n            // if we have a top-level trigger which might cause focus to be lost\n            // when clicking on the backdrop.\n            if (this.restoreFocus) {\n                if (!this._openedBy) {\n                    // Note that the focus style will show up both for `program` and\n                    // `keyboard` so we don't have to specify which one it is.\n                    this.focus();\n                }\n                else if (!this.triggersSubmenu()) {\n                    this.focus(this._openedBy);\n                }\n            }\n            this._openedBy = null;\n        };\n        // set state rather than toggle to support triggers sharing a menu\n        MatMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._highlighted = isOpen;\n            }\n        };\n        /**\n         * This method checks that a valid instance of MatMenu has been passed into\n         * matMenuTriggerFor. If not, an exception is thrown.\n         */\n        MatMenuTrigger.prototype._checkMenu = function () {\n            if (!this.menu) {\n                throwMatMenuMissingError();\n            }\n        };\n        /**\n         * This method creates the overlay from the provided menu's template and saves its\n         * OverlayRef so that it can be attached to the DOM when openMenu is called.\n         */\n        MatMenuTrigger.prototype._createOverlay = function () {\n            if (!this._overlayRef) {\n                var config = this._getOverlayConfig();\n                this._subscribeToPositions(config.positionStrategy);\n                this._overlayRef = this._overlay.create(config);\n                // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n                // Ideally we'd also have our keyboard event logic in here, however doing so will\n                // break anybody that may have implemented the `MatMenuPanel` themselves.\n                this._overlayRef.keydownEvents().subscribe();\n            }\n            return this._overlayRef;\n        };\n        /**\n         * This method builds the configuration object needed to create the overlay, the OverlayState.\n         * @returns OverlayConfig\n         */\n        MatMenuTrigger.prototype._getOverlayConfig = function () {\n            return new overlay.OverlayConfig({\n                positionStrategy: this._overlay.position()\n                    .flexibleConnectedTo(this._element)\n                    .withLockedPosition()\n                    .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n                backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n                scrollStrategy: this._scrollStrategy(),\n                direction: this._dir\n            });\n        };\n        /**\n         * Listens to changes in the position of the overlay and sets the correct classes\n         * on the menu based on the new position. This ensures the animation origin is always\n         * correct, even if a fallback position is used for the overlay.\n         */\n        MatMenuTrigger.prototype._subscribeToPositions = function (position) {\n            var _this = this;\n            if (this.menu.setPositionClasses) {\n                position.positionChanges.subscribe(function (change) {\n                    var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                    var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                    _this.menu.setPositionClasses(posX, posY);\n                });\n            }\n        };\n        /**\n         * Sets the appropriate positions on a position strategy\n         * so the overlay connects with the trigger correctly.\n         * @param positionStrategy Strategy whose position to update.\n         */\n        MatMenuTrigger.prototype._setPosition = function (positionStrategy) {\n            var _a = tslib_1.__read(this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], originFallbackX = _a[1];\n            var _b = tslib_1.__read(this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], 2), overlayY = _b[0], overlayFallbackY = _b[1];\n            var _c = tslib_1.__read([overlayY, overlayFallbackY], 2), originY = _c[0], originFallbackY = _c[1];\n            var _d = tslib_1.__read([originX, originFallbackX], 2), overlayX = _d[0], overlayFallbackX = _d[1];\n            var offsetY = 0;\n            if (this.triggersSubmenu()) {\n                // When the menu is a sub-menu, it should always align itself\n                // to the edges of the trigger, instead of overlapping it.\n                overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n                offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n            }\n            else if (!this.menu.overlapTrigger) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n            positionStrategy.withPositions([\n                { originX: originX, originY: originY, overlayX: overlayX, overlayY: overlayY, offsetY: offsetY },\n                { originX: originFallbackX, originY: originY, overlayX: overlayFallbackX, overlayY: overlayY, offsetY: offsetY },\n                {\n                    originX: originX,\n                    originY: originFallbackY,\n                    overlayX: overlayX,\n                    overlayY: overlayFallbackY,\n                    offsetY: -offsetY\n                },\n                {\n                    originX: originFallbackX,\n                    originY: originFallbackY,\n                    overlayX: overlayFallbackX,\n                    overlayY: overlayFallbackY,\n                    offsetY: -offsetY\n                }\n            ]);\n        };\n        /** Returns a stream that emits whenever an action that should close the menu occurs. */\n        MatMenuTrigger.prototype._menuClosingActions = function () {\n            var _this = this;\n            var backdrop = this._overlayRef.backdropClick();\n            var detachments = this._overlayRef.detachments();\n            var parentClose = this._parentMenu ? this._parentMenu.closed : rxjs.of();\n            var hover = this._parentMenu ? this._parentMenu._hovered().pipe(operators.filter(function (active) { return active !== _this._menuItemInstance; }), operators.filter(function () { return _this._menuOpen; })) : rxjs.of();\n            return rxjs.merge(backdrop, parentClose, hover, detachments);\n        };\n        /** Handles mouse presses on the trigger. */\n        MatMenuTrigger.prototype._handleMousedown = function (event) {\n            if (!a11y.isFakeMousedownFromScreenReader(event)) {\n                // Since right or middle button clicks won't trigger the `click` event,\n                // we shouldn't consider the menu as opened by mouse in those cases.\n                this._openedBy = event.button === 0 ? 'mouse' : null;\n                // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n                // we should prevent focus from moving onto it via click to avoid the\n                // highlight from lingering on the menu item.\n                if (this.triggersSubmenu()) {\n                    event.preventDefault();\n                }\n            }\n        };\n        /** Handles key presses on the trigger. */\n        MatMenuTrigger.prototype._handleKeydown = function (event) {\n            var keyCode = event.keyCode;\n            if (this.triggersSubmenu() && ((keyCode === keycodes.RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === keycodes.LEFT_ARROW && this.dir === 'rtl'))) {\n                this.openMenu();\n            }\n        };\n        /** Handles click events on the trigger. */\n        MatMenuTrigger.prototype._handleClick = function (event) {\n            if (this.triggersSubmenu()) {\n                // Stop event propagation to avoid closing the parent menu.\n                event.stopPropagation();\n                this.openMenu();\n            }\n            else {\n                this.toggleMenu();\n            }\n        };\n        /** Handles the cases where the user hovers over the trigger. */\n        MatMenuTrigger.prototype._handleHover = function () {\n            var _this = this;\n            // Subscribe to changes in the hovered item in order to toggle the panel.\n            if (!this.triggersSubmenu()) {\n                return;\n            }\n            this._hoverSubscription = this._parentMenu._hovered()\n                // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n                // with different data and triggers), we have to delay it by a tick to ensure that\n                // it won't be closed immediately after it is opened.\n                .pipe(operators.filter(function (active) { return active === _this._menuItemInstance && !active.disabled; }), operators.delay(0, rxjs.asapScheduler))\n                .subscribe(function () {\n                _this._openedBy = 'mouse';\n                // If the same menu is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (_this.menu instanceof MatMenu && _this.menu._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    _this.menu._animationDone\n                        .pipe(operators.take(1), operators.delay(0, rxjs.asapScheduler), operators.takeUntil(_this._parentMenu._hovered()))\n                        .subscribe(function () { return _this.openMenu(); });\n                }\n                else {\n                    _this.openMenu();\n                }\n            });\n        };\n        /** Gets the portal that should be attached to the overlay. */\n        MatMenuTrigger.prototype._getPortal = function () {\n            // Note that we can avoid this check by keeping the portal on the menu panel.\n            // While it would be cleaner, we'd have to introduce another required method on\n            // `MatMenuPanel`, making it harder to consume.\n            if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n                this._portal = new portal.TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n            }\n            return this._portal;\n        };\n        MatMenuTrigger.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\",\n                        host: {\n                            'class': 'mat-menu-trigger',\n                            'aria-haspopup': 'true',\n                            '[attr.aria-expanded]': 'menuOpen || null',\n                            '(mousedown)': '_handleMousedown($event)',\n                            '(keydown)': '_handleKeydown($event)',\n                            '(click)': '_handleClick($event)',\n                        },\n                        exportAs: 'matMenuTrigger'\n                    },] }\n        ];\n        /** @nocollapse */\n        MatMenuTrigger.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: core.ElementRef },\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n            { type: MatMenu, decorators: [{ type: core.Optional }] },\n            { type: MatMenuItem, decorators: [{ type: core.Optional }, { type: core.Self }] },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: a11y.FocusMonitor }\n        ]; };\n        MatMenuTrigger.propDecorators = {\n            _deprecatedMatMenuTriggerFor: [{ type: core.Input, args: ['mat-menu-trigger-for',] }],\n            menu: [{ type: core.Input, args: ['matMenuTriggerFor',] }],\n            menuData: [{ type: core.Input, args: ['matMenuTriggerData',] }],\n            restoreFocus: [{ type: core.Input, args: ['matMenuTriggerRestoreFocus',] }],\n            menuOpened: [{ type: core.Output }],\n            onMenuOpen: [{ type: core.Output }],\n            menuClosed: [{ type: core.Output }],\n            onMenuClose: [{ type: core.Output }]\n        };\n        return MatMenuTrigger;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n     * to declare the menu-related directives.\n     */\n    var _MatMenuDirectivesModule = /** @class */ (function () {\n        function _MatMenuDirectivesModule() {\n        }\n        _MatMenuDirectivesModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: [MatMenuTrigger, MatMenuContent, core$1.MatCommonModule],\n                        declarations: [MatMenuTrigger, MatMenuContent],\n                        providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n                    },] }\n        ];\n        return _MatMenuDirectivesModule;\n    }());\n    var MatMenuModule = /** @class */ (function () {\n        function MatMenuModule() {\n        }\n        MatMenuModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            core$1.MatCommonModule,\n                            core$1.MatRippleModule,\n                            overlay.OverlayModule,\n                            _MatMenuDirectivesModule,\n                        ],\n                        exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                        declarations: [_MatMenu, MatMenuItem],\n                        providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n                    },] }\n        ];\n        return MatMenuModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_material_src_material_menu_menu_a = MAT_MENU_DEFAULT_OPTIONS_FACTORY;\n    exports.ɵangular_material_src_material_menu_menu_b = MAT_MENU_SCROLL_STRATEGY_FACTORY;\n    exports.ɵangular_material_src_material_menu_menu_c = MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER;\n    exports.MatMenu = MatMenu;\n    exports.MAT_MENU_DEFAULT_OPTIONS = MAT_MENU_DEFAULT_OPTIONS;\n    exports._MatMenu = _MatMenu;\n    exports._MatMenuBase = _MatMenuBase;\n    exports.MatMenuItem = MatMenuItem;\n    exports.MatMenuTrigger = MatMenuTrigger;\n    exports.MAT_MENU_SCROLL_STRATEGY = MAT_MENU_SCROLL_STRATEGY;\n    exports.MAT_MENU_PANEL = MAT_MENU_PANEL;\n    exports._MatMenuDirectivesModule = _MatMenuDirectivesModule;\n    exports.MatMenuModule = MatMenuModule;\n    exports.matMenuAnimations = matMenuAnimations;\n    exports.fadeInItems = fadeInItems;\n    exports.transformMenu = transformMenu;\n    exports.MatMenuContent = MatMenuContent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-menu.umd.js.map\n"]}
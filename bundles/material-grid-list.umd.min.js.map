{"version":3,"sources":["src/material/material-grid-list.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","gridList","core","cdk","coercion","tslib","bidi","this","core$1","tslib_1","MAT_GRID_LIST","InjectionToken","MatGridTile","_element","_gridList","_rowspan","_colspan","Object","defineProperty","prototype","get","set","value","Math","round","coerceNumberProperty","enumerable","configurable","_setStyle","property","nativeElement","style","decorators","type","Component","args","moduleId","id","selector","exportAs","host","class","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","ctorParameters","ElementRef","undefined","Optional","Inject","propDecorators","rowspan","Input","colspan","MatGridTileText","ngAfterContentInit","setLines","_lines","ContentChildren","MatLine","MatGridAvatarCssMatStyler","Directive","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","max","apply","__spread","tracker","rowCount","update","numColumns","tiles","_this","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","_super","fixedRowHeight","call","__extends","test","reset","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","baseTileHeight","rowHeightRatio","ratioParts","split","parseFloat","FitTileStyler","arguments","exp","match","MatGridList","_dir","_gutter","_rowHeight","newValue","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","filter","index","pos","providers","provide","useExisting","Directionality","descendants","MatGridListModule","NgModule","imports","MatLineModule","MatCommonModule","declarations","Éµangular_material_src_material_grid_list_grid_list_a"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/coercion'), require('tslib'), require('@angular/cdk/bidi')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/grid-list', ['exports', '@angular/core', '@angular/material/core', '@angular/cdk/coercion', 'tslib', '@angular/cdk/bidi'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.gridList = {}), global.ng.core, global.ng.material.core, global.ng.cdk.coercion, global.tslib, global.ng.cdk.bidi));\n}(this, function (exports, core, core$1, coercion, tslib_1, bidi) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token used to provide a grid list to a tile and to avoid circular imports.\n     * @docs-private\n     */\n    var MAT_GRID_LIST = new core.InjectionToken('MAT_GRID_LIST');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatGridTile = /** @class */ (function () {\n        function MatGridTile(_element, _gridList) {\n            this._element = _element;\n            this._gridList = _gridList;\n            this._rowspan = 1;\n            this._colspan = 1;\n        }\n        Object.defineProperty(MatGridTile.prototype, \"rowspan\", {\n            /** Amount of rows that the grid tile takes up. */\n            get: function () { return this._rowspan; },\n            set: function (value) { this._rowspan = Math.round(coercion.coerceNumberProperty(value)); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatGridTile.prototype, \"colspan\", {\n            /** Amount of columns that the grid tile takes up. */\n            get: function () { return this._colspan; },\n            set: function (value) { this._colspan = Math.round(coercion.coerceNumberProperty(value)); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n         * \"Changed after checked\" errors that would occur with HostBinding.\n         */\n        MatGridTile.prototype._setStyle = function (property, value) {\n            this._element.nativeElement.style[property] = value;\n        };\n        MatGridTile.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-grid-tile',\n                        exportAs: 'matGridTile',\n                        host: {\n                            'class': 'mat-grid-tile',\n                        },\n                        template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatGridTile.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_GRID_LIST,] }] }\n        ]; };\n        MatGridTile.propDecorators = {\n            rowspan: [{ type: core.Input }],\n            colspan: [{ type: core.Input }]\n        };\n        return MatGridTile;\n    }());\n    var MatGridTileText = /** @class */ (function () {\n        function MatGridTileText(_element) {\n            this._element = _element;\n        }\n        MatGridTileText.prototype.ngAfterContentInit = function () {\n            core$1.setLines(this._lines, this._element);\n        };\n        MatGridTileText.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                        template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatGridTileText.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        MatGridTileText.propDecorators = {\n            _lines: [{ type: core.ContentChildren, args: [core$1.MatLine,] }]\n        };\n        return MatGridTileText;\n    }());\n    /**\n     * Directive whose purpose is to add the mat- CSS styling to this selector.\n     * @docs-private\n     */\n    var MatGridAvatarCssMatStyler = /** @class */ (function () {\n        function MatGridAvatarCssMatStyler() {\n        }\n        MatGridAvatarCssMatStyler.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-grid-avatar], [matGridAvatar]',\n                        host: { 'class': 'mat-grid-avatar' }\n                    },] }\n        ];\n        return MatGridAvatarCssMatStyler;\n    }());\n    /**\n     * Directive whose purpose is to add the mat- CSS styling to this selector.\n     * @docs-private\n     */\n    var MatGridTileHeaderCssMatStyler = /** @class */ (function () {\n        function MatGridTileHeaderCssMatStyler() {\n        }\n        MatGridTileHeaderCssMatStyler.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-grid-tile-header',\n                        host: { 'class': 'mat-grid-tile-header' }\n                    },] }\n        ];\n        return MatGridTileHeaderCssMatStyler;\n    }());\n    /**\n     * Directive whose purpose is to add the mat- CSS styling to this selector.\n     * @docs-private\n     */\n    var MatGridTileFooterCssMatStyler = /** @class */ (function () {\n        function MatGridTileFooterCssMatStyler() {\n        }\n        MatGridTileFooterCssMatStyler.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-grid-tile-footer',\n                        host: { 'class': 'mat-grid-tile-footer' }\n                    },] }\n        ];\n        return MatGridTileFooterCssMatStyler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n     * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n     * because the tiles can have a rowspan.\n     *\n     * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n     * large enough to accommodate it so that the tiles still render in the same order in which they\n     * are given.\n     *\n     * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n     * element of the array corresponds to a column, and the value indicates how many cells in that\n     * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n     * decrements each value in the tracking array (indicating that the column is one cell closer to\n     * being free).\n     *\n     * @docs-private\n     */\n    var TileCoordinator = /** @class */ (function () {\n        function TileCoordinator() {\n            /** Index at which the search for the next gap will start. */\n            this.columnIndex = 0;\n            /** The current row index. */\n            this.rowIndex = 0;\n        }\n        Object.defineProperty(TileCoordinator.prototype, \"rowCount\", {\n            /** Gets the total number of rows occupied by tiles */\n            get: function () { return this.rowIndex + 1; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TileCoordinator.prototype, \"rowspan\", {\n            /**\n             * Gets the total span of rows occupied by tiles.\n             * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n             */\n            get: function () {\n                var lastRowMax = Math.max.apply(Math, tslib_1.__spread(this.tracker));\n                // if any of the tiles has a rowspan that pushes it beyond the total row count,\n                // add the difference to the rowcount\n                return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Updates the tile positions.\n         * @param numColumns Amount of columns in the grid.\n         */\n        TileCoordinator.prototype.update = function (numColumns, tiles) {\n            var _this = this;\n            this.columnIndex = 0;\n            this.rowIndex = 0;\n            this.tracker = new Array(numColumns);\n            this.tracker.fill(0, 0, this.tracker.length);\n            this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });\n        };\n        /** Calculates the row and col position of a tile. */\n        TileCoordinator.prototype._trackTile = function (tile) {\n            // Find a gap large enough for this tile.\n            var gapStartIndex = this._findMatchingGap(tile.colspan);\n            // Place tile in the resulting gap.\n            this._markTilePosition(gapStartIndex, tile);\n            // The next time we look for a gap, the search will start at columnIndex, which should be\n            // immediately after the tile that has just been placed.\n            this.columnIndex = gapStartIndex + tile.colspan;\n            return new TilePosition(this.rowIndex, gapStartIndex);\n        };\n        /** Finds the next available space large enough to fit the tile. */\n        TileCoordinator.prototype._findMatchingGap = function (tileCols) {\n            if (tileCols > this.tracker.length) {\n                throw Error(\"mat-grid-list: tile with colspan \" + tileCols + \" is wider than \" +\n                    (\"grid with cols=\\\"\" + this.tracker.length + \"\\\".\"));\n            }\n            // Start index is inclusive, end index is exclusive.\n            var gapStartIndex = -1;\n            var gapEndIndex = -1;\n            // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n            do {\n                // If we've reached the end of the row, go to the next row.\n                if (this.columnIndex + tileCols > this.tracker.length) {\n                    this._nextRow();\n                    gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                    gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                    continue;\n                }\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                // If there are no more empty spaces in this row at all, move on to the next row.\n                if (gapStartIndex == -1) {\n                    this._nextRow();\n                    gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                    gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                    continue;\n                }\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                // If a gap large enough isn't found, we want to start looking immediately after the current\n                // gap on the next iteration.\n                this.columnIndex = gapStartIndex + 1;\n                // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n                // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n            } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n            // If we still didn't manage to find a gap, ensure that the index is\n            // at least zero so the tile doesn't get pulled out of the grid.\n            return Math.max(gapStartIndex, 0);\n        };\n        /** Move \"down\" to the next row. */\n        TileCoordinator.prototype._nextRow = function () {\n            this.columnIndex = 0;\n            this.rowIndex++;\n            // Decrement all spaces by one to reflect moving down one row.\n            for (var i = 0; i < this.tracker.length; i++) {\n                this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n            }\n        };\n        /**\n         * Finds the end index (exclusive) of a gap given the index from which to start looking.\n         * The gap ends when a non-zero value is found.\n         */\n        TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {\n            for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\n                if (this.tracker[i] != 0) {\n                    return i;\n                }\n            }\n            // The gap ends with the end of the row.\n            return this.tracker.length;\n        };\n        /** Update the tile tracker to account for the given tile in the given space. */\n        TileCoordinator.prototype._markTilePosition = function (start, tile) {\n            for (var i = 0; i < tile.colspan; i++) {\n                this.tracker[start + i] = tile.rowspan;\n            }\n        };\n        return TileCoordinator;\n    }());\n    /**\n     * Simple data structure for tile position (row, col).\n     * @docs-private\n     */\n    var TilePosition = /** @class */ (function () {\n        function TilePosition(row, col) {\n            this.row = row;\n            this.col = col;\n        }\n        return TilePosition;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * RegExp that can be used to check whether a value will\n     * be allowed inside a CSS `calc()` expression.\n     */\n    var cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n    /**\n     * Sets the style properties for an individual tile, given the position calculated by the\n     * Tile Coordinator.\n     * @docs-private\n     */\n    var TileStyler = /** @class */ (function () {\n        function TileStyler() {\n            this._rows = 0;\n            this._rowspan = 0;\n        }\n        /**\n         * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n         * because these properties haven't been calculated by that point.\n         *\n         * @param gutterSize Size of the grid's gutter.\n         * @param tracker Instance of the TileCoordinator.\n         * @param cols Amount of columns in the grid.\n         * @param direction Layout direction of the grid.\n         */\n        TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n            this._gutterSize = normalizeUnits(gutterSize);\n            this._rows = tracker.rowCount;\n            this._rowspan = tracker.rowspan;\n            this._cols = cols;\n            this._direction = direction;\n        };\n        /**\n         * Computes the amount of space a single 1x1 tile would take up (width or height).\n         * Used as a basis for other calculations.\n         * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n         * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n         * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n         */\n        TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {\n            // Take the base size percent (as would be if evenly dividing the size between cells),\n            // and then subtracting the size of one gutter. However, since there are no gutters on the\n            // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n            // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n            // edge evenly among the cells).\n            return \"(\" + sizePercent + \"% - (\" + this._gutterSize + \" * \" + gutterFraction + \"))\";\n        };\n        /**\n         * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n         * @param offset Number of tiles that have already been rendered in the row/column.\n         * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n         * @return Position of the tile as a CSS calc() expression.\n         */\n        TileStyler.prototype.getTilePosition = function (baseSize, offset) {\n            // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n            // row/column (offset).\n            return offset === 0 ? '0' : calc(\"(\" + baseSize + \" + \" + this._gutterSize + \") * \" + offset);\n        };\n        /**\n         * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n         * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n         * @param span The tile's rowspan or colspan.\n         * @return Size of the tile as a CSS calc() expression.\n         */\n        TileStyler.prototype.getTileSize = function (baseSize, span) {\n            return \"(\" + baseSize + \" * \" + span + \") + (\" + (span - 1) + \" * \" + this._gutterSize + \")\";\n        };\n        /**\n         * Sets the style properties to be applied to a tile for the given row and column index.\n         * @param tile Tile to which to apply the styling.\n         * @param rowIndex Index of the tile's row.\n         * @param colIndex Index of the tile's column.\n         */\n        TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {\n            // Percent of the available horizontal space that one column takes up.\n            var percentWidthPerTile = 100 / this._cols;\n            // Fraction of the vertical gutter size that each column takes up.\n            // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n            var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n            this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n            this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        };\n        /** Sets the horizontal placement of the tile in the list. */\n        TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {\n            // Base horizontal size of a column.\n            var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n            // The width and horizontal position of each tile is always calculated the same way, but the\n            // height and vertical position depends on the rowMode.\n            var side = this._direction === 'rtl' ? 'right' : 'left';\n            tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n            tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n        };\n        /**\n         * Calculates the total size taken up by gutters across one axis of a list.\n         */\n        TileStyler.prototype.getGutterSpan = function () {\n            return this._gutterSize + \" * (\" + this._rowspan + \" - 1)\";\n        };\n        /**\n         * Calculates the total size taken up by tiles across one axis of a list.\n         * @param tileHeight Height of the tile.\n         */\n        TileStyler.prototype.getTileSpan = function (tileHeight) {\n            return this._rowspan + \" * \" + this.getTileSize(tileHeight, 1);\n        };\n        /**\n         * Calculates the computed height and returns the correct style property to set.\n         * This method can be implemented by each type of TileStyler.\n         * @docs-private\n         */\n        TileStyler.prototype.getComputedHeight = function () { return null; };\n        return TileStyler;\n    }());\n    /**\n     * This type of styler is instantiated when the user passes in a fixed row height.\n     * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n     * @docs-private\n     */\n    var FixedTileStyler = /** @class */ (function (_super) {\n        tslib_1.__extends(FixedTileStyler, _super);\n        function FixedTileStyler(fixedRowHeight) {\n            var _this = _super.call(this) || this;\n            _this.fixedRowHeight = fixedRowHeight;\n            return _this;\n        }\n        FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {\n            _super.prototype.init.call(this, gutterSize, tracker, cols, direction);\n            this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n            if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n                throw Error(\"Invalid value \\\"\" + this.fixedRowHeight + \"\\\" set as rowHeight.\");\n            }\n        };\n        FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex) {\n            tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n            tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n        };\n        FixedTileStyler.prototype.getComputedHeight = function () {\n            return [\n                'height', calc(this.getTileSpan(this.fixedRowHeight) + \" + \" + this.getGutterSpan())\n            ];\n        };\n        FixedTileStyler.prototype.reset = function (list) {\n            list._setListStyle(['height', null]);\n            if (list._tiles) {\n                list._tiles.forEach(function (tile) {\n                    tile._setStyle('top', null);\n                    tile._setStyle('height', null);\n                });\n            }\n        };\n        return FixedTileStyler;\n    }(TileStyler));\n    /**\n     * This type of styler is instantiated when the user passes in a width:height ratio\n     * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n     * @docs-private\n     */\n    var RatioTileStyler = /** @class */ (function (_super) {\n        tslib_1.__extends(RatioTileStyler, _super);\n        function RatioTileStyler(value) {\n            var _this = _super.call(this) || this;\n            _this._parseRatio(value);\n            return _this;\n        }\n        RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {\n            var percentHeightPerTile = percentWidth / this.rowHeightRatio;\n            this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n            // Use padding-top and margin-top to maintain the given aspect ratio, as\n            // a percentage-based value for these properties is applied versus the *width* of the\n            // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n            tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n            tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n        };\n        RatioTileStyler.prototype.getComputedHeight = function () {\n            return [\n                'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + \" + \" + this.getGutterSpan())\n            ];\n        };\n        RatioTileStyler.prototype.reset = function (list) {\n            list._setListStyle(['paddingBottom', null]);\n            list._tiles.forEach(function (tile) {\n                tile._setStyle('marginTop', null);\n                tile._setStyle('paddingTop', null);\n            });\n        };\n        RatioTileStyler.prototype._parseRatio = function (value) {\n            var ratioParts = value.split(':');\n            if (ratioParts.length !== 2) {\n                throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\" + value + \"\\\"\");\n            }\n            this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n        };\n        return RatioTileStyler;\n    }(TileStyler));\n    /**\n     * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n     * In other words, the row height will reflect the total height of the container divided\n     * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n     *\n     * @docs-private\n     */\n    var FitTileStyler = /** @class */ (function (_super) {\n        tslib_1.__extends(FitTileStyler, _super);\n        function FitTileStyler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        FitTileStyler.prototype.setRowStyles = function (tile, rowIndex) {\n            // Percent of the available vertical space that one row takes up.\n            var percentHeightPerTile = 100 / this._rowspan;\n            // Fraction of the horizontal gutter size that each column takes up.\n            var gutterHeightPerTile = (this._rows - 1) / this._rows;\n            // Base vertical size of a column.\n            var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n            tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n            tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n        };\n        FitTileStyler.prototype.reset = function (list) {\n            if (list._tiles) {\n                list._tiles.forEach(function (tile) {\n                    tile._setStyle('top', null);\n                    tile._setStyle('height', null);\n                });\n            }\n        };\n        return FitTileStyler;\n    }(TileStyler));\n    /** Wraps a CSS string in a calc function */\n    function calc(exp) {\n        return \"calc(\" + exp + \")\";\n    }\n    /** Appends pixels to a CSS string if no units are given. */\n    function normalizeUnits(value) {\n        return value.match(/([A-Za-z%]+)$/) ? value : value + \"px\";\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(kara): Conditional (responsive) column count / row size.\n    // TODO(kara): Re-layout on window resize / media change (debounced).\n    // TODO(kara): gridTileHeader and gridTileFooter.\n    var MAT_FIT_MODE = 'fit';\n    var MatGridList = /** @class */ (function () {\n        function MatGridList(_element, _dir) {\n            this._element = _element;\n            this._dir = _dir;\n            /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n            this._gutter = '1px';\n        }\n        Object.defineProperty(MatGridList.prototype, \"cols\", {\n            /** Amount of columns in the grid list. */\n            get: function () { return this._cols; },\n            set: function (value) {\n                this._cols = Math.max(1, Math.round(coercion.coerceNumberProperty(value)));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatGridList.prototype, \"gutterSize\", {\n            /** Size of the grid list's gutter in pixels. */\n            get: function () { return this._gutter; },\n            set: function (value) { this._gutter = \"\" + (value == null ? '' : value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatGridList.prototype, \"rowHeight\", {\n            /** Set internal representation of row height from the user-provided value. */\n            get: function () { return this._rowHeight; },\n            set: function (value) {\n                var newValue = \"\" + (value == null ? '' : value);\n                if (newValue !== this._rowHeight) {\n                    this._rowHeight = newValue;\n                    this._setTileStyler(this._rowHeight);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatGridList.prototype.ngOnInit = function () {\n            this._checkCols();\n            this._checkRowHeight();\n        };\n        /**\n         * The layout calculation is fairly cheap if nothing changes, so there's little cost\n         * to run it frequently.\n         */\n        MatGridList.prototype.ngAfterContentChecked = function () {\n            this._layoutTiles();\n        };\n        /** Throw a friendly error if cols property is missing */\n        MatGridList.prototype._checkCols = function () {\n            if (!this.cols) {\n                throw Error(\"mat-grid-list: must pass in number of columns. \" +\n                    \"Example: <mat-grid-list cols=\\\"3\\\">\");\n            }\n        };\n        /** Default to equal width:height if rowHeight property is missing */\n        MatGridList.prototype._checkRowHeight = function () {\n            if (!this._rowHeight) {\n                this._setTileStyler('1:1');\n            }\n        };\n        /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n        MatGridList.prototype._setTileStyler = function (rowHeight) {\n            if (this._tileStyler) {\n                this._tileStyler.reset(this);\n            }\n            if (rowHeight === MAT_FIT_MODE) {\n                this._tileStyler = new FitTileStyler();\n            }\n            else if (rowHeight && rowHeight.indexOf(':') > -1) {\n                this._tileStyler = new RatioTileStyler(rowHeight);\n            }\n            else {\n                this._tileStyler = new FixedTileStyler(rowHeight);\n            }\n        };\n        /** Computes and applies the size and position for all children grid tiles. */\n        MatGridList.prototype._layoutTiles = function () {\n            var _this = this;\n            if (!this._tileCoordinator) {\n                this._tileCoordinator = new TileCoordinator();\n            }\n            var tracker = this._tileCoordinator;\n            var tiles = this._tiles.filter(function (tile) { return !tile._gridList || tile._gridList === _this; });\n            var direction = this._dir ? this._dir.value : 'ltr';\n            this._tileCoordinator.update(this.cols, tiles);\n            this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n            tiles.forEach(function (tile, index) {\n                var pos = tracker.positions[index];\n                _this._tileStyler.setStyle(tile, pos.row, pos.col);\n            });\n            this._setListStyle(this._tileStyler.getComputedHeight());\n        };\n        /** Sets style on the main grid-list element, given the style name and value. */\n        MatGridList.prototype._setListStyle = function (style) {\n            if (style) {\n                this._element.nativeElement.style[style[0]] = style[1];\n            }\n        };\n        MatGridList.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-grid-list',\n                        exportAs: 'matGridList',\n                        template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                        host: {\n                            'class': 'mat-grid-list',\n                        },\n                        providers: [{\n                                provide: MAT_GRID_LIST,\n                                useExisting: MatGridList\n                            }],\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatGridList.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        MatGridList.propDecorators = {\n            _tiles: [{ type: core.ContentChildren, args: [MatGridTile, { descendants: true },] }],\n            cols: [{ type: core.Input }],\n            gutterSize: [{ type: core.Input }],\n            rowHeight: [{ type: core.Input }]\n        };\n        return MatGridList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatGridListModule = /** @class */ (function () {\n        function MatGridListModule() {\n        }\n        MatGridListModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatLineModule, core$1.MatCommonModule],\n                        exports: [\n                            MatGridList,\n                            MatGridTile,\n                            MatGridTileText,\n                            core$1.MatLineModule,\n                            core$1.MatCommonModule,\n                            MatGridTileHeaderCssMatStyler,\n                            MatGridTileFooterCssMatStyler,\n                            MatGridAvatarCssMatStyler\n                        ],\n                        declarations: [\n                            MatGridList,\n                            MatGridTile,\n                            MatGridTileText,\n                            MatGridTileHeaderCssMatStyler,\n                            MatGridTileFooterCssMatStyler,\n                            MatGridAvatarCssMatStyler\n                        ],\n                    },] }\n        ];\n        return MatGridListModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.Éµangular_material_src_material_grid_list_grid_list_a = MAT_GRID_LIST;\n    exports.MatGridListModule = MatGridListModule;\n    exports.MatGridList = MatGridList;\n    exports.MatGridTile = MatGridTile;\n    exports.MatGridTileText = MatGridTileText;\n    exports.MatGridAvatarCssMatStyler = MatGridAvatarCssMatStyler;\n    exports.MatGridTileHeaderCssMatStyler = MatGridTileHeaderCssMatStyler;\n    exports.MatGridTileFooterCssMatStyler = MatGridTileFooterCssMatStyler;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-grid-list.umd.js.map\n"]}
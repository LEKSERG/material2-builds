{"version":3,"sources":["src/material/material-progress-bar.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","progressBar","core","common","tslib","rxjs","operators","platformBrowser","animations","this","core$1","_MatProgressBarMixinBase","mixinColor","MatProgressBarBase","_elementRef","MAT_PROGRESS_BAR_LOCATION","InjectionToken","providedIn","MAT_PROGRESS_BAR_LOCATION_FACTORY","_document","inject","DOCUMENT","_location","location","getPathname","pathname","search","progressbarId","MatProgressBar","_super","_ngZone","_animationMode","_this","call","_isNoopAnimation","_value","_bufferValue","animationEnd","EventEmitter","_animationEndSubscription","Subscription","EMPTY","mode","path","split","_rectangleFillValue","__extends","Object","defineProperty","prototype","get","set","v","clamp","_emitAnimationEnd","enumerable","configurable","_primaryTransform","transform","value","_bufferTransform","bufferValue","ngAfterViewInit","runOutsideAngular","element","_primaryValueBar","nativeElement","fromEvent","pipe","filter","e","target","subscribe","run","ngOnDestroy","unsubscribe","next","decorators","type","Component","args","moduleId","id","selector","exportAs","host","role","aria-valuemin","aria-valuemax","[attr.aria-valuenow]","[attr.mode]","class","[class._mat-animation-noopable]","inputs","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","styles","ctorParameters","ElementRef","NgZone","String","Optional","Inject","ANIMATION_MODULE_TYPE","undefined","propDecorators","Input","ViewChild","Output","min","max","Math","MatProgressBarModule","NgModule","imports","CommonModule","MatCommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/core'), require('tslib'), require('rxjs'), require('rxjs/operators'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/progress-bar', ['exports', '@angular/core', '@angular/common', '@angular/material/core', 'tslib', 'rxjs', 'rxjs/operators', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.progressBar = {}), global.ng.core, global.ng.common, global.ng.material.core, global.tslib, global.rxjs, global.rxjs.operators, global.ng.platformBrowser.animations));\n}(this, function (exports, core, common, core$1, tslib, rxjs, operators, animations) { 'use strict';\n\n    // Boilerplate for applying mixins to MatProgressBar.\n    /** @docs-private */\n    var MatProgressBarBase = /** @class */ (function () {\n        function MatProgressBarBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatProgressBarBase;\n    }());\n    var _MatProgressBarMixinBase = core$1.mixinColor(MatProgressBarBase, 'primary');\n    /**\n     * Injection token used to provide the current location to `MatProgressBar`.\n     * Used to handle server-side rendering and to stub out during unit tests.\n     * @docs-private\n     */\n    var MAT_PROGRESS_BAR_LOCATION = new core.InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n    /** @docs-private */\n    function MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n        var _document = core.inject(common.DOCUMENT);\n        var _location = _document ? _document.location : null;\n        return {\n            // Note that this needs to be a function, rather than a property, because Angular\n            // will only resolve it once, but we want the current path on each call.\n            getPathname: function () { return _location ? (_location.pathname + _location.search) : ''; }\n        };\n    }\n    /** Counter used to generate unique IDs for progress bars. */\n    var progressbarId = 0;\n    /**\n     * `<mat-progress-bar>` component.\n     */\n    var MatProgressBar = /** @class */ (function (_super) {\n        tslib.__extends(MatProgressBar, _super);\n        function MatProgressBar(_elementRef, _ngZone, _animationMode, \n        /**\n         * @deprecated `location` parameter to be made required.\n         * @breaking-change 8.0.0\n         */\n        location) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._elementRef = _elementRef;\n            _this._ngZone = _ngZone;\n            _this._animationMode = _animationMode;\n            /** Flag that indicates whether NoopAnimations mode is set to true. */\n            _this._isNoopAnimation = false;\n            _this._value = 0;\n            _this._bufferValue = 0;\n            /**\n             * Event emitted when animation of the primary progress bar completes. This event will not\n             * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n             * animations (indeterminate and query).\n             */\n            _this.animationEnd = new core.EventEmitter();\n            /** Reference to animation end subscription to be unsubscribed on destroy. */\n            _this._animationEndSubscription = rxjs.Subscription.EMPTY;\n            /**\n             * Mode of the progress bar.\n             *\n             * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n             * 'determinate'.\n             * Mirrored to mode attribute.\n             */\n            _this.mode = 'determinate';\n            /** ID of the progress bar. */\n            _this.progressbarId = \"mat-progress-bar-\" + progressbarId++;\n            // We need to prefix the SVG reference with the current path, otherwise they won't work\n            // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n            // because named route URLs can contain parentheses (see #12338). Also we don't use since\n            // we can't tell the difference between whether\n            // the consumer is using the hash location strategy or not, because `Location` normalizes\n            // both `/#/foo/bar` and `/foo/bar` to the same thing.\n            var path = location ? location.getPathname().split('#')[0] : '';\n            _this._rectangleFillValue = \"url('\" + path + \"#\" + _this.progressbarId + \"')\";\n            _this._isNoopAnimation = _animationMode === 'NoopAnimations';\n            return _this;\n        }\n        Object.defineProperty(MatProgressBar.prototype, \"value\", {\n            /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n            get: function () { return this._value; },\n            set: function (v) {\n                this._value = clamp(v || 0);\n                // When noop animation is set to true, trigger animationEnd directly.\n                if (this._isNoopAnimation) {\n                    this._emitAnimationEnd();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatProgressBar.prototype, \"bufferValue\", {\n            /** Buffer value of the progress bar. Defaults to zero. */\n            get: function () { return this._bufferValue; },\n            set: function (v) { this._bufferValue = clamp(v || 0); },\n            enumerable: true,\n            configurable: true\n        });\n        /** Gets the current transform value for the progress bar's primary indicator. */\n        MatProgressBar.prototype._primaryTransform = function () {\n            var scale = this.value / 100;\n            return { transform: \"scaleX(\" + scale + \")\" };\n        };\n        /**\n         * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n         * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n         */\n        MatProgressBar.prototype._bufferTransform = function () {\n            if (this.mode === 'buffer') {\n                var scale = this.bufferValue / 100;\n                return { transform: \"scaleX(\" + scale + \")\" };\n            }\n            return null;\n        };\n        MatProgressBar.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            if (!this._isNoopAnimation) {\n                // Run outside angular so change detection didn't get triggered on every transition end\n                // instead only on the animation that we care about (primary value bar's transitionend)\n                this._ngZone.runOutsideAngular((function () {\n                    var element = _this._primaryValueBar.nativeElement;\n                    _this._animationEndSubscription =\n                        rxjs.fromEvent(element, 'transitionend')\n                            .pipe(operators.filter((function (e) { return e.target === element; })))\n                            .subscribe(function () { return _this._ngZone.run(function () { return _this._emitAnimationEnd(); }); });\n                }));\n            }\n        };\n        MatProgressBar.prototype.ngOnDestroy = function () {\n            this._animationEndSubscription.unsubscribe();\n        };\n        /** Emit an animationEnd event if in determinate or buffer mode. */\n        MatProgressBar.prototype._emitAnimationEnd = function () {\n            if (this.mode === 'determinate' || this.mode === 'buffer') {\n                this.animationEnd.next({ value: this.value });\n            }\n        };\n        MatProgressBar.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-progress-bar',\n                        exportAs: 'matProgressBar',\n                        host: {\n                            'role': 'progressbar',\n                            'aria-valuemin': '0',\n                            'aria-valuemax': '100',\n                            '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                            '[attr.mode]': 'mode',\n                            'class': 'mat-progress-bar',\n                            '[class._mat-animation-noopable]': '_isNoopAnimation',\n                        },\n                        inputs: ['color'],\n                        template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media(-ms-high-contrast: active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media(-ms-high-contrast: active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media(-ms-high-contrast: active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatProgressBar.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n        ]; };\n        MatProgressBar.propDecorators = {\n            value: [{ type: core.Input }],\n            bufferValue: [{ type: core.Input }],\n            _primaryValueBar: [{ type: core.ViewChild, args: ['primaryValueBar',] }],\n            animationEnd: [{ type: core.Output }],\n            mode: [{ type: core.Input }]\n        };\n        return MatProgressBar;\n    }(_MatProgressBarMixinBase));\n    /** Clamps a value to be between two numbers, by default 0 and 100. */\n    function clamp(v, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 100; }\n        return Math.max(min, Math.min(max, v));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatProgressBarModule = /** @class */ (function () {\n        function MatProgressBarModule() {\n        }\n        MatProgressBarModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule, core$1.MatCommonModule],\n                        exports: [MatProgressBar, core$1.MatCommonModule],\n                        declarations: [MatProgressBar],\n                    },] }\n        ];\n        return MatProgressBarModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatProgressBarModule = MatProgressBarModule;\n    exports.MAT_PROGRESS_BAR_LOCATION = MAT_PROGRESS_BAR_LOCATION;\n    exports.MAT_PROGRESS_BAR_LOCATION_FACTORY = MAT_PROGRESS_BAR_LOCATION_FACTORY;\n    exports.MatProgressBar = MatProgressBar;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-progress-bar.umd.js.map\n"]}
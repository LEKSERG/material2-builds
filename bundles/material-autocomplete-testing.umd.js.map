{"version":3,"file":"material-autocomplete-testing.umd.js","sources":["../../../../../../../src/material/autocomplete/testing/option-harness.ts","../../../../../../../src/material/autocomplete/testing/autocomplete-harness.ts","../../../../../../../src/material/autocomplete/testing/public-api.ts","../../../../../../../src/material/autocomplete/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, BaseHarnessFilters} from '@angular/cdk/testing';\n\n// TODO(crisbeto): combine these with the ones in `mat-select`\n// and expand to cover all states once we have experimental/core.\n\nexport interface OptionHarnessFilters extends BaseHarnessFilters {\n  text?: string;\n}\n\nexport interface OptionGroupHarnessFilters extends BaseHarnessFilters {\n  labelText?: string;\n}\n\n/**\n * Harness for interacting with a the `mat-option` for a `mat-autocomplete` in tests.\n * @dynamic\n */\nexport class MatAutocompleteOptionHarness extends ComponentHarness {\n  static hostSelector = '.mat-autocomplete-panel .mat-option';\n\n  static with(options: OptionHarnessFilters = {}) {\n    return new HarnessPredicate(MatAutocompleteOptionHarness, options)\n        .addOption('text', options.text,\n            async (harness, title) =>\n                HarnessPredicate.stringMatches(await harness.getText(), title));\n  }\n\n  /** Clicks the option. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Gets a promise for the option's label text. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n\n/**\n * Harness for interacting with a the `mat-optgroup` for a `mat-autocomplete` in tests.\n * @dynamic\n */\nexport class MatAutocompleteOptionGroupHarness extends ComponentHarness {\n  private _label = this.locatorFor('.mat-optgroup-label');\n  static hostSelector = '.mat-autocomplete-panel .mat-optgroup';\n\n  static with(options: OptionGroupHarnessFilters = {}) {\n    return new HarnessPredicate(MatAutocompleteOptionGroupHarness, options)\n        .addOption('labelText', options.labelText,\n            async (harness, title) =>\n                HarnessPredicate.stringMatches(await harness.getLabelText(), title));\n  }\n\n  /** Gets a promise for the option group's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._label()).text();\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, TestElement} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AutocompleteHarnessFilters} from './autocomplete-harness-filters';\nimport {MatAutocompleteOptionHarness, MatAutocompleteOptionGroupHarness} from './option-harness';\n\n/** Selector for the autocomplete panel. */\nconst PANEL_SELECTOR = '.mat-autocomplete-panel';\n\n/**\n * Harness for interacting with a standard mat-autocomplete in tests.\n * @dynamic\n */\nexport class MatAutocompleteHarness extends ComponentHarness {\n  private _documentRootLocator = this.documentRootLocatorFactory();\n  private _panel = this._documentRootLocator.locatorFor(PANEL_SELECTOR);\n  private _optionalPanel = this._documentRootLocator.locatorForOptional(PANEL_SELECTOR);\n  private _options = this._documentRootLocator.locatorForAll(MatAutocompleteOptionHarness);\n  private _groups = this._documentRootLocator.locatorForAll(MatAutocompleteOptionGroupHarness);\n\n  static hostSelector = '.mat-autocomplete-trigger';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for an autocomplete with\n   * specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `name` finds an autocomplete with a specific name.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: AutocompleteHarnessFilters = {}): HarnessPredicate<MatAutocompleteHarness> {\n    return new HarnessPredicate(MatAutocompleteHarness, options);\n  }\n\n  async getAttribute(attributeName: string): Promise<string|null> {\n    return (await this.host()).getAttribute(attributeName);\n  }\n\n  /** Gets a boolean promise indicating if the autocomplete input is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Gets a promise for the autocomplete's text. */\n  async getText(): Promise<string> {\n    return (await this.host()).getProperty('value');\n  }\n\n  /** Focuses the input and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the input and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Enters text into the autocomplete. */\n  async enterText(value: string): Promise<void> {\n    return (await this.host()).sendKeys(value);\n  }\n\n  /** Gets the autocomplete panel. */\n  async getPanel(): Promise<TestElement> {\n    return this._panel();\n  }\n\n  /** Gets the options inside the autocomplete panel. */\n  async getOptions(): Promise<MatAutocompleteOptionHarness[]> {\n    return this._options();\n  }\n\n  /** Gets the groups of options inside the panel. */\n  async getOptionGroups(): Promise<MatAutocompleteOptionGroupHarness[]> {\n    return this._groups();\n  }\n\n  /** Gets whether the autocomplete panel is visible. */\n  async isPanelVisible(): Promise<boolean> {\n    return (await this._panel()).hasClass('mat-autocomplete-visible');\n  }\n\n  /** Gets whether the autocomplete is open. */\n  async isOpen(): Promise<boolean> {\n    return !!(await this._optionalPanel());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autocomplete-harness';\nexport * from './autocomplete-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["tslib_1.__extends","HarnessPredicate","ComponentHarness","coerceBooleanProperty"],"mappings":"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"}
{"version":3,"sources":["src/material/material-radio-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","radio","testing","tslib","cdk","coercion","this","tslib_1","MatRadioGroupHarness","_super","_this","apply","arguments","_radioButtons","locatorForAll","MatRadioButtonHarness","__extends","with","options","HarnessPredicate","addOption","name","_checkRadioGroupName","prototype","getName","__awaiter","hostName","radioNames","__generator","_a","label","_getGroupNameFromHost","sent","_getNamesFromRadioButtons","length","_checkRadioNamesInGroupEqual","Error","getId","host","getProperty","getSelectedRadioButton","_b","radioButton","e_1_1","e_1","_c","_d","trys","push","getRadioButtons","__values","next","done","value","isChecked","error","return","call","getSelectedValue","selectedRadio","getValue","getAttribute","groupNames","radioName","e_2_1","e_2","e_3","groupName","radioNames_1","radioNames_1_1","e_3_1","harness","indexOf","hostSelector","ComponentHarness","_textLabel","locatorFor","_clickLabel","_input","stringMatches","getLabelText","checked","coerceBooleanProperty","isDisabled","disabled","isRequired","required","text","focus","blur","check","click","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/radio/testing', ['exports', 'tslib', '@angular/cdk/coercion', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.radio = global.ng.material.radio || {}, global.ng.material.radio.testing = {}), global.tslib, global.ng.cdk.coercion, global.ng.cdk.testing));\n}(this, function (exports, tslib_1, coercion, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-radio-group in tests.\n     * @dynamic\n     */\n    var MatRadioGroupHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatRadioGroupHarness, _super);\n        function MatRadioGroupHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._radioButtons = _this.locatorForAll(MatRadioButtonHarness);\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a radio-group with\n         * specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `selector` finds a radio-group whose host element matches the given selector.\n         *   - `name` finds a radio-group with specific name.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatRadioGroupHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatRadioGroupHarness, options)\n                .addOption('name', options.name, this._checkRadioGroupName);\n        };\n        /** Gets the name of the radio-group. */\n        MatRadioGroupHarness.prototype.getName = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var hostName, radioNames;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._getGroupNameFromHost()];\n                        case 1:\n                            hostName = _a.sent();\n                            // It's not possible to always determine the \"name\" of a radio-group by reading\n                            // the attribute. This is because the radio-group does not set the \"name\" as an\n                            // element attribute if the \"name\" value is set through a binding.\n                            if (hostName !== null) {\n                                return [2 /*return*/, hostName];\n                            }\n                            return [4 /*yield*/, this._getNamesFromRadioButtons()];\n                        case 2:\n                            radioNames = _a.sent();\n                            if (!radioNames.length) {\n                                return [2 /*return*/, null];\n                            }\n                            if (!this._checkRadioNamesInGroupEqual(radioNames)) {\n                                throw Error('Radio buttons in radio-group have mismatching names.');\n                            }\n                            return [2 /*return*/, radioNames[0]];\n                    }\n                });\n            });\n        };\n        /** Gets the id of the radio-group. */\n        MatRadioGroupHarness.prototype.getId = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('id')];\n                    }\n                });\n            });\n        };\n        /** Gets the selected radio-button in a radio-group. */\n        MatRadioGroupHarness.prototype.getSelectedRadioButton = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var _a, _b, radioButton, e_1_1;\n                var e_1, _c;\n                return tslib_1.__generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _d.trys.push([0, 6, 7, 8]);\n                            return [4 /*yield*/, this.getRadioButtons()];\n                        case 1:\n                            _a = tslib_1.__values.apply(void 0, [_d.sent()]), _b = _a.next();\n                            _d.label = 2;\n                        case 2:\n                            if (!!_b.done) return [3 /*break*/, 5];\n                            radioButton = _b.value;\n                            return [4 /*yield*/, radioButton.isChecked()];\n                        case 3:\n                            if (_d.sent()) {\n                                return [2 /*return*/, radioButton];\n                            }\n                            _d.label = 4;\n                        case 4:\n                            _b = _a.next();\n                            return [3 /*break*/, 2];\n                        case 5: return [3 /*break*/, 8];\n                        case 6:\n                            e_1_1 = _d.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 8];\n                        case 7:\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/, null];\n                    }\n                });\n            });\n        };\n        /** Gets the selected value of the radio-group. */\n        MatRadioGroupHarness.prototype.getSelectedValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var selectedRadio;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getSelectedRadioButton()];\n                        case 1:\n                            selectedRadio = _a.sent();\n                            if (!selectedRadio) {\n                                return [2 /*return*/, null];\n                            }\n                            return [2 /*return*/, selectedRadio.getValue()];\n                    }\n                });\n            });\n        };\n        /** Gets all radio buttons which are part of the radio-group. */\n        MatRadioGroupHarness.prototype.getRadioButtons = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._radioButtons()];\n                        case 1: return [2 /*return*/, (_a.sent())];\n                    }\n                });\n            });\n        };\n        MatRadioGroupHarness.prototype._getGroupNameFromHost = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        MatRadioGroupHarness.prototype._getNamesFromRadioButtons = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var groupNames, _a, _b, radio, radioName, e_2_1;\n                var e_2, _c;\n                return tslib_1.__generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            groupNames = [];\n                            _d.label = 1;\n                        case 1:\n                            _d.trys.push([1, 7, 8, 9]);\n                            return [4 /*yield*/, this.getRadioButtons()];\n                        case 2:\n                            _a = tslib_1.__values.apply(void 0, [_d.sent()]), _b = _a.next();\n                            _d.label = 3;\n                        case 3:\n                            if (!!_b.done) return [3 /*break*/, 6];\n                            radio = _b.value;\n                            return [4 /*yield*/, radio.getName()];\n                        case 4:\n                            radioName = _d.sent();\n                            if (radioName !== null) {\n                                groupNames.push(radioName);\n                            }\n                            _d.label = 5;\n                        case 5:\n                            _b = _a.next();\n                            return [3 /*break*/, 3];\n                        case 6: return [3 /*break*/, 9];\n                        case 7:\n                            e_2_1 = _d.sent();\n                            e_2 = { error: e_2_1 };\n                            return [3 /*break*/, 9];\n                        case 8:\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                            return [7 /*endfinally*/];\n                        case 9: return [2 /*return*/, groupNames];\n                    }\n                });\n            });\n        };\n        /** Checks if the specified radio names are all equal. */\n        MatRadioGroupHarness.prototype._checkRadioNamesInGroupEqual = function (radioNames) {\n            var e_3, _a;\n            var groupName = null;\n            try {\n                for (var radioNames_1 = tslib_1.__values(radioNames), radioNames_1_1 = radioNames_1.next(); !radioNames_1_1.done; radioNames_1_1 = radioNames_1.next()) {\n                    var radioName = radioNames_1_1.value;\n                    if (groupName === null) {\n                        groupName = radioName;\n                    }\n                    else if (groupName !== radioName) {\n                        return false;\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (radioNames_1_1 && !radioNames_1_1.done && (_a = radioNames_1.return)) _a.call(radioNames_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            return true;\n        };\n        /**\n         * Checks if a radio-group harness has the given name. Throws if a radio-group with\n         * matching name could be found but has mismatching radio-button names.\n         */\n        MatRadioGroupHarness._checkRadioGroupName = function (harness, name) {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var radioNames;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, harness._getGroupNameFromHost()];\n                        case 1:\n                            // Check if there is a radio-group which has the \"name\" attribute set\n                            // to the expected group name. It's not possible to always determine\n                            // the \"name\" of a radio-group by reading the attribute. This is because\n                            // the radio-group does not set the \"name\" as an element attribute if the\n                            // \"name\" value is set through a binding.\n                            if ((_a.sent()) === name) {\n                                return [2 /*return*/, true];\n                            }\n                            return [4 /*yield*/, harness._getNamesFromRadioButtons()];\n                        case 2:\n                            radioNames = _a.sent();\n                            if (radioNames.indexOf(name) === -1) {\n                                return [2 /*return*/, false];\n                            }\n                            if (!harness._checkRadioNamesInGroupEqual(radioNames)) {\n                                throw Error(\"The locator found a radio-group with name \\\"\" + name + \"\\\", but some \" +\n                                    \"radio-button's within the group have mismatching names, which is invalid.\");\n                            }\n                            return [2 /*return*/, true];\n                    }\n                });\n            });\n        };\n        MatRadioGroupHarness.hostSelector = 'mat-radio-group';\n        return MatRadioGroupHarness;\n    }(testing.ComponentHarness));\n    /**\n     * Harness for interacting with a standard mat-radio-button in tests.\n     * @dynamic\n     */\n    var MatRadioButtonHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatRadioButtonHarness, _super);\n        function MatRadioButtonHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._textLabel = _this.locatorFor('.mat-radio-label-content');\n            _this._clickLabel = _this.locatorFor('.mat-radio-label');\n            _this._input = _this.locatorFor('input');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a radio-button with\n         * specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `selector` finds a radio-button whose host element matches the given selector.\n         *   - `label` finds a radio-button with specific label text.\n         *   - `name` finds a radio-button with specific name.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatRadioButtonHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatRadioButtonHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabelText(), label); })\n                .addOption('name', options.name, function (harness, name) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getName()];\n                    case 1: return [2 /*return*/, (_a.sent()) === name];\n                }\n            }); }); });\n        };\n        /** Whether the radio-button is checked. */\n        MatRadioButtonHarness.prototype.isChecked = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            checked = (_b.sent()).getProperty('checked');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the radio-button is disabled. */\n        MatRadioButtonHarness.prototype.isDisabled = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Whether the radio-button is required. */\n        MatRadioButtonHarness.prototype.isRequired = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var required, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            required = (_b.sent()).getAttribute('required');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, required];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the radio-button's name. */\n        MatRadioButtonHarness.prototype.getName = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the radio-button's id. */\n        MatRadioButtonHarness.prototype.getId = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('id')];\n                    }\n                });\n            });\n        };\n        /**\n         * Gets the value of the radio-button. The radio-button value will be\n         * converted to a string.\n         *\n         * Note that this means that radio-button's with objects as value will\n         * intentionally have the `[object Object]` as return value.\n         */\n        MatRadioButtonHarness.prototype.getValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('value')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the radio-button's label text. */\n        MatRadioButtonHarness.prototype.getLabelText = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._textLabel()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /**\n         * Focuses the radio-button and returns a void promise that indicates when the\n         * action is complete.\n         */\n        MatRadioButtonHarness.prototype.focus = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /**\n         * Blurs the radio-button and returns a void promise that indicates when the\n         * action is complete.\n         */\n        MatRadioButtonHarness.prototype.blur = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the radio-button in a checked state by clicking it if it is currently unchecked,\n         * or doing nothing if it is already checked. Returns a void promise that indicates when\n         * the action is complete.\n         */\n        MatRadioButtonHarness.prototype.check = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this._clickLabel()];\n                        case 2: return [2 /*return*/, (_a.sent()).click()];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        MatRadioButtonHarness.hostSelector = 'mat-radio-button';\n        return MatRadioButtonHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatRadioGroupHarness = MatRadioGroupHarness;\n    exports.MatRadioButtonHarness = MatRadioButtonHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-radio-testing.umd.js.map\n"]}
{"version":3,"file":"material-menu-testing.umd.js","sources":["../../../../../../../src/material/menu/testing/menu-harness.ts","../../../../../../../src/material/menu/testing/menu-item-harness.ts","../../../../../../../src/material/menu/testing/public-api.ts","../../../../../../../src/material/menu/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MenuHarnessFilters} from './menu-harness-filters';\nimport {MatMenuItemHarness} from './menu-item-harness';\n\n/**\n * Harness for interacting with a standard mat-menu in tests.\n * @dynamic\n */\nexport class MatMenuHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-trigger';\n\n  // TODO: potentially extend MatButtonHarness\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu whose host element matches the given selector.\n   *   - `label` finds a menu with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuHarnessFilters = {}): HarnessPredicate<MatMenuHarness> {\n    return new HarnessPredicate(MatMenuHarness, options)\n        .addOption('text', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async isOpen(): Promise<boolean> {\n    throw Error('not implemented');\n  }\n\n  async getTriggerText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  async open(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async close(): Promise<void> {\n    throw Error('not implemented');\n  }\n\n  async getItems(): Promise<MatMenuItemHarness[]> {\n    throw Error('not implemented');\n  }\n\n  async getItemLabels(): Promise<string[]> {\n    throw Error('not implemented');\n  }\n\n  async getItemByLabel(): Promise<MatMenuItemHarness> {\n    throw Error('not implemented');\n  }\n\n  async getItemByIndex(): Promise<MatMenuItemHarness> {\n    throw Error('not implemented');\n  }\n\n  async getFocusedItem(): Promise<MatMenuItemHarness> {\n    throw Error('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MenuItemHarnessFilters} from './menu-harness-filters';\n\n\n/**\n * Harness for interacting with a standard mat-menu in tests.\n * @dynamic\n */\nexport class MatMenuItemHarness extends ComponentHarness {\n  static hostSelector = '.mat-menu-item';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a menu with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `selector` finds a menu item whose host element matches the given selector.\n   *   - `label` finds a menu item with specific label text.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: MenuItemHarnessFilters = {}): HarnessPredicate<MatMenuItemHarness> {\n    return new HarnessPredicate(MatMenuItemHarness, options); // TODO: add options here\n  }\n\n  /** Gets a boolean promise indicating if the menu is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the menu and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the menu and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './menu-harness';\nexport * from './menu-harness-filters';\nexport * from './menu-item-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["tslib_1.__extends","HarnessPredicate","coerceBooleanProperty","ComponentHarness"],"mappings":"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"}
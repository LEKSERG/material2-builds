{"version":3,"file":"material-icon.umd.js","sources":["../../../../../../src/material/icon/icon-registry.ts","npm_package.esm5/src/material/icon/icon.js","../../../../../../src/material/icon/icon-module.ts","../../../../../../src/material/icon/public-api.ts","../../../../../../src/material/icon/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl, options?: IconOptions);\n  constructor(svgElement: SVGElement, options?: IconOptions);\n  constructor(data: SafeResourceUrl | SVGElement, public options?: IconOptions) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    @Optional() private readonly _errorHandler?: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            // @breaking-change 9.0.0 _errorHandler parameter to be made required\n            if (this._errorHandler) {\n              this._errorHandler.handleError(new Error(errorMessage));\n            } else {\n              console.error(errorMessage);\n            }\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string, options?: IconOptions): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg, options);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any,\n  errorHandler?: ErrorHandler) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), ErrorHandler],\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Attribute, ChangeDetectionStrategy, Component, ElementRef, ErrorHandler, inject, Inject, InjectionToken, Input, Optional, ViewEncapsulation, } from '@angular/core';\nimport { mixinColor } from '@angular/material/core';\nimport { take } from 'rxjs/operators';\nimport { MatIconRegistry } from './icon-registry';\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nvar MatIconBase = /** @class */ (function () {\n    function MatIconBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatIconBase;\n}());\nvar _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport var MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY() {\n    var _document = inject(DOCUMENT);\n    var _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: function () { return _location ? (_location.pathname + _location.search) : ''; }\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nvar funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nvar ɵ0 = function (attr) { return \"[\" + attr + \"]\"; };\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nvar funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nvar MatIcon = /** @class */ (function (_super) {\n    tslib_1.__extends(MatIcon, _super);\n    function MatIcon(elementRef, _iconRegistry, ariaHidden, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    _location, \n    // @breaking-change 9.0.0 _errorHandler parameter to be made required\n    _errorHandler) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._iconRegistry = _iconRegistry;\n        _this._location = _location;\n        _this._errorHandler = _errorHandler;\n        _this._inline = false;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n        return _this;\n    }\n    Object.defineProperty(MatIcon.prototype, \"inline\", {\n        /**\n         * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n         * the element the icon is contained in.\n         */\n        get: function () {\n            return this._inline;\n        },\n        set: function (inline) {\n            this._inline = coerceBooleanProperty(inline);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatIcon.prototype, \"fontSet\", {\n        /** Font set that the icon is a part of. */\n        get: function () { return this._fontSet; },\n        set: function (value) {\n            this._fontSet = this._cleanupFontValue(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatIcon.prototype, \"fontIcon\", {\n        /** Name of an icon within a font set. */\n        get: function () { return this._fontIcon; },\n        set: function (value) {\n            this._fontIcon = this._cleanupFontValue(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    MatIcon.prototype._splitIconName = function (iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        var parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(\"Invalid icon name: \\\"\" + iconName + \"\\\"\");\n        }\n    };\n    MatIcon.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        var svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            if (this.svgIcon) {\n                var _a = tslib_1.__read(this._splitIconName(this.svgIcon), 2), namespace_1 = _a[0], iconName_1 = _a[1];\n                this._iconRegistry.getNamedSvgIcon(iconName_1, namespace_1)\n                    .pipe(take(1))\n                    .subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) {\n                    var errorMessage = \"Error retrieving icon \" + namespace_1 + \":\" + iconName_1 + \"! \" + err.message;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (_this._errorHandler) {\n                        _this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                });\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    };\n    MatIcon.prototype.ngOnInit = function () {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    };\n    MatIcon.prototype.ngAfterViewChecked = function () {\n        var cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            var newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    };\n    MatIcon.prototype.ngOnDestroy = function () {\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    };\n    MatIcon.prototype._usingFontIcon = function () {\n        return !this.svgIcon;\n    };\n    MatIcon.prototype._setSvgElement = function (svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        var styleTags = svg.querySelectorAll('style');\n        for (var i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            var path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    };\n    MatIcon.prototype._clearSvgElement = function () {\n        var layoutElement = this._elementRef.nativeElement;\n        var childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            var child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    };\n    MatIcon.prototype._updateFontIconClasses = function () {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        var elem = this._elementRef.nativeElement;\n        var fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    };\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    MatIcon.prototype._cleanupFontValue = function (value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    };\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    MatIcon.prototype._prependPathToReferences = function (path) {\n        var elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach(function (attrs, element) {\n                attrs.forEach(function (attr) {\n                    element.setAttribute(attr.name, \"url('\" + path + \"#\" + attr.value + \"')\");\n                });\n            });\n        }\n    };\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    MatIcon.prototype._cacheChildrenWithExternalReferences = function (element) {\n        var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        var elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        var _loop_1 = function (i) {\n            funcIriAttributes.forEach(function (attr) {\n                var elementWithReference = elementsWithFuncIri[i];\n                var value = elementWithReference.getAttribute(attr);\n                var match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    var attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        };\n        for (var i = 0; i < elementsWithFuncIri.length; i++) {\n            _loop_1(i);\n        }\n    };\n    MatIcon.decorators = [\n        { type: Component, args: [{\n                    moduleId: module.id,\n                    template: '<ng-content></ng-content>',\n                    selector: 'mat-icon',\n                    exportAs: 'matIcon',\n                    inputs: ['color'],\n                    host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}/*# sourceMappingURL=icon.css.map */\\n\"]\n                }] }\n    ];\n    /** @nocollapse */\n    MatIcon.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: MatIconRegistry },\n        { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\n        { type: ErrorHandler, decorators: [{ type: Optional }] }\n    ]; };\n    MatIcon.propDecorators = {\n        inline: [{ type: Input }],\n        svgIcon: [{ type: Input }],\n        fontSet: [{ type: Input }],\n        fontIcon: [{ type: Input }]\n    };\n    return MatIcon;\n}(_MatIconMixinBase));\nexport { MatIcon };\nexport { ɵ0 };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './icon-module';\nexport * from './icon';\nexport * from './icon-registry';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["SecurityContext","observableOf","tap","map","observableThrow","catchError","forkJoin","finalize","share","Injectable","HttpClient","Optional","DomSanitizer","Inject","DOCUMENT","ErrorHandler","SkipSelf","mixinColor","InjectionToken","inject","tslib_1.__extends","coerceBooleanProperty","tslib_1.__read","take","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","Input","NgModule","MatCommonModule"],"mappings":"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"}
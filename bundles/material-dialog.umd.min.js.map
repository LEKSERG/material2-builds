{"version":3,"sources":["src/material/material-dialog.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","dialog","cdk","overlay","portal","common","core","tslib","bidi","rxjs","operators","animations","a11y","keycodes","this","core$1","tslib_1","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","animationBody","state","style","opacity","transform","transition","animate","matDialogAnimations","dialogContainer","trigger","slideDialog","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_super","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","call","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","EventEmitter","_ariaLabelledBy","__extends","prototype","attachComponentPortal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","element","nativeElement","_focusTrap","create","focusInitialElementWhenReady","activeElement","contains","focus","_restoreFocus","toFocus","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","decorators","type","Component","args","moduleId","id","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","Default","host","class","tabindex","aria-modal","[attr.id]","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","styles","ctorParameters","ElementRef","FocusTrapFactory","ChangeDetectorRef","undefined","Optional","Inject","DOCUMENT","propDecorators","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","uniqueId","MatDialogRef","_overlayRef","_containerInstance","_location","_afterOpened","Subject","_afterClosed","_beforeClosed","_id","pipe","filter","phaseName","take","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","close","dialogResult","detachBackdrop","setTimeout","totalTime","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","afterOpen","beforeClose","getState","getConfig","positionStrategy","MAT_DIALOG_DATA","InjectionToken","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatDialog","_overlay","_injector","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","openDialogs","length","_afterAllClosed","startWith","_scrollStrategy","Object","defineProperty","get","enumerable","configurable","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","defaultOptions","__assign","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","OverlayConfig","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","injector","PortalInjector","viewContainerRef","WeakMap","containerPortal","ComponentPortal","componentFactoryResolver","attach","instance","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","userInjector","injectionTokens","Directionality","set","value","change","of","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","getAttribute","dialogs","Injectable","Injector","Location","SkipSelf","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","Directive","exportAs","(click)","[attr.type]","Input","_matDialogClose","MatDialogTitle","_dialogRef","container","[id]","MatDialogContent","MatDialogActions","classList","MatDialogModule","NgModule","imports","CommonModule","OverlayModule","PortalModule","MatCommonModule","declarations","providers","entryComponents","MAT_DIALOG_SCROLL_STRATEGY_FACTORY"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/bidi'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/dialog', ['exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/bidi', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/keycodes'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.dialog = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.common, global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.bidi, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.keycodes));\n}(this, function (exports, overlay, portal, common, core, core$1, tslib_1, bidi, rxjs, operators, animations, a11y, keycodes) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Configuration for opening a modal dialog with the MatDialog service.\n     */\n    var MatDialogConfig = /** @class */ (function () {\n        function MatDialogConfig() {\n            /** The ARIA role of the dialog element. */\n            this.role = 'dialog';\n            /** Custom class for the overlay pane. */\n            this.panelClass = '';\n            /** Whether the dialog has a backdrop. */\n            this.hasBackdrop = true;\n            /** Custom class for the backdrop. */\n            this.backdropClass = '';\n            /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n            this.disableClose = false;\n            /** Width of the dialog. */\n            this.width = '';\n            /** Height of the dialog. */\n            this.height = '';\n            /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n            this.maxWidth = '80vw';\n            /** Data being injected into the child component. */\n            this.data = null;\n            /** ID of the element that describes the dialog. */\n            this.ariaDescribedBy = null;\n            /** ID of the element that labels the dialog. */\n            this.ariaLabelledBy = null;\n            /** Aria label to assign to the dialog element. */\n            this.ariaLabel = null;\n            /** Whether the dialog should focus the first focusable element on open. */\n            this.autoFocus = true;\n            /**\n             * Whether the dialog should restore focus to the\n             * previously-focused element, after it's closed.\n             */\n            this.restoreFocus = true;\n            /**\n             * Whether the dialog should close when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.closeOnNavigation = true;\n            // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n        }\n        return MatDialogConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var animationBody = [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        animations.state('void, exit', animations.style({ opacity: 0, transform: 'scale(0.7)' })),\n        animations.state('enter', animations.style({ transform: 'none' })),\n        animations.transition('* => enter', animations.animate('150ms cubic-bezier(0, 0, 0.2, 1)', animations.style({ transform: 'none', opacity: 1 }))),\n        animations.transition('* => void, * => exit', animations.animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', animations.style({ opacity: 0 }))),\n    ];\n    /**\n     * Animations used by MatDialog.\n     * @docs-private\n     */\n    var matDialogAnimations = {\n        /** Animation that is applied on the dialog container by defalt. */\n        dialogContainer: animations.trigger('dialogContainer', animationBody),\n        /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n        slideDialog: animations.trigger('slideDialog', animationBody)\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Throws an exception for the case when a ComponentPortal is\n     * attached to a DomPortalOutlet without an origin.\n     * @docs-private\n     */\n    function throwMatDialogContentAlreadyAttachedError() {\n        throw Error('Attempting to attach dialog content after content is already attached');\n    }\n    /**\n     * Internal component that wraps user-provided dialog content.\n     * Animation is based on https://material.io/guidelines/motion/choreography.html.\n     * @docs-private\n     */\n    var MatDialogContainer = /** @class */ (function (_super) {\n        tslib_1.__extends(MatDialogContainer, _super);\n        function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n        /** The dialog configuration. */\n        _config) {\n            var _this = _super.call(this) || this;\n            _this._elementRef = _elementRef;\n            _this._focusTrapFactory = _focusTrapFactory;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._document = _document;\n            _this._config = _config;\n            /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n            _this._elementFocusedBeforeDialogWasOpened = null;\n            /** State of the dialog animation. */\n            _this._state = 'enter';\n            /** Emits when an animation state changes. */\n            _this._animationStateChanged = new core.EventEmitter();\n            _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n            return _this;\n        }\n        /**\n         * Attach a ComponentPortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        MatDialogContainer.prototype.attachComponentPortal = function (portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n        /**\n         * Attach a TemplatePortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        MatDialogContainer.prototype.attachTemplatePortal = function (portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n        /** Moves the focus inside the focus trap. */\n        MatDialogContainer.prototype._trapFocus = function () {\n            var element = this._elementRef.nativeElement;\n            if (!this._focusTrap) {\n                this._focusTrap = this._focusTrapFactory.create(element);\n            }\n            // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n            // ready in instances where change detection has to run first. To deal with this, we simply\n            // wait for the microtask queue to be empty.\n            if (this._config.autoFocus) {\n                this._focusTrap.focusInitialElementWhenReady();\n            }\n            else {\n                var activeElement = this._document.activeElement;\n                // Otherwise ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (activeElement !== element && !element.contains(activeElement)) {\n                    element.focus();\n                }\n            }\n        };\n        /** Restores focus to the element that was focused before the dialog opened. */\n        MatDialogContainer.prototype._restoreFocus = function () {\n            var toFocus = this._elementFocusedBeforeDialogWasOpened;\n            // We need the extra check, because IE can set the `activeElement` to null in some cases.\n            if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n                toFocus.focus();\n            }\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        };\n        /** Saves a reference to the element that was focused before the dialog was opened. */\n        MatDialogContainer.prototype._savePreviouslyFocusedElement = function () {\n            var _this = this;\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n                // Note that there is no focus method when rendering on the server.\n                if (this._elementRef.nativeElement.focus) {\n                    // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                    // opening multiple dialogs at the same time. Needs to be async, because the element\n                    // may not be focusable immediately.\n                    Promise.resolve().then(function () { return _this._elementRef.nativeElement.focus(); });\n                }\n            }\n        };\n        /** Callback, invoked whenever an animation on the host completes. */\n        MatDialogContainer.prototype._onAnimationDone = function (event) {\n            if (event.toState === 'enter') {\n                this._trapFocus();\n            }\n            else if (event.toState === 'exit') {\n                this._restoreFocus();\n            }\n            this._animationStateChanged.emit(event);\n        };\n        /** Callback, invoked when an animation on the host starts. */\n        MatDialogContainer.prototype._onAnimationStart = function (event) {\n            this._animationStateChanged.emit(event);\n        };\n        /** Starts the dialog exit animation. */\n        MatDialogContainer.prototype._startExitAnimation = function () {\n            this._state = 'exit';\n            // Mark the container for check so it can react if the\n            // view container is using OnPush change detection.\n            this._changeDetectorRef.markForCheck();\n        };\n        MatDialogContainer.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-dialog-container',\n                        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        animations: [matDialogAnimations.dialogContainer],\n                        host: {\n                            'class': 'mat-dialog-container',\n                            'tabindex': '-1',\n                            'aria-modal': 'true',\n                            '[attr.id]': '_id',\n                            '[attr.role]': '_config.role',\n                            '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                            '[attr.aria-label]': '_config.ariaLabel',\n                            '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                            '[@dialogContainer]': '_state',\n                            '(@dialogContainer.start)': '_onAnimationStart($event)',\n                            '(@dialogContainer.done)': '_onAnimationDone($event)',\n                        },\n                        styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media(-ms-high-contrast: active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDialogContainer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: a11y.FocusTrapFactory },\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: MatDialogConfig }\n        ]; };\n        MatDialogContainer.propDecorators = {\n            _portalOutlet: [{ type: core.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]\n        };\n        return MatDialogContainer;\n    }(portal.BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): resizing\n    // Counter for unique dialog ids.\n    var uniqueId = 0;\n    /**\n     * Reference to a dialog opened via the MatDialog service.\n     */\n    var MatDialogRef = /** @class */ (function () {\n        function MatDialogRef(_overlayRef, _containerInstance, \n        // @breaking-change 8.0.0 `_location` parameter to be removed.\n        _location, id) {\n            var _this = this;\n            if (id === void 0) { id = \"mat-dialog-\" + uniqueId++; }\n            this._overlayRef = _overlayRef;\n            this._containerInstance = _containerInstance;\n            this.id = id;\n            /** Whether the user is allowed to close the dialog. */\n            this.disableClose = this._containerInstance._config.disableClose;\n            /** Subject for notifying the user that the dialog has finished opening. */\n            this._afterOpened = new rxjs.Subject();\n            /** Subject for notifying the user that the dialog has finished closing. */\n            this._afterClosed = new rxjs.Subject();\n            /** Subject for notifying the user that the dialog has started closing. */\n            this._beforeClosed = new rxjs.Subject();\n            /** Current state of the dialog. */\n            this._state = 0 /* OPEN */;\n            // Pass the id along to the container.\n            _containerInstance._id = id;\n            // Emit when opening animation completes\n            _containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'enter'; }), operators.take(1))\n                .subscribe(function () {\n                _this._afterOpened.next();\n                _this._afterOpened.complete();\n            });\n            // Dispose overlay when closing animation is complete\n            _containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'exit'; }), operators.take(1)).subscribe(function () {\n                clearTimeout(_this._closeFallbackTimeout);\n                _this._overlayRef.dispose();\n            });\n            _overlayRef.detachments().subscribe(function () {\n                _this._beforeClosed.next(_this._result);\n                _this._beforeClosed.complete();\n                _this._afterClosed.next(_this._result);\n                _this._afterClosed.complete();\n                _this.componentInstance = null;\n                _this._overlayRef.dispose();\n            });\n            _overlayRef.keydownEvents()\n                .pipe(operators.filter(function (event) {\n                return event.keyCode === keycodes.ESCAPE && !_this.disableClose && !keycodes.hasModifierKey(event);\n            }))\n                .subscribe(function (event) {\n                event.preventDefault();\n                _this.close();\n            });\n        }\n        /**\n         * Close the dialog.\n         * @param dialogResult Optional result to return to the dialog opener.\n         */\n        MatDialogRef.prototype.close = function (dialogResult) {\n            var _this = this;\n            this._result = dialogResult;\n            // Transition the backdrop in parallel to the dialog.\n            this._containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'start'; }), operators.take(1))\n                .subscribe(function (event) {\n                _this._beforeClosed.next(dialogResult);\n                _this._beforeClosed.complete();\n                _this._state = 2 /* CLOSED */;\n                _this._overlayRef.detachBackdrop();\n                // The logic that disposes of the overlay depends on the exit animation completing, however\n                // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n                // timeout which will clean everything up if the animation hasn't fired within the specified\n                // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n                // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n                _this._closeFallbackTimeout = setTimeout(function () {\n                    _this._overlayRef.dispose();\n                }, event.totalTime + 100);\n            });\n            this._containerInstance._startExitAnimation();\n            this._state = 1 /* CLOSING */;\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished opening.\n         */\n        MatDialogRef.prototype.afterOpened = function () {\n            return this._afterOpened.asObservable();\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished closing.\n         */\n        MatDialogRef.prototype.afterClosed = function () {\n            return this._afterClosed.asObservable();\n        };\n        /**\n         * Gets an observable that is notified when the dialog has started closing.\n         */\n        MatDialogRef.prototype.beforeClosed = function () {\n            return this._beforeClosed.asObservable();\n        };\n        /**\n         * Gets an observable that emits when the overlay's backdrop has been clicked.\n         */\n        MatDialogRef.prototype.backdropClick = function () {\n            return this._overlayRef.backdropClick();\n        };\n        /**\n         * Gets an observable that emits when keydown events are targeted on the overlay.\n         */\n        MatDialogRef.prototype.keydownEvents = function () {\n            return this._overlayRef.keydownEvents();\n        };\n        /**\n         * Updates the dialog's position.\n         * @param position New dialog position.\n         */\n        MatDialogRef.prototype.updatePosition = function (position) {\n            var strategy = this._getPositionStrategy();\n            if (position && (position.left || position.right)) {\n                position.left ? strategy.left(position.left) : strategy.right(position.right);\n            }\n            else {\n                strategy.centerHorizontally();\n            }\n            if (position && (position.top || position.bottom)) {\n                position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n            }\n            else {\n                strategy.centerVertically();\n            }\n            this._overlayRef.updatePosition();\n            return this;\n        };\n        /**\n         * Updates the dialog's width and height.\n         * @param width New width of the dialog.\n         * @param height New height of the dialog.\n         */\n        MatDialogRef.prototype.updateSize = function (width, height) {\n            if (width === void 0) { width = ''; }\n            if (height === void 0) { height = ''; }\n            this._getPositionStrategy().width(width).height(height);\n            this._overlayRef.updatePosition();\n            return this;\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        MatDialogRef.prototype.addPanelClass = function (classes) {\n            this._overlayRef.addPanelClass(classes);\n            return this;\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        MatDialogRef.prototype.removePanelClass = function (classes) {\n            this._overlayRef.removePanelClass(classes);\n            return this;\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished opening.\n         * @deprecated Use `afterOpened` instead.\n         * @breaking-change 8.0.0\n         */\n        MatDialogRef.prototype.afterOpen = function () {\n            return this.afterOpened();\n        };\n        /**\n         * Gets an observable that is notified when the dialog has started closing.\n         * @deprecated Use `beforeClosed` instead.\n         * @breaking-change 8.0.0\n         */\n        MatDialogRef.prototype.beforeClose = function () {\n            return this.beforeClosed();\n        };\n        /** Gets the current state of the dialog's lifecycle. */\n        MatDialogRef.prototype.getState = function () {\n            return this._state;\n        };\n        /** Fetches the position strategy object from the overlay ref. */\n        MatDialogRef.prototype._getPositionStrategy = function () {\n            return this._overlayRef.getConfig().positionStrategy;\n        };\n        return MatDialogRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to access the data that was passed in to a dialog. */\n    var MAT_DIALOG_DATA = new core.InjectionToken('MatDialogData');\n    /** Injection token that can be used to specify default dialog options. */\n    var MAT_DIALOG_DEFAULT_OPTIONS = new core.InjectionToken('mat-dialog-default-options');\n    /** Injection token that determines the scroll handling while the dialog is open. */\n    var MAT_DIALOG_SCROLL_STRATEGY = new core.InjectionToken('mat-dialog-scroll-strategy');\n    /** @docs-private */\n    function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.block(); };\n    }\n    /** @docs-private */\n    function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.block(); };\n    }\n    /** @docs-private */\n    var MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n        provide: MAT_DIALOG_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n    /**\n     * Service to open Material Design modal dialogs.\n     */\n    var MatDialog = /** @class */ (function () {\n        function MatDialog(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n            var _this = this;\n            this._overlay = _overlay;\n            this._injector = _injector;\n            this._location = _location;\n            this._defaultOptions = _defaultOptions;\n            this._parentDialog = _parentDialog;\n            this._overlayContainer = _overlayContainer;\n            this._openDialogsAtThisLevel = [];\n            this._afterAllClosedAtThisLevel = new rxjs.Subject();\n            this._afterOpenedAtThisLevel = new rxjs.Subject();\n            this._ariaHiddenElements = new Map();\n            // TODO (jelbourn): tighten the typing right-hand side of this expression.\n            /**\n             * Stream that emits when all open dialog have finished closing.\n             * Will emit on subscribe if there are no open dialogs to begin with.\n             */\n            this.afterAllClosed = rxjs.defer(function () { return _this.openDialogs.length ?\n                _this._afterAllClosed :\n                _this._afterAllClosed.pipe(operators.startWith(undefined)); });\n            this._scrollStrategy = scrollStrategy;\n        }\n        Object.defineProperty(MatDialog.prototype, \"openDialogs\", {\n            /** Keeps track of the currently-open dialogs. */\n            get: function () {\n                return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"afterOpened\", {\n            /** Stream that emits when a dialog has been opened. */\n            get: function () {\n                return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"afterOpen\", {\n            /**\n             * Stream that emits when a dialog has been opened.\n             * @deprecated Use `afterOpened` instead.\n             * @breaking-change 8.0.0\n             */\n            get: function () {\n                return this.afterOpened;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"_afterAllClosed\", {\n            get: function () {\n                var parent = this._parentDialog;\n                return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Opens a modal dialog containing the given component.\n         * @param componentOrTemplateRef Type of the component to load into the dialog,\n         *     or a TemplateRef to instantiate as the dialog content.\n         * @param config Extra configuration options.\n         * @returns Reference to the newly-opened dialog.\n         */\n        MatDialog.prototype.open = function (componentOrTemplateRef, config) {\n            var _this = this;\n            config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n            if (config.id && this.getDialogById(config.id)) {\n                throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\n            }\n            var overlayRef = this._createOverlay(config);\n            var dialogContainer = this._attachDialogContainer(overlayRef, config);\n            var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n            // If this is the first dialog that we're opening, hide all the non-overlay content.\n            if (!this.openDialogs.length) {\n                this._hideNonDialogContentFromAssistiveTechnology();\n            }\n            this.openDialogs.push(dialogRef);\n            dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n            this.afterOpened.next(dialogRef);\n            return dialogRef;\n        };\n        /**\n         * Closes all of the currently-open dialogs.\n         */\n        MatDialog.prototype.closeAll = function () {\n            this._closeDialogs(this.openDialogs);\n        };\n        /**\n         * Finds an open dialog by its id.\n         * @param id ID to use when looking up the dialog.\n         */\n        MatDialog.prototype.getDialogById = function (id) {\n            return this.openDialogs.find(function (dialog) { return dialog.id === id; });\n        };\n        MatDialog.prototype.ngOnDestroy = function () {\n            // Only close the dialogs at this level on destroy\n            // since the parent service may still be active.\n            this._closeDialogs(this._openDialogsAtThisLevel);\n            this._afterAllClosedAtThisLevel.complete();\n            this._afterOpenedAtThisLevel.complete();\n        };\n        /**\n         * Creates the overlay into which the dialog will be loaded.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the OverlayRef for the created overlay.\n         */\n        MatDialog.prototype._createOverlay = function (config) {\n            var overlayConfig = this._getOverlayConfig(config);\n            return this._overlay.create(overlayConfig);\n        };\n        /**\n         * Creates an overlay config from a dialog config.\n         * @param dialogConfig The dialog configuration.\n         * @returns The overlay configuration.\n         */\n        MatDialog.prototype._getOverlayConfig = function (dialogConfig) {\n            var state = new overlay.OverlayConfig({\n                positionStrategy: this._overlay.position().global(),\n                scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n                panelClass: dialogConfig.panelClass,\n                hasBackdrop: dialogConfig.hasBackdrop,\n                direction: dialogConfig.direction,\n                minWidth: dialogConfig.minWidth,\n                minHeight: dialogConfig.minHeight,\n                maxWidth: dialogConfig.maxWidth,\n                maxHeight: dialogConfig.maxHeight,\n                disposeOnNavigation: dialogConfig.closeOnNavigation\n            });\n            if (dialogConfig.backdropClass) {\n                state.backdropClass = dialogConfig.backdropClass;\n            }\n            return state;\n        };\n        /**\n         * Attaches an MatDialogContainer to a dialog's already-created overlay.\n         * @param overlay Reference to the dialog's underlying overlay.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to a ComponentRef for the attached container.\n         */\n        MatDialog.prototype._attachDialogContainer = function (overlay, config) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var injector = new portal.PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatDialogConfig, config]\n            ]));\n            var containerPortal = new portal.ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n            var containerRef = overlay.attach(containerPortal);\n            return containerRef.instance;\n        };\n        /**\n         * Attaches the user-provided component to the already-created MatDialogContainer.\n         * @param componentOrTemplateRef The type of component being loaded into the dialog,\n         *     or a TemplateRef to instantiate as the content.\n         * @param dialogContainer Reference to the wrapping MatDialogContainer.\n         * @param overlayRef Reference to the overlay in which the dialog resides.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n         */\n        MatDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n            // Create a reference to the dialog we're creating in order to give the user a handle\n            // to modify and close it.\n            var dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\n            // When the dialog backdrop is clicked, we want to close it.\n            if (config.hasBackdrop) {\n                overlayRef.backdropClick().subscribe(function () {\n                    if (!dialogRef.disableClose) {\n                        dialogRef.close();\n                    }\n                });\n            }\n            if (componentOrTemplateRef instanceof core.TemplateRef) {\n                dialogContainer.attachTemplatePortal(new portal.TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef: dialogRef }));\n            }\n            else {\n                var injector = this._createInjector(config, dialogRef, dialogContainer);\n                var contentRef = dialogContainer.attachComponentPortal(new portal.ComponentPortal(componentOrTemplateRef, undefined, injector));\n                dialogRef.componentInstance = contentRef.instance;\n            }\n            dialogRef\n                .updateSize(config.width, config.height)\n                .updatePosition(config.position);\n            return dialogRef;\n        };\n        /**\n         * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n         * of a dialog to close itself and, optionally, to return a value.\n         * @param config Config object that is used to construct the dialog.\n         * @param dialogRef Reference to the dialog.\n         * @param container Dialog container element that wraps all of the contents.\n         * @returns The custom injector that can be used inside the dialog.\n         */\n        MatDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n            // content are created out of the same ViewContainerRef and as such, are siblings for injector\n            // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n            // added to the injection tokens.\n            var injectionTokens = new WeakMap([\n                [MatDialogContainer, dialogContainer],\n                [MAT_DIALOG_DATA, config.data],\n                [MatDialogRef, dialogRef]\n            ]);\n            if (config.direction &&\n                (!userInjector || !userInjector.get(bidi.Directionality, null))) {\n                injectionTokens.set(bidi.Directionality, {\n                    value: config.direction,\n                    change: rxjs.of()\n                });\n            }\n            return new portal.PortalInjector(userInjector || this._injector, injectionTokens);\n        };\n        /**\n         * Removes a dialog from the array of open dialogs.\n         * @param dialogRef Dialog to be removed.\n         */\n        MatDialog.prototype._removeOpenDialog = function (dialogRef) {\n            var index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                // If all the dialogs were closed, remove/restore the `aria-hidden`\n                // to a the siblings and emit to the `afterAllClosed` stream.\n                if (!this.openDialogs.length) {\n                    this._ariaHiddenElements.forEach(function (previousValue, element) {\n                        if (previousValue) {\n                            element.setAttribute('aria-hidden', previousValue);\n                        }\n                        else {\n                            element.removeAttribute('aria-hidden');\n                        }\n                    });\n                    this._ariaHiddenElements.clear();\n                    this._afterAllClosed.next();\n                }\n            }\n        };\n        /**\n         * Hides all of the content that isn't an overlay from assistive technology.\n         */\n        MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = function () {\n            var overlayContainer = this._overlayContainer.getContainerElement();\n            // Ensure that the overlay container is attached to the DOM.\n            if (overlayContainer.parentElement) {\n                var siblings = overlayContainer.parentElement.children;\n                for (var i = siblings.length - 1; i > -1; i--) {\n                    var sibling = siblings[i];\n                    if (sibling !== overlayContainer &&\n                        sibling.nodeName !== 'SCRIPT' &&\n                        sibling.nodeName !== 'STYLE' &&\n                        !sibling.hasAttribute('aria-live')) {\n                        this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                        sibling.setAttribute('aria-hidden', 'true');\n                    }\n                }\n            }\n        };\n        /** Closes all of the dialogs in an array. */\n        MatDialog.prototype._closeDialogs = function (dialogs) {\n            var i = dialogs.length;\n            while (i--) {\n                // The `_openDialogs` property isn't updated after close until the rxjs subscription\n                // runs on the next microtask, in addition to modifying the array as we're going\n                // through it. We loop through all of them and call close without assuming that\n                // they'll be removed from the list instantaneously.\n                dialogs[i].close();\n            }\n        };\n        MatDialog.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        MatDialog.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: core.Injector },\n            { type: common.Location, decorators: [{ type: core.Optional }] },\n            { type: MatDialogConfig, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n            { type: MatDialog, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },\n            { type: overlay.OverlayContainer }\n        ]; };\n        return MatDialog;\n    }());\n    /**\n     * Applies default options to the dialog config.\n     * @param config Config to be modified.\n     * @param defaultOptions Default options provided.\n     * @returns The new configuration object.\n     */\n    function _applyConfigDefaults(config, defaultOptions) {\n        return tslib_1.__assign({}, defaultOptions, config);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique IDs for dialog elements. */\n    var dialogElementUid = 0;\n    /**\n     * Button that will close the current dialog.\n     */\n    var MatDialogClose = /** @class */ (function () {\n        function MatDialogClose(dialogRef, _elementRef, _dialog) {\n            this.dialogRef = dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            /** Default to \"button\" to prevents accidental form submits. */\n            this.type = 'button';\n        }\n        MatDialogClose.prototype.ngOnInit = function () {\n            if (!this.dialogRef) {\n                // When this directive is included in a dialog via TemplateRef (rather than being\n                // in a Component), the DialogRef isn't available via injection because embedded\n                // views cannot be given a custom injector. Instead, we look up the DialogRef by\n                // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n                // be resolved at constructor time.\n                this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n        };\n        MatDialogClose.prototype.ngOnChanges = function (changes) {\n            var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n            if (proxiedChange) {\n                this.dialogResult = proxiedChange.currentValue;\n            }\n        };\n        MatDialogClose.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-dialog-close], [matDialogClose]',\n                        exportAs: 'matDialogClose',\n                        host: {\n                            '(click)': 'dialogRef.close(dialogResult)',\n                            '[attr.aria-label]': 'ariaLabel || null',\n                            '[attr.type]': 'type',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatDialogClose.ctorParameters = function () { return [\n            { type: MatDialogRef, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: MatDialog }\n        ]; };\n        MatDialogClose.propDecorators = {\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            type: [{ type: core.Input }],\n            dialogResult: [{ type: core.Input, args: ['mat-dialog-close',] }],\n            _matDialogClose: [{ type: core.Input, args: ['matDialogClose',] }]\n        };\n        return MatDialogClose;\n    }());\n    /**\n     * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n     */\n    var MatDialogTitle = /** @class */ (function () {\n        function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n            this._dialogRef = _dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            this.id = \"mat-dialog-title-\" + dialogElementUid++;\n        }\n        MatDialogTitle.prototype.ngOnInit = function () {\n            var _this = this;\n            if (!this._dialogRef) {\n                this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n            if (this._dialogRef) {\n                Promise.resolve().then(function () {\n                    var container = _this._dialogRef._containerInstance;\n                    if (container && !container._ariaLabelledBy) {\n                        container._ariaLabelledBy = _this.id;\n                    }\n                });\n            }\n        };\n        MatDialogTitle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-dialog-title], [matDialogTitle]',\n                        exportAs: 'matDialogTitle',\n                        host: {\n                            'class': 'mat-dialog-title',\n                            '[id]': 'id',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatDialogTitle.ctorParameters = function () { return [\n            { type: MatDialogRef, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: MatDialog }\n        ]; };\n        MatDialogTitle.propDecorators = {\n            id: [{ type: core.Input }]\n        };\n        return MatDialogTitle;\n    }());\n    /**\n     * Scrollable content container of a dialog.\n     */\n    var MatDialogContent = /** @class */ (function () {\n        function MatDialogContent() {\n        }\n        MatDialogContent.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n                        host: { 'class': 'mat-dialog-content' }\n                    },] }\n        ];\n        return MatDialogContent;\n    }());\n    /**\n     * Container for the bottom action buttons in a dialog.\n     * Stays fixed to the bottom when scrolling.\n     */\n    var MatDialogActions = /** @class */ (function () {\n        function MatDialogActions() {\n        }\n        MatDialogActions.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n                        host: { 'class': 'mat-dialog-actions' }\n                    },] }\n        ];\n        return MatDialogActions;\n    }());\n    /**\n     * Finds the closest MatDialogRef to an element by looking at the DOM.\n     * @param element Element relative to which to look for a dialog.\n     * @param openDialogs References to the currently-open dialogs.\n     */\n    function getClosestDialog(element, openDialogs) {\n        var parent = element.nativeElement.parentElement;\n        while (parent && !parent.classList.contains('mat-dialog-container')) {\n            parent = parent.parentElement;\n        }\n        return parent ? openDialogs.find(function (dialog) { return dialog.id === parent.id; }) : null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatDialogModule = /** @class */ (function () {\n        function MatDialogModule() {\n        }\n        MatDialogModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            overlay.OverlayModule,\n                            portal.PortalModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: [\n                            MatDialogContainer,\n                            MatDialogClose,\n                            MatDialogTitle,\n                            MatDialogContent,\n                            MatDialogActions,\n                            core$1.MatCommonModule,\n                        ],\n                        declarations: [\n                            MatDialogContainer,\n                            MatDialogClose,\n                            MatDialogTitle,\n                            MatDialogActions,\n                            MatDialogContent,\n                        ],\n                        providers: [\n                            MatDialog,\n                            MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                        ],\n                        entryComponents: [MatDialogContainer],\n                    },] }\n        ];\n        return MatDialogModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatDialogModule = MatDialogModule;\n    exports.MAT_DIALOG_DATA = MAT_DIALOG_DATA;\n    exports.MAT_DIALOG_DEFAULT_OPTIONS = MAT_DIALOG_DEFAULT_OPTIONS;\n    exports.MAT_DIALOG_SCROLL_STRATEGY = MAT_DIALOG_SCROLL_STRATEGY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_FACTORY = MAT_DIALOG_SCROLL_STRATEGY_FACTORY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY = MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = MAT_DIALOG_SCROLL_STRATEGY_PROVIDER;\n    exports.MatDialog = MatDialog;\n    exports.throwMatDialogContentAlreadyAttachedError = throwMatDialogContentAlreadyAttachedError;\n    exports.MatDialogContainer = MatDialogContainer;\n    exports.MatDialogClose = MatDialogClose;\n    exports.MatDialogTitle = MatDialogTitle;\n    exports.MatDialogContent = MatDialogContent;\n    exports.MatDialogActions = MatDialogActions;\n    exports.MatDialogConfig = MatDialogConfig;\n    exports.MatDialogRef = MatDialogRef;\n    exports.matDialogAnimations = matDialogAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-dialog.umd.js.map\n"]}
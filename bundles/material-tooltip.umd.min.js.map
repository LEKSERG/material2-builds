{"version":3,"sources":["src/material/material-tooltip.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","tooltip","cdk","overlay","a11y","common","core","tslib","bidi","coercion","keycodes","layout","platform","portal","scrolling","rxjs","operators","animations","this","core$1","tslib_1","matTooltipAnimations","tooltipState","trigger","state","style","opacity","transform","transition","animate","keyframes","offset","SCROLL_THROTTLE_MS","passiveListenerOptions","normalizePassiveListenerOptions","passive","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_hammerLoader","_this","_position","_disabled","touchGestures","_message","_passiveListeners","Map","_destroyed","Subject","_scrollStrategy","monitor","pipe","takeUntil","subscribe","origin","run","show","hide","Object","defineProperty","prototype","get","set","value","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","enumerable","configurable","coerceBooleanProperty","removeDescription","nativeElement","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","ngOnInit","_setupPointerEvents","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","forEach","listener","event","removeEventListener","clear","next","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","ComponentPortal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","e","keyCode","ESCAPE","hasModifierKey","preventDefault","stopPropagation","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","__assign","main","fallback","originPosition","isLtr","originX","originY","_a","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","take","tooltipClass","IOS","ANDROID","_disableNativeGesturesIfNecessary","touchendListener","setTimeout","addEventListener","element","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","decorators","type","Directive","args","selector","exportAs","host","(keydown)","ctorParameters","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","Inject","Directionality","Optional","propDecorators","Input","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Breakpoints","Handset","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","Component","moduleId","id","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","[style.zoom]","(body:click)","aria-hidden","styles","ChangeDetectorRef","BreakpointObserver","MatTooltipModule","NgModule","imports","A11yModule","CommonModule","OverlayModule","MatCommonModule","declarations","entryComponents","providers","TOOLTIP_PANEL_CLASS"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/a11y'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('@angular/cdk/layout'), require('@angular/cdk/platform'), require('@angular/cdk/portal'), require('@angular/cdk/scrolling'), require('rxjs'), require('rxjs/operators'), require('@angular/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/tooltip', ['exports', '@angular/cdk/overlay', '@angular/cdk/a11y', '@angular/common', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/keycodes', '@angular/cdk/layout', '@angular/cdk/platform', '@angular/cdk/portal', '@angular/cdk/scrolling', 'rxjs', 'rxjs/operators', '@angular/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.tooltip = {}), global.ng.cdk.overlay, global.ng.cdk.a11y, global.ng.common, global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.ng.cdk.layout, global.ng.cdk.platform, global.ng.cdk.portal, global.ng.cdk.scrolling, global.rxjs, global.rxjs.operators, global.ng.animations));\n}(this, function (exports, overlay, a11y, common, core, core$1, tslib_1, bidi, coercion, keycodes, layout, platform, portal, scrolling, rxjs, operators, animations) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by MatTooltip.\n     * @docs-private\n     */\n    var matTooltipAnimations = {\n        /** Animation that transitions a tooltip in and out. */\n        tooltipState: animations.trigger('state', [\n            animations.state('initial, void, hidden', animations.style({ opacity: 0, transform: 'scale(0)' })),\n            animations.state('visible', animations.style({ transform: 'scale(1)' })),\n            animations.transition('* => visible', animations.animate('200ms cubic-bezier(0, 0, 0.2, 1)', animations.keyframes([\n                animations.style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n                animations.style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n                animations.style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n            ]))),\n            animations.transition('* => hidden', animations.animate('100ms cubic-bezier(0, 0, 0.2, 1)', animations.style({ opacity: 0 }))),\n        ])\n    };\n\n    /** Time in ms to throttle repositioning after scroll events. */\n    var SCROLL_THROTTLE_MS = 20;\n    /** CSS class that will be attached to the overlay panel. */\n    var TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n    /** Options used to bind passive event listeners. */\n    var passiveListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /**\n     * Time between the user putting the pointer on a tooltip\n     * trigger and the long press event being fired.\n     */\n    var LONGPRESS_DELAY = 500;\n    /**\n     * Creates an error to be thrown if the user supplied an invalid tooltip position.\n     * @docs-private\n     */\n    function getMatTooltipInvalidPositionError(position) {\n        return Error(\"Tooltip position \\\"\" + position + \"\\\" is invalid.\");\n    }\n    /** Injection token that determines the scroll handling while a tooltip is visible. */\n    var MAT_TOOLTIP_SCROLL_STRATEGY = new core.InjectionToken('mat-tooltip-scroll-strategy');\n    /** @docs-private */\n    function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }); };\n    }\n    /** @docs-private */\n    var MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n        provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n    };\n    /** Injection token to be used to override the default options for `matTooltip`. */\n    var MAT_TOOLTIP_DEFAULT_OPTIONS = new core.InjectionToken('mat-tooltip-default-options', {\n        providedIn: 'root',\n        factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n    /** @docs-private */\n    function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n        return {\n            showDelay: 0,\n            hideDelay: 0,\n            touchendHideDelay: 1500,\n        };\n    }\n    /**\n     * Directive that attaches a material design tooltip to the host element. Animates the showing and\n     * hiding of a tooltip provided position (defaults to below the element).\n     *\n     * https://material.io/design/components/tooltips.html\n     */\n    var MatTooltip = /** @class */ (function () {\n        function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n        /**\n         * @deprecated _hammerLoader parameter to be removed.\n         * @breaking-change 9.0.0\n         */\n        // Note that we need to give Angular something to inject here so it doesn't throw.\n        _hammerLoader) {\n            var _this = this;\n            this._overlay = _overlay;\n            this._elementRef = _elementRef;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewContainerRef = _viewContainerRef;\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            this._ariaDescriber = _ariaDescriber;\n            this._focusMonitor = _focusMonitor;\n            this._dir = _dir;\n            this._defaultOptions = _defaultOptions;\n            this._position = 'below';\n            this._disabled = false;\n            /** The default delay in ms before showing the tooltip after show is called */\n            this.showDelay = this._defaultOptions.showDelay;\n            /** The default delay in ms before hiding the tooltip after hide is called */\n            this.hideDelay = this._defaultOptions.hideDelay;\n            /**\n             * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n             * uses a long press gesture to show and hide, however it can conflict with the native browser\n             * gestures. To work around the conflict, Angular Material disables native gestures on the\n             * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n             * elements). The different values for this option configure the touch event handling as follows:\n             * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n             *   browser gestures on particular elements. In particular, it allows text selection on inputs\n             *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n             * - `on` - Enables touch gestures for all elements and disables native\n             *   browser gestures with no exceptions.\n             * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n             *   showing on touch devices.\n             */\n            this.touchGestures = 'auto';\n            this._message = '';\n            /** Manually-bound passive event listeners. */\n            this._passiveListeners = new Map();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            this._scrollStrategy = scrollStrategy;\n            if (_defaultOptions) {\n                if (_defaultOptions.position) {\n                    this.position = _defaultOptions.position;\n                }\n                if (_defaultOptions.touchGestures) {\n                    this.touchGestures = _defaultOptions.touchGestures;\n                }\n            }\n            _focusMonitor.monitor(_elementRef)\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function (origin) {\n                // Note that the focus monitor runs outside the Angular zone.\n                if (!origin) {\n                    _ngZone.run(function () { return _this.hide(0); });\n                }\n                else if (origin === 'keyboard') {\n                    _ngZone.run(function () { return _this.show(); });\n                }\n            });\n        }\n        Object.defineProperty(MatTooltip.prototype, \"position\", {\n            /** Allows the user to define the position of the tooltip relative to the parent element */\n            get: function () { return this._position; },\n            set: function (value) {\n                if (value !== this._position) {\n                    this._position = value;\n                    if (this._overlayRef) {\n                        this._updatePosition();\n                        if (this._tooltipInstance) {\n                            this._tooltipInstance.show(0);\n                        }\n                        this._overlayRef.updatePosition();\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTooltip.prototype, \"disabled\", {\n            /** Disables the display of the tooltip. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                // If tooltip is disabled, hide immediately.\n                if (this._disabled) {\n                    this.hide(0);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTooltip.prototype, \"message\", {\n            /** The message to be displayed in the tooltip */\n            get: function () { return this._message; },\n            set: function (value) {\n                var _this = this;\n                this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n                // If the message is not a string (e.g. number), convert it to a string and trim it.\n                this._message = value != null ? (\"\" + value).trim() : '';\n                if (!this._message && this._isTooltipVisible()) {\n                    this.hide(0);\n                }\n                else {\n                    this._updateTooltipMessage();\n                    this._ngZone.runOutsideAngular(function () {\n                        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                        Promise.resolve().then(function () {\n                            _this._ariaDescriber.describe(_this._elementRef.nativeElement, _this.message);\n                        });\n                    });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTooltip.prototype, \"tooltipClass\", {\n            /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n            get: function () { return this._tooltipClass; },\n            set: function (value) {\n                this._tooltipClass = value;\n                if (this._tooltipInstance) {\n                    this._setTooltipClass(this._tooltipClass);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Setup styling-specific things\n         */\n        MatTooltip.prototype.ngOnInit = function () {\n            // This needs to happen in `ngOnInit` so the initial values for all inputs have been set.\n            this._setupPointerEvents();\n        };\n        /**\n         * Dispose the tooltip when destroyed.\n         */\n        MatTooltip.prototype.ngOnDestroy = function () {\n            var _this = this;\n            clearTimeout(this._touchstartTimeout);\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n                this._tooltipInstance = null;\n            }\n            // Clean up the event listeners set in the constructor\n            this._passiveListeners.forEach(function (listener, event) {\n                _this._elementRef.nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n            });\n            this._passiveListeners.clear();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        };\n        /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n        MatTooltip.prototype.show = function (delay) {\n            var _this = this;\n            if (delay === void 0) { delay = this.showDelay; }\n            if (this.disabled || !this.message || (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n                return;\n            }\n            var overlayRef = this._createOverlay();\n            this._detach();\n            this._portal = this._portal || new portal.ComponentPortal(TooltipComponent, this._viewContainerRef);\n            this._tooltipInstance = overlayRef.attach(this._portal).instance;\n            this._tooltipInstance.afterHidden()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this._detach(); });\n            this._setTooltipClass(this._tooltipClass);\n            this._updateTooltipMessage();\n            this._tooltipInstance.show(delay);\n        };\n        /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n        MatTooltip.prototype.hide = function (delay) {\n            if (delay === void 0) { delay = this.hideDelay; }\n            if (this._tooltipInstance) {\n                this._tooltipInstance.hide(delay);\n            }\n        };\n        /** Shows/hides the tooltip */\n        MatTooltip.prototype.toggle = function () {\n            this._isTooltipVisible() ? this.hide() : this.show();\n        };\n        /** Returns true if the tooltip is currently visible to the user */\n        MatTooltip.prototype._isTooltipVisible = function () {\n            return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n        };\n        /** Handles the keydown events on the host element. */\n        MatTooltip.prototype._handleKeydown = function (e) {\n            if (this._isTooltipVisible() && e.keyCode === keycodes.ESCAPE && !keycodes.hasModifierKey(e)) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.hide(0);\n            }\n        };\n        /** Create the overlay config and position strategy */\n        MatTooltip.prototype._createOverlay = function () {\n            var _this = this;\n            if (this._overlayRef) {\n                return this._overlayRef;\n            }\n            var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n            // Create connected position strategy that listens for scroll events to reposition.\n            var strategy = this._overlay.position()\n                .flexibleConnectedTo(this._elementRef)\n                .withTransformOriginOn('.mat-tooltip')\n                .withFlexibleDimensions(false)\n                .withViewportMargin(8)\n                .withScrollableContainers(scrollableAncestors);\n            strategy.positionChanges.pipe(operators.takeUntil(this._destroyed)).subscribe(function (change) {\n                if (_this._tooltipInstance) {\n                    if (change.scrollableViewProperties.isOverlayClipped && _this._tooltipInstance.isVisible()) {\n                        // After position changes occur and the overlay is clipped by\n                        // a parent scrollable then close the tooltip.\n                        _this._ngZone.run(function () { return _this.hide(0); });\n                    }\n                }\n            });\n            this._overlayRef = this._overlay.create({\n                direction: this._dir,\n                positionStrategy: strategy,\n                panelClass: TOOLTIP_PANEL_CLASS,\n                scrollStrategy: this._scrollStrategy()\n            });\n            this._updatePosition();\n            this._overlayRef.detachments()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this._detach(); });\n            return this._overlayRef;\n        };\n        /** Detaches the currently-attached tooltip. */\n        MatTooltip.prototype._detach = function () {\n            if (this._overlayRef && this._overlayRef.hasAttached()) {\n                this._overlayRef.detach();\n            }\n            this._tooltipInstance = null;\n        };\n        /** Updates the position of the current tooltip. */\n        MatTooltip.prototype._updatePosition = function () {\n            var position = this._overlayRef.getConfig().positionStrategy;\n            var origin = this._getOrigin();\n            var overlay = this._getOverlayPosition();\n            position.withPositions([\n                tslib_1.__assign({}, origin.main, overlay.main),\n                tslib_1.__assign({}, origin.fallback, overlay.fallback)\n            ]);\n        };\n        /**\n         * Returns the origin position and a fallback position based on the user's position preference.\n         * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n         */\n        MatTooltip.prototype._getOrigin = function () {\n            var isLtr = !this._dir || this._dir.value == 'ltr';\n            var position = this.position;\n            var originPosition;\n            if (position == 'above' || position == 'below') {\n                originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n            }\n            else if (position == 'before' ||\n                (position == 'left' && isLtr) ||\n                (position == 'right' && !isLtr)) {\n                originPosition = { originX: 'start', originY: 'center' };\n            }\n            else if (position == 'after' ||\n                (position == 'right' && isLtr) ||\n                (position == 'left' && !isLtr)) {\n                originPosition = { originX: 'end', originY: 'center' };\n            }\n            else {\n                throw getMatTooltipInvalidPositionError(position);\n            }\n            var _a = this._invertPosition(originPosition.originX, originPosition.originY), x = _a.x, y = _a.y;\n            return {\n                main: originPosition,\n                fallback: { originX: x, originY: y }\n            };\n        };\n        /** Returns the overlay position and a fallback position based on the user's preference */\n        MatTooltip.prototype._getOverlayPosition = function () {\n            var isLtr = !this._dir || this._dir.value == 'ltr';\n            var position = this.position;\n            var overlayPosition;\n            if (position == 'above') {\n                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n            }\n            else if (position == 'below') {\n                overlayPosition = { overlayX: 'center', overlayY: 'top' };\n            }\n            else if (position == 'before' ||\n                (position == 'left' && isLtr) ||\n                (position == 'right' && !isLtr)) {\n                overlayPosition = { overlayX: 'end', overlayY: 'center' };\n            }\n            else if (position == 'after' ||\n                (position == 'right' && isLtr) ||\n                (position == 'left' && !isLtr)) {\n                overlayPosition = { overlayX: 'start', overlayY: 'center' };\n            }\n            else {\n                throw getMatTooltipInvalidPositionError(position);\n            }\n            var _a = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY), x = _a.x, y = _a.y;\n            return {\n                main: overlayPosition,\n                fallback: { overlayX: x, overlayY: y }\n            };\n        };\n        /** Updates the tooltip message and repositions the overlay according to the new message length */\n        MatTooltip.prototype._updateTooltipMessage = function () {\n            var _this = this;\n            // Must wait for the message to be painted to the tooltip so that the overlay can properly\n            // calculate the correct positioning based on the size of the text.\n            if (this._tooltipInstance) {\n                this._tooltipInstance.message = this.message;\n                this._tooltipInstance._markForCheck();\n                this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1), operators.takeUntil(this._destroyed)).subscribe(function () {\n                    if (_this._tooltipInstance) {\n                        _this._overlayRef.updatePosition();\n                    }\n                });\n            }\n        };\n        /** Updates the tooltip class */\n        MatTooltip.prototype._setTooltipClass = function (tooltipClass) {\n            if (this._tooltipInstance) {\n                this._tooltipInstance.tooltipClass = tooltipClass;\n                this._tooltipInstance._markForCheck();\n            }\n        };\n        /** Inverts an overlay position. */\n        MatTooltip.prototype._invertPosition = function (x, y) {\n            if (this.position === 'above' || this.position === 'below') {\n                if (y === 'top') {\n                    y = 'bottom';\n                }\n                else if (y === 'bottom') {\n                    y = 'top';\n                }\n            }\n            else {\n                if (x === 'end') {\n                    x = 'start';\n                }\n                else if (x === 'start') {\n                    x = 'end';\n                }\n            }\n            return { x: x, y: y };\n        };\n        /** Binds the pointer events to the tooltip trigger. */\n        MatTooltip.prototype._setupPointerEvents = function () {\n            var _this = this;\n            // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n            // first tap from firing its click event or can cause the tooltip to open for clicks.\n            if (!this._platform.IOS && !this._platform.ANDROID) {\n                this._passiveListeners\n                    .set('mouseenter', function () { return _this.show(); })\n                    .set('mouseleave', function () { return _this.hide(); });\n            }\n            else if (this.touchGestures !== 'off') {\n                this._disableNativeGesturesIfNecessary();\n                var touchendListener = function () {\n                    clearTimeout(_this._touchstartTimeout);\n                    _this.hide(_this._defaultOptions.touchendHideDelay);\n                };\n                this._passiveListeners\n                    .set('touchend', touchendListener)\n                    .set('touchcancel', touchendListener)\n                    .set('touchstart', function () {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    clearTimeout(_this._touchstartTimeout);\n                    _this._touchstartTimeout = setTimeout(function () { return _this.show(); }, LONGPRESS_DELAY);\n                });\n            }\n            this._passiveListeners.forEach(function (listener, event) {\n                _this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n            });\n        };\n        /** Disables the native browser gestures, based on how the tooltip has been configured. */\n        MatTooltip.prototype._disableNativeGesturesIfNecessary = function () {\n            var element = this._elementRef.nativeElement;\n            var style = element.style;\n            var gestures = this.touchGestures;\n            if (gestures !== 'off') {\n                // If gestures are set to `auto`, we don't disable text selection on inputs and\n                // textareas, because it prevents the user from typing into them on iOS Safari.\n                if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                    style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                        style.MozUserSelect = 'none';\n                }\n                // If we have `auto` gestures and the element uses native HTML dragging,\n                // we don't set `-webkit-user-drag` because it prevents the native behavior.\n                if (gestures === 'on' || !element.draggable) {\n                    style.webkitUserDrag = 'none';\n                }\n                style.touchAction = 'none';\n                style.webkitTapHighlightColor = 'transparent';\n            }\n        };\n        MatTooltip.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTooltip]',\n                        exportAs: 'matTooltip',\n                        host: {\n                            '(keydown)': '_handleKeydown($event)',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatTooltip.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.ViewContainerRef },\n            { type: core.NgZone },\n            { type: platform.Platform },\n            { type: a11y.AriaDescriber },\n            { type: a11y.FocusMonitor },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }\n        ]; };\n        MatTooltip.propDecorators = {\n            position: [{ type: core.Input, args: ['matTooltipPosition',] }],\n            disabled: [{ type: core.Input, args: ['matTooltipDisabled',] }],\n            showDelay: [{ type: core.Input, args: ['matTooltipShowDelay',] }],\n            hideDelay: [{ type: core.Input, args: ['matTooltipHideDelay',] }],\n            touchGestures: [{ type: core.Input, args: ['matTooltipTouchGestures',] }],\n            message: [{ type: core.Input, args: ['matTooltip',] }],\n            tooltipClass: [{ type: core.Input, args: ['matTooltipClass',] }]\n        };\n        return MatTooltip;\n    }());\n    /**\n     * Internal component that wraps the tooltip's content.\n     * @docs-private\n     */\n    var TooltipComponent = /** @class */ (function () {\n        function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._breakpointObserver = _breakpointObserver;\n            /** Property watched by the animation framework to show or hide the tooltip */\n            this._visibility = 'initial';\n            /** Whether interactions on the page should close the tooltip */\n            this._closeOnInteraction = false;\n            /** Subject for notifying that the tooltip has been hidden from the view */\n            this._onHide = new rxjs.Subject();\n            /** Stream that emits whether the user has a handset-sized display.  */\n            this._isHandset = this._breakpointObserver.observe(layout.Breakpoints.Handset);\n        }\n        /**\n         * Shows the tooltip with an animation originating from the provided origin\n         * @param delay Amount of milliseconds to the delay showing the tooltip.\n         */\n        TooltipComponent.prototype.show = function (delay) {\n            var _this = this;\n            // Cancel the delayed hide if it is scheduled\n            if (this._hideTimeoutId) {\n                clearTimeout(this._hideTimeoutId);\n                this._hideTimeoutId = null;\n            }\n            // Body interactions should cancel the tooltip if there is a delay in showing.\n            this._closeOnInteraction = true;\n            this._showTimeoutId = setTimeout(function () {\n                _this._visibility = 'visible';\n                _this._showTimeoutId = null;\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                _this._markForCheck();\n            }, delay);\n        };\n        /**\n         * Begins the animation to hide the tooltip after the provided delay in ms.\n         * @param delay Amount of milliseconds to delay showing the tooltip.\n         */\n        TooltipComponent.prototype.hide = function (delay) {\n            var _this = this;\n            // Cancel the delayed show if it is scheduled\n            if (this._showTimeoutId) {\n                clearTimeout(this._showTimeoutId);\n                this._showTimeoutId = null;\n            }\n            this._hideTimeoutId = setTimeout(function () {\n                _this._visibility = 'hidden';\n                _this._hideTimeoutId = null;\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                _this._markForCheck();\n            }, delay);\n        };\n        /** Returns an observable that notifies when the tooltip has been hidden from view. */\n        TooltipComponent.prototype.afterHidden = function () {\n            return this._onHide.asObservable();\n        };\n        /** Whether the tooltip is being displayed. */\n        TooltipComponent.prototype.isVisible = function () {\n            return this._visibility === 'visible';\n        };\n        TooltipComponent.prototype.ngOnDestroy = function () {\n            this._onHide.complete();\n        };\n        TooltipComponent.prototype._animationStart = function () {\n            this._closeOnInteraction = false;\n        };\n        TooltipComponent.prototype._animationDone = function (event) {\n            var toState = event.toState;\n            if (toState === 'hidden' && !this.isVisible()) {\n                this._onHide.next();\n            }\n            if (toState === 'visible' || toState === 'hidden') {\n                this._closeOnInteraction = true;\n            }\n        };\n        /**\n         * Interactions on the HTML body should close the tooltip immediately as defined in the\n         * material design spec.\n         * https://material.io/design/components/tooltips.html#behavior\n         */\n        TooltipComponent.prototype._handleBodyInteraction = function () {\n            if (this._closeOnInteraction) {\n                this.hide(0);\n            }\n        };\n        /**\n         * Marks that the tooltip needs to be checked in the next change detection run.\n         * Mainly used for rendering the initial text before positioning a tooltip, which\n         * can be problematic in components with OnPush change detection.\n         */\n        TooltipComponent.prototype._markForCheck = function () {\n            this._changeDetectorRef.markForCheck();\n        };\n        TooltipComponent.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-tooltip-component',\n                        template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        animations: [matTooltipAnimations.tooltipState],\n                        host: {\n                            // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                            // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                            '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                            '(body:click)': 'this._handleBodyInteraction()',\n                            'aria-hidden': 'true',\n                        },\n                        styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media(-ms-high-contrast: active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}/*# sourceMappingURL=tooltip.css.map */\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TooltipComponent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: layout.BreakpointObserver }\n        ]; };\n        return TooltipComponent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatTooltipModule = /** @class */ (function () {\n        function MatTooltipModule() {\n        }\n        MatTooltipModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            a11y.A11yModule,\n                            common.CommonModule,\n                            overlay.OverlayModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: [MatTooltip, TooltipComponent, core$1.MatCommonModule],\n                        declarations: [MatTooltip, TooltipComponent],\n                        entryComponents: [TooltipComponent],\n                        providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n                    },] }\n        ];\n        return MatTooltipModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatTooltipModule = MatTooltipModule;\n    exports.SCROLL_THROTTLE_MS = SCROLL_THROTTLE_MS;\n    exports.TOOLTIP_PANEL_CLASS = TOOLTIP_PANEL_CLASS;\n    exports.getMatTooltipInvalidPositionError = getMatTooltipInvalidPositionError;\n    exports.MAT_TOOLTIP_SCROLL_STRATEGY = MAT_TOOLTIP_SCROLL_STRATEGY;\n    exports.MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY = MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n    exports.MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER;\n    exports.MAT_TOOLTIP_DEFAULT_OPTIONS = MAT_TOOLTIP_DEFAULT_OPTIONS;\n    exports.MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY = MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY;\n    exports.MatTooltip = MatTooltip;\n    exports.TooltipComponent = TooltipComponent;\n    exports.matTooltipAnimations = matTooltipAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-tooltip.umd.js.map\n"]}
{"version":3,"sources":["src/material/material-sidenav-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sidenav","testing","tslib","cdk","this","tslib_1","MatDrawerHarness","_super","apply","arguments","__extends","with","options","HarnessPredicate","prototype","isOpen","__awaiter","__generator","_a","label","host","sent","hasClass","getPosition","getMode","hostSelector","ComponentHarness","MatSidenavHarness","isFixedInViewport","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,SAAUA,QAAQ,yBACxF,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,oCAAqC,CAAC,UAAW,QAAS,wBAAyBJ,GAC7GA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,QAAUV,EAAOQ,GAAGC,SAASC,SAAW,GAAIV,EAAOQ,GAAGC,SAASC,QAAQC,QAAU,IAAKX,EAAOY,MAAOZ,EAAOQ,GAAGK,IAAIF,SAHxP,CAIEG,KAAM,SAAUZ,EAASa,EAASJ,GAAW;;;;;;;OAa3C,IAAIK,EAAkC,SAAUC,GAE5C,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAOC,MAAMJ,KAAMK,YAAcL,KA+D/D,OAjEAC,EAAQK,UAAUJ,EAAkBC,GAUpCD,EAAiBK,KAAO,SAAUC,GAE9B,YADgB,IAAZA,IAAsBA,EAAU,IAC7B,IAAIX,EAAQY,iBAAiBP,EAAkBM,IAG1DN,EAAiBQ,UAAUC,OAAS,WAChC,OAAOV,EAAQW,UAAUZ,UAAM,OAAQ,EAAQ,WAC3C,OAAOC,EAAQY,YAAYb,KAAM,SAAUc,GACvC,OAAQA,EAAGC,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKgB,QAClC,KAAK,EAAG,MAAO,CAAC,EAAeF,EAAGG,OAAQC,SAAS,4BAMnEhB,EAAiBQ,UAAUS,YAAc,WACrC,OAAOlB,EAAQW,UAAUZ,UAAM,OAAQ,EAAQ,WAE3C,OAAOC,EAAQY,YAAYb,KAAM,SAAUc,GACvC,OAAQA,EAAGC,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKgB,QAClC,KAAK,EAED,MAAO,CAAC,EADDF,EAAGG,OACgBC,SAAS,mBACvC,KAAK,EAAG,MAAO,CAAC,EAAeJ,EAAGG,OAAU,MAAQ,eAMpEf,EAAiBQ,UAAUU,QAAU,WACjC,OAAOnB,EAAQW,UAAUZ,UAAM,OAAQ,EAAQ,WAC3C,IAAIgB,EACJ,OAAOf,EAAQY,YAAYb,KAAM,SAAUc,GACvC,OAAQA,EAAGC,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKgB,QAClC,KAAK,EAED,MAAO,CAAC,GADRA,EAAOF,EAAGG,QACgBC,SAAS,oBACvC,KAAK,EACD,OAAIJ,EAAGG,OACI,CAAC,EAAc,QAEnB,CAAC,EAAaD,EAAKE,SAAS,oBACvC,KAAK,EACD,OAAIJ,EAAGG,OACI,CAAC,EAAc,QAEnB,CAAC,EAAc,cAK1Cf,EAAiBmB,aAAe,cACzBnB,EAlE0B,CAmEnCL,EAAQyB,kBAaNC,EAAmC,SAAUpB,GAE7C,SAASoB,IACL,OAAkB,OAAXpB,GAAmBA,EAAOC,MAAMJ,KAAMK,YAAcL,KAwB/D,OA1BAC,EAAQK,UAAUiB,EAAmBpB,GAUrCoB,EAAkBhB,KAAO,SAAUC,GAE/B,YADgB,IAAZA,IAAsBA,EAAU,IAC7B,IAAIX,EAAQY,iBAAiBP,EAAkBM,IAG1De,EAAkBb,UAAUc,kBAAoB,WAC5C,OAAOvB,EAAQW,UAAUZ,UAAM,OAAQ,EAAQ,WAC3C,OAAOC,EAAQY,YAAYb,KAAM,SAAUc,GACvC,OAAQA,EAAGC,OACP,KAAK,EAAG,MAAO,CAAC,EAAaf,KAAKgB,QAClC,KAAK,EAAG,MAAO,CAAC,EAAeF,EAAGG,OAAQC,SAAS,4BAKnEK,EAAkBF,aAAe,eAC1BE,EA3B2B,CA4BpCrB;;;;;;;;;;;;;;;;;;;;;;AAkBFd,EAAQc,iBAAmBA,EAC3Bd,EAAQmC,kBAAoBA,EAE5BE,OAAOC,eAAetC,EAAS,aAAc,CAAEuC,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sidenav/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sidenav = global.ng.material.sidenav || {}, global.ng.material.sidenav.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, function (exports, tslib_1, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-drawer in tests.\n     * @dynamic\n     */\n    var MatDrawerHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatDrawerHarness, _super);\n        function MatDrawerHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a drawer with\n         * specific attributes.\n         * @param options Options for narrowing the search.\n         * @return `HarnessPredicate` configured with the given options.\n         */\n        MatDrawerHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatDrawerHarness, options);\n        };\n        /** Gets whether the drawer is open. */\n        MatDrawerHarness.prototype.isOpen = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-drawer-opened')];\n                    }\n                });\n            });\n        };\n        /** Gets the position of the drawer inside its container. */\n        MatDrawerHarness.prototype.getPosition = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var host;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.hasClass('mat-drawer-end')];\n                        case 2: return [2 /*return*/, (_a.sent()) ? 'end' : 'start'];\n                    }\n                });\n            });\n        };\n        /** Gets the mode that the drawer is in. */\n        MatDrawerHarness.prototype.getMode = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var host;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.hasClass('mat-drawer-push')];\n                        case 2:\n                            if (_a.sent()) {\n                                return [2 /*return*/, 'push'];\n                            }\n                            return [4 /*yield*/, host.hasClass('mat-drawer-side')];\n                        case 3:\n                            if (_a.sent()) {\n                                return [2 /*return*/, 'side'];\n                            }\n                            return [2 /*return*/, 'over'];\n                    }\n                });\n            });\n        };\n        MatDrawerHarness.hostSelector = '.mat-drawer';\n        return MatDrawerHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-sidenav in tests.\n     * @dynamic\n     */\n    var MatSidenavHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSidenavHarness, _super);\n        function MatSidenavHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a sidenav with\n         * specific attributes.\n         * @param options Options for narrowing the search.\n         * @return `HarnessPredicate` configured with the given options.\n         */\n        MatSidenavHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatDrawerHarness, options);\n        };\n        /** Gets whether the sidenav is fixed in the viewport. */\n        MatSidenavHarness.prototype.isFixedInViewport = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-sidenav-fixed')];\n                    }\n                });\n            });\n        };\n        MatSidenavHarness.hostSelector = '.mat-sidenav';\n        return MatSidenavHarness;\n    }(MatDrawerHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatDrawerHarness = MatDrawerHarness;\n    exports.MatSidenavHarness = MatSidenavHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-sidenav-testing.umd.js.map\n"]}
{"version":3,"sources":["src/material/material-sidenav-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sidenav","testing","tslib","cdk","this","tslib_1","MatDrawerHarness","_super","apply","arguments","__extends","with","options","_this","HarnessPredicate","addOption","position","harness","__awaiter","__generator","_a","label","getPosition","sent","prototype","isOpen","host","hasClass","getMode","hostSelector","ComponentHarness","MatSidenavHarness","isFixedInViewport","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sidenav/testing', ['exports', 'tslib', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sidenav = global.ng.material.sidenav || {}, global.ng.material.sidenav.testing = {}), global.tslib, global.ng.cdk.testing));\n}(this, function (exports, tslib_1, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-drawer in tests.\n     * @dynamic\n     */\n    var MatDrawerHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatDrawerHarness, _super);\n        function MatDrawerHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a drawer with\n         * specific attributes.\n         * @param options Options for narrowing the search.\n         * @return `HarnessPredicate` configured with the given options.\n         */\n        MatDrawerHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatDrawerHarness, options)\n                .addOption('position', options.position, function (harness, position) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getPosition()];\n                    case 1: return [2 /*return*/, (_a.sent()) === position];\n                }\n            }); }); });\n        };\n        /** Gets whether the drawer is open. */\n        MatDrawerHarness.prototype.isOpen = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-drawer-opened')];\n                    }\n                });\n            });\n        };\n        /** Gets the position of the drawer inside its container. */\n        MatDrawerHarness.prototype.getPosition = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var host;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.hasClass('mat-drawer-end')];\n                        case 2: return [2 /*return*/, (_a.sent()) ? 'end' : 'start'];\n                    }\n                });\n            });\n        };\n        /** Gets the mode that the drawer is in. */\n        MatDrawerHarness.prototype.getMode = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var host;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            host = _a.sent();\n                            return [4 /*yield*/, host.hasClass('mat-drawer-push')];\n                        case 2:\n                            if (_a.sent()) {\n                                return [2 /*return*/, 'push'];\n                            }\n                            return [4 /*yield*/, host.hasClass('mat-drawer-side')];\n                        case 3:\n                            if (_a.sent()) {\n                                return [2 /*return*/, 'side'];\n                            }\n                            return [2 /*return*/, 'over'];\n                    }\n                });\n            });\n        };\n        MatDrawerHarness.hostSelector = '.mat-drawer';\n        return MatDrawerHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-sidenav in tests.\n     * @dynamic\n     */\n    var MatSidenavHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSidenavHarness, _super);\n        function MatSidenavHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a sidenav with\n         * specific attributes.\n         * @param options Options for narrowing the search.\n         * @return `HarnessPredicate` configured with the given options.\n         */\n        MatSidenavHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatDrawerHarness, options)\n                .addOption('position', options.position, function (harness, position) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getPosition()];\n                    case 1: return [2 /*return*/, (_a.sent()) === position];\n                }\n            }); }); });\n        };\n        /** Gets whether the sidenav is fixed in the viewport. */\n        MatSidenavHarness.prototype.isFixedInViewport = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-sidenav-fixed')];\n                    }\n                });\n            });\n        };\n        MatSidenavHarness.hostSelector = '.mat-sidenav';\n        return MatSidenavHarness;\n    }(MatDrawerHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatDrawerHarness = MatDrawerHarness;\n    exports.MatSidenavHarness = MatSidenavHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-sidenav-testing.umd.js.map\n"]}
{"version":3,"sources":["src/material/material-select-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","select","testing","tslib","cdk","formField","control","this","MatSelectOptionHarness","_super","apply","arguments","__extends","with","options","_this","HarnessPredicate","addOption","text","harness","title","__awaiter","_a","_b","__generator","_c","label","stringMatches","getText","sent","prototype","click","host","hostSelector","ComponentHarness","MatSelectOptionGroupHarness","_label","locatorFor","labelText","getLabelText","MatSelectHarness","_documentRootLocator","documentRootLocatorFactory","_backdrop","_optionalPanel","locatorForOptional","_trigger","_value","isDisabled","hasClass","isValid","isRequired","isEmpty","isMultiple","getAttribute","getValueText","focus","blur","getOptions","filter","locatorForAll","getOptionGroups","isOpen","open","clickOptions","Promise","all","__read","length","Error","map","option","close","MatFormFieldControlHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/material/form-field/testing/control')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/select/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/material/form-field/testing/control'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.select = global.ng.material.select || {}, global.ng.material.select.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.material.formField.testing.control));\n}(this, (function (exports, tslib, testing, control) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a the `mat-option` for a `mat-select` in tests. */\n    var MatSelectOptionHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSelectOptionHarness, _super);\n        function MatSelectOptionHarness() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        // TODO(crisbeto): things to add here when adding a common option harness:\n        // - isDisabled\n        // - isSelected\n        // - isActive\n        // - isMultiple\n        MatSelectOptionHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSelectOptionHarness, options)\n                .addOption('text', options.text, function (harness, title) { return tslib.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = testing.HarnessPredicate).stringMatches;\n                        return [4 /*yield*/, harness.getText()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), title])];\n                }\n            }); }); });\n        };\n        /** Clicks the option. */\n        MatSelectOptionHarness.prototype.click = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the option's label text. */\n        MatSelectOptionHarness.prototype.getText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        MatSelectOptionHarness.hostSelector = '.mat-select-panel .mat-option';\n        return MatSelectOptionHarness;\n    }(testing.ComponentHarness));\n    /** Harness for interacting with a the `mat-optgroup` for a `mat-select` in tests. */\n    var MatSelectOptionGroupHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSelectOptionGroupHarness, _super);\n        function MatSelectOptionGroupHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('.mat-optgroup-label');\n            return _this;\n        }\n        MatSelectOptionGroupHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSelectOptionGroupHarness, options)\n                .addOption('labelText', options.labelText, function (harness, title) { return tslib.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = testing.HarnessPredicate).stringMatches;\n                        return [4 /*yield*/, harness.getLabelText()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), title])];\n                }\n            }); }); });\n        };\n        /** Gets a promise for the option group's label text. */\n        MatSelectOptionGroupHarness.prototype.getLabelText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        MatSelectOptionGroupHarness.hostSelector = '.mat-select-panel .mat-optgroup';\n        return MatSelectOptionGroupHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Harness for interacting with a standard mat-select in tests. */\n    var MatSelectHarness = /** @class */ (function (_super) {\n        tslib.__extends(MatSelectHarness, _super);\n        function MatSelectHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._documentRootLocator = _this.documentRootLocatorFactory();\n            _this._backdrop = _this._documentRootLocator.locatorFor('.cdk-overlay-backdrop');\n            _this._optionalPanel = _this._documentRootLocator.locatorForOptional('.mat-select-panel');\n            _this._trigger = _this.locatorFor('.mat-select-trigger');\n            _this._value = _this.locatorFor('.mat-select-value');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a `MatSelectHarness` that meets\n         * certain criteria.\n         * @param options Options for filtering which select instances are considered a match.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSelectHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSelectHarness, options);\n        };\n        /** Gets a boolean promise indicating if the select is disabled. */\n        MatSelectHarness.prototype.isDisabled = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-select-disabled')];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is valid. */\n        MatSelectHarness.prototype.isValid = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [4 /*yield*/, (_a.sent()).hasClass('ng-invalid')];\n                        case 2: return [2 /*return*/, !(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is required. */\n        MatSelectHarness.prototype.isRequired = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-select-required')];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is empty (no value is selected). */\n        MatSelectHarness.prototype.isEmpty = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).hasClass('mat-select-empty')];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the select is in multi-selection mode. */\n        MatSelectHarness.prototype.isMultiple = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var ariaMultiselectable;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            ariaMultiselectable = (_a.sent()).getAttribute('aria-multiselectable');\n                            return [4 /*yield*/, ariaMultiselectable];\n                        case 2: return [2 /*return*/, (_a.sent()) === 'true'];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the select's value text. */\n        MatSelectHarness.prototype.getValueText = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._value()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the select and returns a void promise that indicates when the action is complete. */\n        MatSelectHarness.prototype.focus = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the select and returns a void promise that indicates when the action is complete. */\n        MatSelectHarness.prototype.blur = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /** Gets the options inside the select panel. */\n        MatSelectHarness.prototype.getOptions = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._documentRootLocator.locatorForAll(MatSelectOptionHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets the groups of options inside the panel. */\n        MatSelectHarness.prototype.getOptionGroups = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this._documentRootLocator.locatorForAll(MatSelectOptionGroupHarness.with(filter))()];\n                });\n            });\n        };\n        /** Gets whether the select is open. */\n        MatSelectHarness.prototype.isOpen = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._optionalPanel()];\n                        case 1: return [2 /*return*/, !!(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Opens the select's panel. */\n        MatSelectHarness.prototype.open = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isOpen()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this._trigger()];\n                        case 2: return [2 /*return*/, (_a.sent()).click()];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Clicks the options that match the passed-in filter. If the select is in multi-selection\n         * mode all options will be clicked, otherwise the harness will pick the first matching option.\n         */\n        MatSelectHarness.prototype.clickOptions = function (filter) {\n            if (filter === void 0) { filter = {}; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, isMultiple, options;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this.open()];\n                        case 1:\n                            _b.sent();\n                            return [4 /*yield*/, Promise.all([this.isMultiple(), this.getOptions(filter)])];\n                        case 2:\n                            _a = tslib.__read.apply(void 0, [_b.sent(), 2]), isMultiple = _a[0], options = _a[1];\n                            if (options.length === 0) {\n                                throw Error('Select does not have options matching the specified filter');\n                            }\n                            if (!isMultiple) return [3 /*break*/, 4];\n                            return [4 /*yield*/, Promise.all(options.map(function (option) { return option.click(); }))];\n                        case 3:\n                            _b.sent();\n                            return [3 /*break*/, 6];\n                        case 4: return [4 /*yield*/, options[0].click()];\n                        case 5:\n                            _b.sent();\n                            _b.label = 6;\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /** Closes the select's panel. */\n        MatSelectHarness.prototype.close = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isOpen()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this._backdrop()];\n                        case 2: \n                        // This is the most consistent way that works both in both single and multi-select modes,\n                        // but it assumes that only one overlay is open at a time. We should be able to make it\n                        // a bit more precise after #16645 where we can dispatch an ESCAPE press to the host instead.\n                        return [2 /*return*/, (_a.sent()).click()];\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        MatSelectHarness.hostSelector = '.mat-select';\n        return MatSelectHarness;\n    }(control.MatFormFieldControlHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSelectHarness = MatSelectHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-select-testing.umd.js.map\n"]}
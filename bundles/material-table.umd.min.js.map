{"version":3,"sources":["src/material/material-table.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","table","core","tslib","cdk","common","coercion","rxjs","operators","this","tslib_1","core$1","MatTable","_super","_this","apply","arguments","stickyCssClass","__extends","decorators","type","Component","args","moduleId","id","selector","exportAs","template","CDK_TABLE_TEMPLATE","host","class","providers","provide","CdkTable","useExisting","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","Default","styles","MatCellDef","Directive","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","propDecorators","name","Input","sticky","stickyEnd","MatHeaderCell","columnDef","elementRef","call","nativeElement","classList","add","cssClassFriendlyName","role","ctorParameters","ElementRef","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","inputs","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","MatTextColumn","CdkTextColumn","EXPORTED_DECLARATIONS","MatTableModule","NgModule","imports","CdkTableModule","CommonModule","MatCommonModule","declarations","MAX_SAFE_INTEGER","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","_internalPageChanges","Subject","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","data","sortHeaderId","value","_isNumberValue","numberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","filter","dataStr","Object","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","trim","indexOf","_data","_updateChangeSubscription","defineProperty","prototype","get","set","next","enumerable","configurable","_sort","_paginator","paginator","sortChange","merge","initialized","of","pageChange","page","filteredData","combineLatest","pipe","map","_a","_b","__read","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","subscribe","obj","_updatePaginator","length","slice","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect","DataSource"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tslib'), require('@angular/cdk/table'), require('@angular/common'), require('@angular/material/core'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/table', ['exports', '@angular/core', 'tslib', '@angular/cdk/table', '@angular/common', '@angular/material/core', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.table = {}), global.ng.core, global.tslib, global.ng.cdk.table, global.ng.common, global.ng.material.core, global.ng.cdk.coercion, global.rxjs, global.rxjs.operators));\n}(this, function (exports, core, tslib_1, table, common, core$1, coercion, rxjs, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wrapper for the CdkTable with Material design styles.\n     */\n    var MatTable = /** @class */ (function (_super) {\n        tslib_1.__extends(MatTable, _super);\n        function MatTable() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Overrides the sticky CSS class set by the `CdkTable`. */\n            _this.stickyCssClass = 'mat-table-sticky';\n            return _this;\n        }\n        MatTable.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-table, table[mat-table]',\n                        exportAs: 'matTable',\n                        template: table.CDK_TABLE_TEMPLATE,\n                        host: {\n                            'class': 'mat-table',\n                        },\n                        providers: [{ provide: table.CdkTable, useExisting: MatTable }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type,[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type{padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type,[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type{padding-right:0;padding-left:24px}\\n\"]\n                    }] }\n        ];\n        return MatTable;\n    }(table.CdkTable));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Cell definition for the mat-table.\n     * Captures the template of a column's data row cell as well as cell-specific properties.\n     */\n    var MatCellDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatCellDef, _super);\n        function MatCellDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatCellDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matCellDef]',\n                        providers: [{ provide: table.CdkCellDef, useExisting: MatCellDef }]\n                    },] }\n        ];\n        return MatCellDef;\n    }(table.CdkCellDef));\n    /**\n     * Header cell definition for the mat-table.\n     * Captures the template of a column's header cell and as well as cell-specific properties.\n     */\n    var MatHeaderCellDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatHeaderCellDef, _super);\n        function MatHeaderCellDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatHeaderCellDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matHeaderCellDef]',\n                        providers: [{ provide: table.CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n                    },] }\n        ];\n        return MatHeaderCellDef;\n    }(table.CdkHeaderCellDef));\n    /**\n     * Footer cell definition for the mat-table.\n     * Captures the template of a column's footer cell and as well as cell-specific properties.\n     */\n    var MatFooterCellDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatFooterCellDef, _super);\n        function MatFooterCellDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatFooterCellDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matFooterCellDef]',\n                        providers: [{ provide: table.CdkFooterCellDef, useExisting: MatFooterCellDef }]\n                    },] }\n        ];\n        return MatFooterCellDef;\n    }(table.CdkFooterCellDef));\n    /**\n     * Column definition for the mat-table.\n     * Defines a set of cells available for a table column.\n     */\n    var MatColumnDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatColumnDef, _super);\n        function MatColumnDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatColumnDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matColumnDef]',\n                        providers: [\n                            { provide: table.CdkColumnDef, useExisting: MatColumnDef },\n                            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                        ],\n                    },] }\n        ];\n        MatColumnDef.propDecorators = {\n            name: [{ type: core.Input, args: ['matColumnDef',] }],\n            sticky: [{ type: core.Input }],\n            stickyEnd: [{ type: core.Input }]\n        };\n        return MatColumnDef;\n    }(table.CdkColumnDef));\n    /** Header cell template container that adds the right classes and role. */\n    var MatHeaderCell = /** @class */ (function (_super) {\n        tslib_1.__extends(MatHeaderCell, _super);\n        function MatHeaderCell(columnDef, elementRef) {\n            var _this = _super.call(this, columnDef, elementRef) || this;\n            elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n            return _this;\n        }\n        MatHeaderCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-header-cell, th[mat-header-cell]',\n                        host: {\n                            'class': 'mat-header-cell',\n                            'role': 'columnheader',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatHeaderCell.ctorParameters = function () { return [\n            { type: table.CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return MatHeaderCell;\n    }(table.CdkHeaderCell));\n    /** Footer cell template container that adds the right classes and role. */\n    var MatFooterCell = /** @class */ (function (_super) {\n        tslib_1.__extends(MatFooterCell, _super);\n        function MatFooterCell(columnDef, elementRef) {\n            var _this = _super.call(this, columnDef, elementRef) || this;\n            elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n            return _this;\n        }\n        MatFooterCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-footer-cell, td[mat-footer-cell]',\n                        host: {\n                            'class': 'mat-footer-cell',\n                            'role': 'gridcell',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatFooterCell.ctorParameters = function () { return [\n            { type: table.CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return MatFooterCell;\n    }(table.CdkFooterCell));\n    /** Cell template container that adds the right classes and role. */\n    var MatCell = /** @class */ (function (_super) {\n        tslib_1.__extends(MatCell, _super);\n        function MatCell(columnDef, elementRef) {\n            var _this = _super.call(this, columnDef, elementRef) || this;\n            elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n            return _this;\n        }\n        MatCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-cell, td[mat-cell]',\n                        host: {\n                            'class': 'mat-cell',\n                            'role': 'gridcell',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatCell.ctorParameters = function () { return [\n            { type: table.CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return MatCell;\n    }(table.CdkCell));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Header row definition for the mat-table.\n     * Captures the header row's template and other header properties such as the columns to display.\n     */\n    var MatHeaderRowDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatHeaderRowDef, _super);\n        function MatHeaderRowDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatHeaderRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matHeaderRowDef]',\n                        providers: [{ provide: table.CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                        inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                    },] }\n        ];\n        return MatHeaderRowDef;\n    }(table.CdkHeaderRowDef));\n    /**\n     * Footer row definition for the mat-table.\n     * Captures the footer row's template and other footer properties such as the columns to display.\n     */\n    var MatFooterRowDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatFooterRowDef, _super);\n        function MatFooterRowDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatFooterRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matFooterRowDef]',\n                        providers: [{ provide: table.CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                        inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                    },] }\n        ];\n        return MatFooterRowDef;\n    }(table.CdkFooterRowDef));\n    /**\n     * Data row definition for the mat-table.\n     * Captures the data row's template and other properties such as the columns to display and\n     * a when predicate that describes when this row should be used.\n     */\n    var MatRowDef = /** @class */ (function (_super) {\n        tslib_1.__extends(MatRowDef, _super);\n        function MatRowDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matRowDef]',\n                        providers: [{ provide: table.CdkRowDef, useExisting: MatRowDef }],\n                        inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                    },] }\n        ];\n        return MatRowDef;\n    }(table.CdkRowDef));\n    /** Footer template container that contains the cell outlet. Adds the right class and role. */\n    var MatHeaderRow = /** @class */ (function (_super) {\n        tslib_1.__extends(MatHeaderRow, _super);\n        function MatHeaderRow() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatHeaderRow.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-header-row, tr[mat-header-row]',\n                        template: table.CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'mat-header-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matHeaderRow',\n                        providers: [{ provide: table.CdkHeaderRow, useExisting: MatHeaderRow }]\n                    }] }\n        ];\n        return MatHeaderRow;\n    }(table.CdkHeaderRow));\n    /** Footer template container that contains the cell outlet. Adds the right class and role. */\n    var MatFooterRow = /** @class */ (function (_super) {\n        tslib_1.__extends(MatFooterRow, _super);\n        function MatFooterRow() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatFooterRow.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-footer-row, tr[mat-footer-row]',\n                        template: table.CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'mat-footer-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matFooterRow',\n                        providers: [{ provide: table.CdkFooterRow, useExisting: MatFooterRow }]\n                    }] }\n        ];\n        return MatFooterRow;\n    }(table.CdkFooterRow));\n    /** Data row template container that contains the cell outlet. Adds the right class and role. */\n    var MatRow = /** @class */ (function (_super) {\n        tslib_1.__extends(MatRow, _super);\n        function MatRow() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatRow.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-row, tr[mat-row]',\n                        template: table.CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'mat-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matRow',\n                        providers: [{ provide: table.CdkRow, useExisting: MatRow }]\n                    }] }\n        ];\n        return MatRow;\n    }(table.CdkRow));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Column that simply shows text content for the header and row cells. Assumes that the table\n     * is using the native table implementation (`<table>`).\n     *\n     * By default, the name of this column will be the header text and data property accessor.\n     * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n     * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n     * input.\n     */\n    var MatTextColumn = /** @class */ (function (_super) {\n        tslib_1.__extends(MatTextColumn, _super);\n        function MatTextColumn() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTextColumn.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-text-column',\n                        template: \"\\n    <ng-container matColumnDef>\\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td mat-cell *matCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n                        encapsulation: core.ViewEncapsulation.None,\n                        // Change detection is intentionally not set to OnPush. This component's template will be provided\n                        // to the table to be inserted into its view. This is problematic when change detection runs since\n                        // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                        // mean's the template in the table's view will not have the updated value (and in fact will cause\n                        // an ExpressionChangedAfterItHasBeenCheckedError).\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default\n                    }] }\n        ];\n        return MatTextColumn;\n    }(table.CdkTextColumn));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [\n        // Table\n        MatTable,\n        // Template defs\n        MatHeaderCellDef,\n        MatHeaderRowDef,\n        MatColumnDef,\n        MatCellDef,\n        MatRowDef,\n        MatFooterCellDef,\n        MatFooterRowDef,\n        // Cell directives\n        MatHeaderCell,\n        MatCell,\n        MatFooterCell,\n        // Row directives\n        MatHeaderRow,\n        MatRow,\n        MatFooterRow,\n        MatTextColumn,\n    ];\n    var MatTableModule = /** @class */ (function () {\n        function MatTableModule() {\n        }\n        MatTableModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            table.CdkTableModule,\n                            common.CommonModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS,\n                    },] }\n        ];\n        return MatTableModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n     * flaky browser support and the value not being defined in Closure's typings.\n     */\n    var MAX_SAFE_INTEGER = 9007199254740991;\n    /**\n     * Data source that accepts a client-side data array and includes native support of filtering,\n     * sorting (using MatSort), and pagination (using MatPaginator).\n     *\n     * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n     * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n     * which defines how row data is converted to a string for filter matching.\n     *\n     * **Note:** This class is meant to be a simple data source to help you get started. As such\n     * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n     * interactions. If your app needs to support more advanced use cases, consider implementing your\n     * own `DataSource`.\n     */\n    var MatTableDataSource = /** @class */ (function (_super) {\n        tslib_1.__extends(MatTableDataSource, _super);\n        function MatTableDataSource(initialData) {\n            if (initialData === void 0) { initialData = []; }\n            var _this = _super.call(this) || this;\n            /** Stream emitting render data to the table (depends on ordered data changes). */\n            _this._renderData = new rxjs.BehaviorSubject([]);\n            /** Stream that emits when a new filter string is set on the data source. */\n            _this._filter = new rxjs.BehaviorSubject('');\n            /** Used to react to internal changes of the paginator that are made by the data source itself. */\n            _this._internalPageChanges = new rxjs.Subject();\n            /**\n             * Subscription to the changes that should trigger an update to the table's rendered rows, such\n             * as filtering, sorting, pagination, or base data changes.\n             */\n            _this._renderChangesSubscription = rxjs.Subscription.EMPTY;\n            /**\n             * Data accessor function that is used for accessing data properties for sorting through\n             * the default sortData function.\n             * This default function assumes that the sort header IDs (which defaults to the column name)\n             * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n             * May be set to a custom function for different behavior.\n             * @param data Data object that is being accessed.\n             * @param sortHeaderId The name of the column that represents the data.\n             */\n            _this.sortingDataAccessor = function (data, sortHeaderId) {\n                var value = data[sortHeaderId];\n                if (coercion._isNumberValue(value)) {\n                    var numberValue = Number(value);\n                    // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                    // leave them as strings. For more info: https://goo.gl/y5vbSg\n                    return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n                }\n                return value;\n            };\n            /**\n             * Gets a sorted copy of the data array based on the state of the MatSort. Called\n             * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n             * By default, the function retrieves the active sort and its direction and compares data\n             * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n             * of data ordering.\n             * @param data The array of data that should be sorted.\n             * @param sort The connected MatSort that holds the current sort state.\n             */\n            _this.sortData = function (data, sort) {\n                var active = sort.active;\n                var direction = sort.direction;\n                if (!active || direction == '') {\n                    return data;\n                }\n                return data.sort(function (a, b) {\n                    var valueA = _this.sortingDataAccessor(a, active);\n                    var valueB = _this.sortingDataAccessor(b, active);\n                    // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                    // one value exists while the other doesn't. In this case, existing value should come last.\n                    // This avoids inconsistent results when comparing values to undefined/null.\n                    // If neither value exists, return 0 (equal).\n                    var comparatorResult = 0;\n                    if (valueA != null && valueB != null) {\n                        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                        if (valueA > valueB) {\n                            comparatorResult = 1;\n                        }\n                        else if (valueA < valueB) {\n                            comparatorResult = -1;\n                        }\n                    }\n                    else if (valueA != null) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueB != null) {\n                        comparatorResult = -1;\n                    }\n                    return comparatorResult * (direction == 'asc' ? 1 : -1);\n                });\n            };\n            /**\n             * Checks if a data object matches the data source's filter string. By default, each data object\n             * is converted to a string of its properties and returns true if the filter has\n             * at least one occurrence in that string. By default, the filter string has its whitespace\n             * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n             * filter matching.\n             * @param data Data object used to check against the filter.\n             * @param filter Filter string that has been set on the data source.\n             * @returns Whether the filter matches against the data\n             */\n            _this.filterPredicate = function (data, filter) {\n                // Transform the data into a lowercase string of all property values.\n                var dataStr = Object.keys(data).reduce(function (currentTerm, key) {\n                    // Use an obscure Unicode character to delimit the words in the concatenated string.\n                    // This avoids matches where the values of two columns combined will match the user's query\n                    // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                    // that has a very low chance of being typed in by somebody in a text field. This one in\n                    // particular is \"White up-pointing triangle with dot\" from\n                    // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                    return currentTerm + data[key] + '◬';\n                }, '').toLowerCase();\n                // Transform the filter by converting it to lowercase and removing whitespace.\n                var transformedFilter = filter.trim().toLowerCase();\n                return dataStr.indexOf(transformedFilter) != -1;\n            };\n            _this._data = new rxjs.BehaviorSubject(initialData);\n            _this._updateChangeSubscription();\n            return _this;\n        }\n        Object.defineProperty(MatTableDataSource.prototype, \"data\", {\n            /** Array of data that should be rendered by the table, where each object represents one row. */\n            get: function () { return this._data.value; },\n            set: function (data) { this._data.next(data); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTableDataSource.prototype, \"filter\", {\n            /**\n             * Filter term that should be used to filter out objects from the data array. To override how\n             * data objects match to this filter string, provide a custom function for filterPredicate.\n             */\n            get: function () { return this._filter.value; },\n            set: function (filter) { this._filter.next(filter); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTableDataSource.prototype, \"sort\", {\n            /**\n             * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n             * emitted by the MatSort will trigger an update to the table's rendered data.\n             */\n            get: function () { return this._sort; },\n            set: function (sort) {\n                this._sort = sort;\n                this._updateChangeSubscription();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTableDataSource.prototype, \"paginator\", {\n            /**\n             * Instance of the MatPaginator component used by the table to control what page of the data is\n             * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n             * table's rendered data.\n             *\n             * Note that the data source uses the paginator's properties to calculate which page of data\n             * should be displayed. If the paginator receives its properties as template inputs,\n             * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n             * initialized before assigning it to this data source.\n             */\n            get: function () { return this._paginator; },\n            set: function (paginator) {\n                this._paginator = paginator;\n                this._updateChangeSubscription();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n         * changes occur, process the current state of the filter, sort, and pagination along with\n         * the provided base data and send it to the table for rendering.\n         */\n        MatTableDataSource.prototype._updateChangeSubscription = function () {\n            var _this = this;\n            // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n            // The events should emit whenever the component emits a change or initializes, or if no\n            // component is provided, a stream with just a null event should be provided.\n            // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n            // pipeline can progress to the next step. Note that the value from these streams are not used,\n            // they purely act as a signal to progress in the pipeline.\n            var sortChange = this._sort ?\n                rxjs.merge(this._sort.sortChange, this._sort.initialized) :\n                rxjs.of(null);\n            var pageChange = this._paginator ?\n                rxjs.merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n                rxjs.of(null);\n            var dataStream = this._data;\n            // Watch for base data or filter changes to provide a filtered set of data.\n            var filteredData = rxjs.combineLatest([dataStream, this._filter])\n                .pipe(operators.map(function (_a) {\n                var _b = tslib_1.__read(_a, 1), data = _b[0];\n                return _this._filterData(data);\n            }));\n            // Watch for filtered data or sort changes to provide an ordered set of data.\n            var orderedData = rxjs.combineLatest([filteredData, sortChange])\n                .pipe(operators.map(function (_a) {\n                var _b = tslib_1.__read(_a, 1), data = _b[0];\n                return _this._orderData(data);\n            }));\n            // Watch for ordered data or page changes to provide a paged set of data.\n            var paginatedData = rxjs.combineLatest([orderedData, pageChange])\n                .pipe(operators.map(function (_a) {\n                var _b = tslib_1.__read(_a, 1), data = _b[0];\n                return _this._pageData(data);\n            }));\n            // Watched for paged data changes and send the result to the table to render.\n            this._renderChangesSubscription.unsubscribe();\n            this._renderChangesSubscription = paginatedData.subscribe(function (data) { return _this._renderData.next(data); });\n        };\n        /**\n         * Returns a filtered data array where each filter object contains the filter string within\n         * the result of the filterTermAccessor function. If no filter is set, returns the data array\n         * as provided.\n         */\n        MatTableDataSource.prototype._filterData = function (data) {\n            var _this = this;\n            // If there is a filter string, filter out data that does not contain it.\n            // Each data object is converted to a string using the function defined by filterTermAccessor.\n            // May be overridden for customization.\n            this.filteredData =\n                !this.filter ? data : data.filter(function (obj) { return _this.filterPredicate(obj, _this.filter); });\n            if (this.paginator) {\n                this._updatePaginator(this.filteredData.length);\n            }\n            return this.filteredData;\n        };\n        /**\n         * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n         * data array as provided. Uses the default data accessor for data lookup, unless a\n         * sortDataAccessor function is defined.\n         */\n        MatTableDataSource.prototype._orderData = function (data) {\n            // If there is no active sort or direction, return the data without trying to sort.\n            if (!this.sort) {\n                return data;\n            }\n            return this.sortData(data.slice(), this.sort);\n        };\n        /**\n         * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n         * index and length. If there is no paginator provided, returns the data array as provided.\n         */\n        MatTableDataSource.prototype._pageData = function (data) {\n            if (!this.paginator) {\n                return data;\n            }\n            var startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n            return data.slice(startIndex, startIndex + this.paginator.pageSize);\n        };\n        /**\n         * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n         * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n         * guard against making property changes within a round of change detection.\n         */\n        MatTableDataSource.prototype._updatePaginator = function (filteredDataLength) {\n            var _this = this;\n            Promise.resolve().then(function () {\n                var paginator = _this.paginator;\n                if (!paginator) {\n                    return;\n                }\n                paginator.length = filteredDataLength;\n                // If the page index is set beyond the page, reduce it to the last page.\n                if (paginator.pageIndex > 0) {\n                    var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                    var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                    if (newPageIndex !== paginator.pageIndex) {\n                        paginator.pageIndex = newPageIndex;\n                        // Since the paginator only emits after user-generated changes,\n                        // we need our own stream so we know to should re-render the data.\n                        _this._internalPageChanges.next();\n                    }\n                }\n            });\n        };\n        /**\n         * Used by the MatTable. Called when it connects to the data source.\n         * @docs-private\n         */\n        MatTableDataSource.prototype.connect = function () { return this._renderData; };\n        /**\n         * Used by the MatTable. Called when it is destroyed. No-op.\n         * @docs-private\n         */\n        MatTableDataSource.prototype.disconnect = function () { };\n        return MatTableDataSource;\n    }(table.DataSource));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatTableModule = MatTableModule;\n    exports.MatCellDef = MatCellDef;\n    exports.MatHeaderCellDef = MatHeaderCellDef;\n    exports.MatFooterCellDef = MatFooterCellDef;\n    exports.MatColumnDef = MatColumnDef;\n    exports.MatHeaderCell = MatHeaderCell;\n    exports.MatFooterCell = MatFooterCell;\n    exports.MatCell = MatCell;\n    exports.MatTable = MatTable;\n    exports.MatHeaderRowDef = MatHeaderRowDef;\n    exports.MatFooterRowDef = MatFooterRowDef;\n    exports.MatRowDef = MatRowDef;\n    exports.MatHeaderRow = MatHeaderRow;\n    exports.MatFooterRow = MatFooterRow;\n    exports.MatRow = MatRow;\n    exports.MatTableDataSource = MatTableDataSource;\n    exports.MatTextColumn = MatTextColumn;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-table.umd.js.map\n"]}
{"version":3,"sources":["src/material/material-sidenav.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","sidenav","cdk","platform","scrolling","common","core","tslib","a11y","bidi","coercion","keycodes","rxjs","operators","animations","platformBrowser","this","core$1","tslib_1","animations$1","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","box-shadow","transition","animate","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MatDrawerContent","_super","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","_this","call","__extends","prototype","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","decorators","type","Component","args","moduleId","id","selector","template","host","class","[style.margin-left.px]","[style.margin-right.px]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ctorParameters","ChangeDetectorRef","MatDrawerContainer","Inject","forwardRef","ElementRef","ScrollDispatcher","NgZone","CdkScrollable","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_autoFocus","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_destroyed","onPositionChanged","_modeChanged","_opened","opened","activeElement","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","runOutsideAngular","fromEvent","nativeElement","pipe","filter","event","keyCode","ESCAPE","disableClose","hasModifierKey","takeUntil","run","close","stopPropagation","preventDefault","distinctUntilChanged","x","y","fromState","toState","indexOf","emit","Object","defineProperty","get","set","value","enumerable","configurable","_updateFocusTrapState","next","coerceBooleanProperty","o","map","e","mode","autoFocus","focusInitialElementWhenReady","then","hasMovedFocus","focus","activeEl","contains","HTMLElement","focusVia","_openedVia","blur","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","complete","toggle","open","openedVia","isOpen","Promise","resolve","take","offsetWidth","enabled","_animationStartListener","_animationDoneListener","exportAs","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-push]","[class.mat-drawer-side]","[class.mat-drawer-opened]","tabIndex","FocusTrapFactory","FocusMonitor","Platform","undefined","Optional","DOCUMENT","propDecorators","Input","HostBinding","Output","_openedStream","openedStart","_closedStream","closedStart","HostListener","_dir","_element","viewportRuler","defaultAutosize","_animationMode","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","_start","_end","_backdropOverride","_userContent","_content","_drawers","changes","startWith","forEach","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","debounceTime","_left","_width","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","asObservable","merge","isAdd","className","remove","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","styles","Directionality","ViewportRuler","String","ANIMATION_MODULE_TYPE","ContentChildren","ContentChild","static","ViewChild","autosize","hasBackdrop","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","apply","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","coerceNumberProperty","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","NgModule","imports","CommonModule","MatCommonModule","ScrollingModule","PlatformModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/sidenav', ['exports', '@angular/cdk/platform', '@angular/cdk/scrolling', '@angular/common', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/keycodes', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.sidenav = {}), global.ng.cdk.platform, global.ng.cdk.scrolling, global.ng.common, global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.platformBrowser.animations));\n}(this, function (exports, platform, scrolling, common, core, core$1, tslib_1, a11y, bidi, coercion, keycodes, rxjs, operators, animations, animations$1) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by the Material drawers.\n     * @docs-private\n     */\n    var matDrawerAnimations = {\n        /** Animation that slides a drawer in and out. */\n        transformDrawer: animations.trigger('transform', [\n            // We remove the `transform` here completely, rather than setting it to zero, because:\n            // 1. Having a transform can cause elements with ripples or an animated\n            //    transform to shift around in Chrome with an RTL layout (see #10023).\n            // 2. 3d transforms causes text to appear blurry on IE and Edge.\n            animations.state('open, open-instant', animations.style({\n                'transform': 'none',\n                'visibility': 'visible',\n            })),\n            animations.state('void', animations.style({\n                // Avoids the shadow showing up when closed in SSR.\n                'box-shadow': 'none',\n                'visibility': 'hidden',\n            })),\n            animations.transition('void => open-instant', animations.animate('0ms')),\n            animations.transition('void <=> open, open-instant => void', animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n        ])\n    };\n\n    /**\n     * Throws an exception when two MatDrawer are matching the same position.\n     * @docs-private\n     */\n    function throwMatDuplicatedDrawerError(position) {\n        throw Error(\"A drawer was already declared for 'position=\\\"\" + position + \"\\\"'\");\n    }\n    /** Configures whether drawers should use auto sizing by default. */\n    var MAT_DRAWER_DEFAULT_AUTOSIZE = new core.InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n        providedIn: 'root',\n        factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n    /** @docs-private */\n    function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n        return false;\n    }\n    var MatDrawerContent = /** @class */ (function (_super) {\n        tslib_1.__extends(MatDrawerContent, _super);\n        function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._container = _container;\n            return _this;\n        }\n        MatDrawerContent.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._container._contentMarginChanges.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        MatDrawerContent.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-drawer-content',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-drawer-content',\n                            '[style.margin-left.px]': '_container._contentMargins.left',\n                            '[style.margin-right.px]': '_container._contentMargins.right',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawerContent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: MatDrawerContainer, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return MatDrawerContainer; }),] }] },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.NgZone }\n        ]; };\n        return MatDrawerContent;\n    }(scrolling.CdkScrollable));\n    /**\n     * This component corresponds to a drawer that can be opened on the drawer container.\n     */\n    var MatDrawer = /** @class */ (function () {\n        function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n            var _this = this;\n            this._elementRef = _elementRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            this._focusMonitor = _focusMonitor;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._doc = _doc;\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            /** Whether the drawer is initialized. Used for disabling the initial animation. */\n            this._enableAnimations = false;\n            this._position = 'start';\n            this._mode = 'over';\n            this._disableClose = false;\n            this._autoFocus = true;\n            /** Emits whenever the drawer has started animating. */\n            this._animationStarted = new rxjs.Subject();\n            /** Emits whenever the drawer is done animating. */\n            this._animationEnd = new rxjs.Subject();\n            /** Current state of the sidenav animation. */\n            // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n            // metadata is not inherited by child classes, instead the host binding data is defined in a way\n            // that can be inherited.\n            // tslint:disable:no-host-decorator-in-concrete\n            this._animationState = 'void';\n            /** Event emitted when the drawer open state is changed. */\n            this.openedChange = \n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new core.EventEmitter(/* isAsync */ true);\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Event emitted when the drawer's position changes. */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onPositionChanged = new core.EventEmitter();\n            /**\n             * An observable that emits when the drawer mode changes. This is used by the drawer container to\n             * to know when to when the mode changes so it can adapt the margins on the content.\n             */\n            this._modeChanged = new rxjs.Subject();\n            this._opened = false;\n            this.openedChange.subscribe(function (opened) {\n                if (opened) {\n                    if (_this._doc) {\n                        _this._elementFocusedBeforeDrawerWasOpened = _this._doc.activeElement;\n                    }\n                    if (_this._isFocusTrapEnabled && _this._focusTrap) {\n                        _this._trapFocus();\n                    }\n                }\n                else {\n                    _this._restoreFocus();\n                }\n            });\n            /**\n             * Listen to `keydown` events outside the zone so that change detection is not run every\n             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n             * and we don't have close disabled.\n             */\n            this._ngZone.runOutsideAngular(function () {\n                rxjs.fromEvent(_this._elementRef.nativeElement, 'keydown').pipe(operators.filter(function (event) {\n                    return event.keyCode === keycodes.ESCAPE && !_this.disableClose && !keycodes.hasModifierKey(event);\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (event) { return _this._ngZone.run(function () {\n                    _this.close();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }); });\n            });\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._animationEnd.pipe(operators.distinctUntilChanged(function (x, y) {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(function (event) {\n                var fromState = event.fromState, toState = event.toState;\n                if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                    (toState === 'void' && fromState.indexOf('open') === 0)) {\n                    _this.openedChange.emit(_this._opened);\n                }\n            });\n        }\n        Object.defineProperty(MatDrawer.prototype, \"position\", {\n            /** The side that the drawer is attached to. */\n            get: function () { return this._position; },\n            set: function (value) {\n                // Make sure we have a valid value.\n                value = value === 'end' ? 'end' : 'start';\n                if (value != this._position) {\n                    this._position = value;\n                    this.onPositionChanged.emit();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"mode\", {\n            /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n            get: function () { return this._mode; },\n            set: function (value) {\n                this._mode = value;\n                this._updateFocusTrapState();\n                this._modeChanged.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"disableClose\", {\n            /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n            get: function () { return this._disableClose; },\n            set: function (value) { this._disableClose = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"autoFocus\", {\n            /** Whether the drawer should focus the first focusable element automatically when opened. */\n            get: function () { return this._autoFocus; },\n            set: function (value) { this._autoFocus = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_openedStream\", {\n            /** Event emitted when the drawer has been opened. */\n            get: function () {\n                return this.openedChange.pipe(operators.filter(function (o) { return o; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"openedStart\", {\n            /** Event emitted when the drawer has started opening. */\n            get: function () {\n                return this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_closedStream\", {\n            /** Event emitted when the drawer has been closed. */\n            get: function () {\n                return this.openedChange.pipe(operators.filter(function (o) { return !o; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"closedStart\", {\n            /** Event emitted when the drawer has started closing. */\n            get: function () {\n                return this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState === 'void'; }), operators.map(function () { }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawer.prototype, \"_isFocusTrapEnabled\", {\n            get: function () {\n                // The focus trap is only enabled when the drawer is open in any mode other than side.\n                return this.opened && this.mode !== 'side';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Traps focus inside the drawer. */\n        MatDrawer.prototype._trapFocus = function () {\n            var _this = this;\n            if (!this.autoFocus) {\n                return;\n            }\n            this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n                // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n                // still works. We need to check that `focus` is a function due to Universal.\n                if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {\n                    _this._elementRef.nativeElement.focus();\n                }\n            });\n        };\n        /**\n         * If focus is currently inside the drawer, restores it to where it was before the drawer\n         * opened.\n         */\n        MatDrawer.prototype._restoreFocus = function () {\n            if (!this.autoFocus) {\n                return;\n            }\n            var activeEl = this._doc && this._doc.activeElement;\n            if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n                if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                    this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n                }\n                else {\n                    this._elementRef.nativeElement.blur();\n                }\n            }\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            this._openedVia = null;\n        };\n        MatDrawer.prototype.ngAfterContentInit = function () {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        };\n        MatDrawer.prototype.ngAfterContentChecked = function () {\n            // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n            // drawers that are open by default. When we're on the server, we shouldn't enable the\n            // animations, because we don't want the drawer to animate the first time the user sees\n            // the page.\n            if (this._platform.isBrowser) {\n                this._enableAnimations = true;\n            }\n        };\n        MatDrawer.prototype.ngOnDestroy = function () {\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n            this._animationStarted.complete();\n            this._animationEnd.complete();\n            this._modeChanged.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        Object.defineProperty(MatDrawer.prototype, \"opened\", {\n            /**\n             * Whether the drawer is opened. We overload this because we trigger an event when it\n             * starts or end.\n             */\n            get: function () { return this._opened; },\n            set: function (value) { this.toggle(coercion.coerceBooleanProperty(value)); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Open the drawer.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        MatDrawer.prototype.open = function (openedVia) {\n            return this.toggle(true, openedVia);\n        };\n        /** Close the drawer. */\n        MatDrawer.prototype.close = function () {\n            return this.toggle(false);\n        };\n        /**\n         * Toggle this drawer.\n         * @param isOpen Whether the drawer should be open.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        MatDrawer.prototype.toggle = function (isOpen, openedVia) {\n            var _this = this;\n            if (isOpen === void 0) { isOpen = !this.opened; }\n            if (openedVia === void 0) { openedVia = 'program'; }\n            this._opened = isOpen;\n            if (isOpen) {\n                this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n                this._openedVia = openedVia;\n            }\n            else {\n                this._animationState = 'void';\n                this._restoreFocus();\n            }\n            this._updateFocusTrapState();\n            return new Promise(function (resolve) {\n                _this.openedChange.pipe(operators.take(1)).subscribe(function (open) { return resolve(open ? 'open' : 'close'); });\n            });\n        };\n        Object.defineProperty(MatDrawer.prototype, \"_width\", {\n            get: function () {\n                return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Updates the enabled state of the focus trap. */\n        MatDrawer.prototype._updateFocusTrapState = function () {\n            if (this._focusTrap) {\n                this._focusTrap.enabled = this._isFocusTrapEnabled;\n            }\n        };\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatDrawer.prototype._animationStartListener = function (event) {\n            this._animationStarted.next(event);\n        };\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        MatDrawer.prototype._animationDoneListener = function (event) {\n            this._animationEnd.next(event);\n        };\n        MatDrawer.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-drawer',\n                        exportAs: 'matDrawer',\n                        template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                        animations: [matDrawerAnimations.transformDrawer],\n                        host: {\n                            'class': 'mat-drawer',\n                            // must prevent the browser from aligning text based on value\n                            '[attr.align]': 'null',\n                            '[class.mat-drawer-end]': 'position === \"end\"',\n                            '[class.mat-drawer-over]': 'mode === \"over\"',\n                            '[class.mat-drawer-push]': 'mode === \"push\"',\n                            '[class.mat-drawer-side]': 'mode === \"side\"',\n                            '[class.mat-drawer-opened]': 'opened',\n                            'tabIndex': '-1',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: a11y.FocusTrapFactory },\n            { type: a11y.FocusMonitor },\n            { type: platform.Platform },\n            { type: core.NgZone },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        MatDrawer.propDecorators = {\n            position: [{ type: core.Input }],\n            mode: [{ type: core.Input }],\n            disableClose: [{ type: core.Input }],\n            autoFocus: [{ type: core.Input }],\n            _animationState: [{ type: core.HostBinding, args: ['@transform',] }],\n            openedChange: [{ type: core.Output }],\n            _openedStream: [{ type: core.Output, args: ['opened',] }],\n            openedStart: [{ type: core.Output }],\n            _closedStream: [{ type: core.Output, args: ['closed',] }],\n            closedStart: [{ type: core.Output }],\n            onPositionChanged: [{ type: core.Output, args: ['positionChanged',] }],\n            opened: [{ type: core.Input }],\n            _animationStartListener: [{ type: core.HostListener, args: ['@transform.start', ['$event'],] }],\n            _animationDoneListener: [{ type: core.HostListener, args: ['@transform.done', ['$event'],] }]\n        };\n        return MatDrawer;\n    }());\n    /**\n     * `<mat-drawer-container>` component.\n     *\n     * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n     * and coordinates the backdrop and content styling.\n     */\n    var MatDrawerContainer = /** @class */ (function () {\n        function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize, _animationMode) {\n            var _this = this;\n            if (defaultAutosize === void 0) { defaultAutosize = false; }\n            this._dir = _dir;\n            this._element = _element;\n            this._ngZone = _ngZone;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            /** Event emitted when the drawer backdrop is clicked. */\n            this.backdropClick = new core.EventEmitter();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Emits on every ngDoCheck. Used for debouncing reflows. */\n            this._doCheckSubject = new rxjs.Subject();\n            /**\n             * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n             * drawer is open. We use margin rather than transform even for push mode because transform breaks\n             * fixed position elements inside of the transformed element.\n             */\n            this._contentMargins = { left: null, right: null };\n            this._contentMarginChanges = new rxjs.Subject();\n            // If a `Dir` directive exists up the tree, listen direction changes\n            // and update the left/right properties to point to the proper start/end.\n            if (_dir) {\n                _dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                    _this._validateDrawers();\n                    _this.updateContentMargins();\n                });\n            }\n            // Since the minimum width of the sidenav depends on the viewport width,\n            // we need to recompute the margins if the viewport changes.\n            viewportRuler.change()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this.updateContentMargins(); });\n            this._autosize = defaultAutosize;\n        }\n        Object.defineProperty(MatDrawerContainer.prototype, \"start\", {\n            /** The drawer child with the `start` position. */\n            get: function () { return this._start; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"end\", {\n            /** The drawer child with the `end` position. */\n            get: function () { return this._end; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"autosize\", {\n            /**\n             * Whether to automatically resize the container whenever\n             * the size of any of its drawers changes.\n             *\n             * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n             * the drawers on every change detection cycle. Can be configured globally via the\n             * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n             */\n            get: function () { return this._autosize; },\n            set: function (value) { this._autosize = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"hasBackdrop\", {\n            /**\n             * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n             * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n             * mode as well.\n             */\n            get: function () {\n                if (this._backdropOverride == null) {\n                    return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n                }\n                return this._backdropOverride;\n            },\n            set: function (value) {\n                this._backdropOverride = value == null ? null : coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDrawerContainer.prototype, \"scrollable\", {\n            /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n            get: function () {\n                return this._userContent || this._content;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatDrawerContainer.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._drawers.changes.pipe(operators.startWith(null)).subscribe(function () {\n                _this._validateDrawers();\n                _this._drawers.forEach(function (drawer) {\n                    _this._watchDrawerToggle(drawer);\n                    _this._watchDrawerPosition(drawer);\n                    _this._watchDrawerMode(drawer);\n                });\n                if (!_this._drawers.length ||\n                    _this._isDrawerOpen(_this._start) ||\n                    _this._isDrawerOpen(_this._end)) {\n                    _this.updateContentMargins();\n                }\n                _this._changeDetectorRef.markForCheck();\n            });\n            this._doCheckSubject.pipe(operators.debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            operators.takeUntil(this._destroyed)).subscribe(function () { return _this.updateContentMargins(); });\n        };\n        MatDrawerContainer.prototype.ngOnDestroy = function () {\n            this._contentMarginChanges.complete();\n            this._doCheckSubject.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Calls `open` of both start and end drawers */\n        MatDrawerContainer.prototype.open = function () {\n            this._drawers.forEach(function (drawer) { return drawer.open(); });\n        };\n        /** Calls `close` of both start and end drawers */\n        MatDrawerContainer.prototype.close = function () {\n            this._drawers.forEach(function (drawer) { return drawer.close(); });\n        };\n        /**\n         * Recalculates and updates the inline styles for the content. Note that this should be used\n         * sparingly, because it causes a reflow.\n         */\n        MatDrawerContainer.prototype.updateContentMargins = function () {\n            var _this = this;\n            // 1. For drawers in `over` mode, they don't affect the content.\n            // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n            //    left margin (for left drawer) or right margin (for right the drawer).\n            // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n            //    adding to the left or right margin and simultaneously subtracting the same amount of\n            //    margin from the other side.\n            var left = 0;\n            var right = 0;\n            if (this._left && this._left.opened) {\n                if (this._left.mode == 'side') {\n                    left += this._left._width;\n                }\n                else if (this._left.mode == 'push') {\n                    var width = this._left._width;\n                    left += width;\n                    right -= width;\n                }\n            }\n            if (this._right && this._right.opened) {\n                if (this._right.mode == 'side') {\n                    right += this._right._width;\n                }\n                else if (this._right.mode == 'push') {\n                    var width = this._right._width;\n                    right += width;\n                    left -= width;\n                }\n            }\n            // If either `right` or `left` is zero, don't set a style to the element. This\n            // allows users to specify a custom size via CSS class in SSR scenarios where the\n            // measured widths will always be zero. Note that we reset to `null` here, rather\n            // than below, in order to ensure that the types in the `if` below are consistent.\n            left = left || null;\n            right = right || null;\n            if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n                this._contentMargins = { left: left, right: right };\n                // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n                // to do it only when something changed, otherwise we can end up hitting the zone too often.\n                this._ngZone.run(function () { return _this._contentMarginChanges.next(_this._contentMargins); });\n            }\n        };\n        MatDrawerContainer.prototype.ngDoCheck = function () {\n            var _this = this;\n            // If users opted into autosizing, do a check every change detection cycle.\n            if (this._autosize && this._isPushed()) {\n                // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n                this._ngZone.runOutsideAngular(function () { return _this._doCheckSubject.next(); });\n            }\n        };\n        /**\n         * Subscribes to drawer events in order to set a class on the main container element when the\n         * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n         * is properly hidden.\n         */\n        MatDrawerContainer.prototype._watchDrawerToggle = function (drawer) {\n            var _this = this;\n            drawer._animationStarted.pipe(operators.filter(function (event) { return event.fromState !== event.toState; }), operators.takeUntil(this._drawers.changes))\n                .subscribe(function (event) {\n                // Set the transition class on the container so that the animations occur. This should not\n                // be set initially because animations should only be triggered via a change in state.\n                if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {\n                    _this._element.nativeElement.classList.add('mat-drawer-transition');\n                }\n                _this.updateContentMargins();\n                _this._changeDetectorRef.markForCheck();\n            });\n            if (drawer.mode !== 'side') {\n                drawer.openedChange.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {\n                    return _this._setContainerClass(drawer.opened);\n                });\n            }\n        };\n        /**\n         * Subscribes to drawer onPositionChanged event in order to\n         * re-validate drawers when the position changes.\n         */\n        MatDrawerContainer.prototype._watchDrawerPosition = function (drawer) {\n            var _this = this;\n            if (!drawer) {\n                return;\n            }\n            // NOTE: We need to wait for the microtask queue to be empty before validating,\n            // since both drawers may be swapping positions at the same time.\n            drawer.onPositionChanged.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {\n                _this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1)).subscribe(function () {\n                    _this._validateDrawers();\n                });\n            });\n        };\n        /** Subscribes to changes in drawer mode so we can run change detection. */\n        MatDrawerContainer.prototype._watchDrawerMode = function (drawer) {\n            var _this = this;\n            if (drawer) {\n                drawer._modeChanged.pipe(operators.takeUntil(rxjs.merge(this._drawers.changes, this._destroyed)))\n                    .subscribe(function () {\n                    _this.updateContentMargins();\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n        MatDrawerContainer.prototype._setContainerClass = function (isAdd) {\n            var classList = this._element.nativeElement.classList;\n            var className = 'mat-drawer-container-has-open';\n            if (isAdd) {\n                classList.add(className);\n            }\n            else {\n                classList.remove(className);\n            }\n        };\n        /** Validate the state of the drawer children components. */\n        MatDrawerContainer.prototype._validateDrawers = function () {\n            var _this = this;\n            this._start = this._end = null;\n            // Ensure that we have at most one start and one end drawer.\n            this._drawers.forEach(function (drawer) {\n                if (drawer.position == 'end') {\n                    if (_this._end != null) {\n                        throwMatDuplicatedDrawerError('end');\n                    }\n                    _this._end = drawer;\n                }\n                else {\n                    if (_this._start != null) {\n                        throwMatDuplicatedDrawerError('start');\n                    }\n                    _this._start = drawer;\n                }\n            });\n            this._right = this._left = null;\n            // Detect if we're LTR or RTL.\n            if (this._dir && this._dir.value === 'rtl') {\n                this._left = this._end;\n                this._right = this._start;\n            }\n            else {\n                this._left = this._start;\n                this._right = this._end;\n            }\n        };\n        /** Whether the container is being pushed to the side by one of the drawers. */\n        MatDrawerContainer.prototype._isPushed = function () {\n            return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n                (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n        };\n        MatDrawerContainer.prototype._onBackdropClicked = function () {\n            this.backdropClick.emit();\n            this._closeModalDrawer();\n        };\n        MatDrawerContainer.prototype._closeModalDrawer = function () {\n            var _this = this;\n            // Close all open drawers where closing is not disabled and the mode is not `side`.\n            [this._start, this._end]\n                .filter(function (drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); })\n                .forEach(function (drawer) { return drawer.close(); });\n        };\n        MatDrawerContainer.prototype._isShowingBackdrop = function () {\n            return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n        };\n        MatDrawerContainer.prototype._canHaveBackdrop = function (drawer) {\n            return drawer.mode !== 'side' || !!this._backdropOverride;\n        };\n        MatDrawerContainer.prototype._isDrawerOpen = function (drawer) {\n            return drawer != null && drawer.opened;\n        };\n        MatDrawerContainer.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-drawer-container',\n                        exportAs: 'matDrawerContainer',\n                        template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                        host: {\n                            'class': 'mat-drawer-container',\n                            '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(-ms-high-contrast: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(-ms-high-contrast: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(-ms-high-contrast: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}/*# sourceMappingURL=drawer.css.map */\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDrawerContainer.ctorParameters = function () { return [\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: core.ChangeDetectorRef },\n            { type: scrolling.ViewportRuler },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatDrawerContainer.propDecorators = {\n            _drawers: [{ type: core.ContentChildren, args: [MatDrawer,] }],\n            _content: [{ type: core.ContentChild, args: [MatDrawerContent, { static: false },] }],\n            _userContent: [{ type: core.ViewChild, args: [MatDrawerContent, { static: false },] }],\n            autosize: [{ type: core.Input }],\n            hasBackdrop: [{ type: core.Input }],\n            backdropClick: [{ type: core.Output }]\n        };\n        return MatDrawerContainer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSidenavContent = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSidenavContent, _super);\n        function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n            return _super.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) || this;\n        }\n        MatSidenavContent.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-sidenav-content',\n                        template: '<ng-content></ng-content>',\n                        host: {\n                            'class': 'mat-drawer-content mat-sidenav-content',\n                            '[style.margin-left.px]': '_container._contentMargins.left',\n                            '[style.margin-right.px]': '_container._contentMargins.right',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSidenavContent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: MatSidenavContainer, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return MatSidenavContainer; }),] }] },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.NgZone }\n        ]; };\n        return MatSidenavContent;\n    }(MatDrawerContent));\n    var MatSidenav = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSidenav, _super);\n        function MatSidenav() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._fixedInViewport = false;\n            _this._fixedTopGap = 0;\n            _this._fixedBottomGap = 0;\n            return _this;\n        }\n        Object.defineProperty(MatSidenav.prototype, \"fixedInViewport\", {\n            /** Whether the sidenav is fixed in the viewport. */\n            get: function () { return this._fixedInViewport; },\n            set: function (value) { this._fixedInViewport = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSidenav.prototype, \"fixedTopGap\", {\n            /**\n             * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n             * mode.\n             */\n            get: function () { return this._fixedTopGap; },\n            set: function (value) { this._fixedTopGap = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSidenav.prototype, \"fixedBottomGap\", {\n            /**\n             * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n             * fixed mode.\n             */\n            get: function () { return this._fixedBottomGap; },\n            set: function (value) { this._fixedBottomGap = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatSidenav.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-sidenav',\n                        exportAs: 'matSidenav',\n                        template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                        animations: [matDrawerAnimations.transformDrawer],\n                        host: {\n                            'class': 'mat-drawer mat-sidenav',\n                            'tabIndex': '-1',\n                            // must prevent the browser from aligning text based on value\n                            '[attr.align]': 'null',\n                            '[class.mat-drawer-end]': 'position === \"end\"',\n                            '[class.mat-drawer-over]': 'mode === \"over\"',\n                            '[class.mat-drawer-push]': 'mode === \"push\"',\n                            '[class.mat-drawer-side]': 'mode === \"side\"',\n                            '[class.mat-drawer-opened]': 'opened',\n                            '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                            '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                            '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        MatSidenav.propDecorators = {\n            fixedInViewport: [{ type: core.Input }],\n            fixedTopGap: [{ type: core.Input }],\n            fixedBottomGap: [{ type: core.Input }]\n        };\n        return MatSidenav;\n    }(MatDrawer));\n    var MatSidenavContainer = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSidenavContainer, _super);\n        function MatSidenavContainer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatSidenavContainer.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-sidenav-container',\n                        exportAs: 'matSidenavContainer',\n                        template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                        host: {\n                            'class': 'mat-drawer-container mat-sidenav-container',\n                            '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(-ms-high-contrast: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(-ms-high-contrast: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(-ms-high-contrast: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}/*# sourceMappingURL=drawer.css.map */\\n\"]\n                    }] }\n        ];\n        MatSidenavContainer.propDecorators = {\n            _drawers: [{ type: core.ContentChildren, args: [MatSidenav,] }],\n            _content: [{ type: core.ContentChild, args: [MatSidenavContent, { static: false },] }]\n        };\n        return MatSidenavContainer;\n    }(MatDrawerContainer));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSidenavModule = /** @class */ (function () {\n        function MatSidenavModule() {\n        }\n        MatSidenavModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            core$1.MatCommonModule,\n                            scrolling.ScrollingModule,\n                            platform.PlatformModule,\n                        ],\n                        exports: [\n                            core$1.MatCommonModule,\n                            MatDrawer,\n                            MatDrawerContainer,\n                            MatDrawerContent,\n                            MatSidenav,\n                            MatSidenavContainer,\n                            MatSidenavContent,\n                        ],\n                        declarations: [\n                            MatDrawer,\n                            MatDrawerContainer,\n                            MatDrawerContent,\n                            MatSidenav,\n                            MatSidenavContainer,\n                            MatSidenavContent,\n                        ],\n                    },] }\n        ];\n        return MatSidenavModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatSidenavModule = MatSidenavModule;\n    exports.throwMatDuplicatedDrawerError = throwMatDuplicatedDrawerError;\n    exports.MAT_DRAWER_DEFAULT_AUTOSIZE = MAT_DRAWER_DEFAULT_AUTOSIZE;\n    exports.MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY = MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY;\n    exports.MatDrawerContent = MatDrawerContent;\n    exports.MatDrawer = MatDrawer;\n    exports.MatDrawerContainer = MatDrawerContainer;\n    exports.MatSidenavContent = MatSidenavContent;\n    exports.MatSidenav = MatSidenav;\n    exports.MatSidenavContainer = MatSidenavContainer;\n    exports.matDrawerAnimations = matDrawerAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-sidenav.umd.js.map\n"]}
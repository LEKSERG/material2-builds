{"version":3,"sources":["src/material/material-slide-toggle-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","slideToggle","testing","tslib","cdk","coercion","this","tslib_1","MatSlideToggleHarness","_super","_this","apply","arguments","_label","locatorFor","_input","_inputContainer","__extends","with","options","HarnessPredicate","addOption","label","harness","stringMatches","getLabelText","prototype","isChecked","__awaiter","checked","_a","__generator","_b","sent","getProperty","coerceBooleanProperty","isDisabled","disabled","getAttribute","isRequired","required","isValid","host","hasClass","getName","getAriaLabel","getAriaLabelledby","text","focus","blur","toggle","click","check","uncheck","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/testing'), require('@angular/cdk/coercion')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/slide-toggle/testing', ['exports', 'tslib', '@angular/cdk/testing', '@angular/cdk/coercion'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.slideToggle = global.ng.material.slideToggle || {}, global.ng.material.slideToggle.testing = {}), global.tslib, global.ng.cdk.testing, global.ng.cdk.coercion));\n}(this, function (exports, tslib_1, testing, coercion) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-slide-toggle in tests.\n     * @dynamic\n     */\n    var MatSlideToggleHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSlideToggleHarness, _super);\n        function MatSlideToggleHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('label');\n            _this._input = _this.locatorFor('input');\n            _this._inputContainer = _this.locatorFor('.mat-slide-toggle-bar');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a slide-toggle w/ specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `selector` finds a slide-toggle whose host element matches the given selector.\n         *   - `label` finds a slide-toggle with specific label text.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatSlideToggleHarness.with = function (options) {\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatSlideToggleHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabelText(), label); });\n        };\n        /** Gets a boolean promise indicating if the slide-toggle is checked. */\n        MatSlideToggleHarness.prototype.isChecked = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            checked = (_b.sent()).getProperty('checked');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the slide-toggle is disabled. */\n        MatSlideToggleHarness.prototype.isDisabled = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the slide-toggle is required. */\n        MatSlideToggleHarness.prototype.isRequired = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var required, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            required = (_b.sent()).getAttribute('required');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, required];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the slide-toggle is valid. */\n        MatSlideToggleHarness.prototype.isValid = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var invalid;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            invalid = (_a.sent()).hasClass('ng-invalid');\n                            return [4 /*yield*/, invalid];\n                        case 2: return [2 /*return*/, !(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the slide-toggle's name. */\n        MatSlideToggleHarness.prototype.getName = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the slide-toggle's aria-label. */\n        MatSlideToggleHarness.prototype.getAriaLabel = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the slide-toggle's aria-labelledby. */\n        MatSlideToggleHarness.prototype.getAriaLabelledby = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the slide-toggle's label text. */\n        MatSlideToggleHarness.prototype.getLabelText = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the slide-toggle and returns a void promise that indicates action completion. */\n        MatSlideToggleHarness.prototype.focus = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the slide-toggle and returns a void promise that indicates action completion. */\n        MatSlideToggleHarness.prototype.blur = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /**\n         * Toggle the checked state of the slide-toggle and returns a void promise that indicates when the\n         * action is complete.\n         *\n         * Note: This toggles the slide-toggle as a user would, by clicking it.\n         */\n        MatSlideToggleHarness.prototype.toggle = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._inputContainer()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the slide-toggle in a checked state by toggling it if it is currently unchecked, or doing\n         * nothing if it is already checked. Returns a void promise that indicates when the action is\n         * complete.\n         *\n         * Note: This attempts to check the slide-toggle as a user would, by clicking it.\n         */\n        MatSlideToggleHarness.prototype.check = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the slide-toggle in an unchecked state by toggling it if it is currently checked, or doing\n         * nothing if it is already unchecked. Returns a void promise that indicates when the action is\n         * complete.\n         *\n         * Note: This toggles the slide-toggle as a user would, by clicking it.\n         */\n        MatSlideToggleHarness.prototype.uncheck = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        MatSlideToggleHarness.hostSelector = 'mat-slide-toggle';\n        return MatSlideToggleHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatSlideToggleHarness = MatSlideToggleHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-slide-toggle-testing.umd.js.map\n"]}
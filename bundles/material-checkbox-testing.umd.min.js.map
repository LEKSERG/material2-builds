{"version":3,"sources":["src/material/material-checkbox-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","checkbox","testing","tslib","cdk","coercion","this","tslib_1","MatCheckboxHarness","_super","_this","apply","arguments","_label","locatorFor","_input","_inputContainer","__extends","with","options","HarnessPredicate","addOption","label","harness","stringMatches","getLabelText","name","__awaiter","__generator","_a","getName","sent","prototype","isChecked","checked","_b","getProperty","coerceBooleanProperty","isIndeterminate","indeterminate","isDisabled","disabled","getAttribute","isRequired","required","isValid","host","hasClass","getValue","getAriaLabel","getAriaLabelledby","text","focus","blur","toggle","click","check","uncheck","hostSelector","ComponentHarness","Object","defineProperty","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/coercion'), require('@angular/cdk/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/checkbox/testing', ['exports', 'tslib', '@angular/cdk/coercion', '@angular/cdk/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.checkbox = global.ng.material.checkbox || {}, global.ng.material.checkbox.testing = {}), global.tslib, global.ng.cdk.coercion, global.ng.cdk.testing));\n}(this, function (exports, tslib_1, coercion, testing) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Harness for interacting with a standard mat-checkbox in tests.\n     * @dynamic\n     */\n    var MatCheckboxHarness = /** @class */ (function (_super) {\n        tslib_1.__extends(MatCheckboxHarness, _super);\n        function MatCheckboxHarness() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._label = _this.locatorFor('.mat-checkbox-label');\n            _this._input = _this.locatorFor('input');\n            _this._inputContainer = _this.locatorFor('.mat-checkbox-inner-container');\n            return _this;\n        }\n        /**\n         * Gets a `HarnessPredicate` that can be used to search for a checkbox with specific attributes.\n         * @param options Options for narrowing the search:\n         *   - `selector` finds a checkbox whose host element matches the given selector.\n         *   - `label` finds a checkbox with specific label text.\n         *   - `name` finds a checkbox with specific name.\n         * @return a `HarnessPredicate` configured with the given options.\n         */\n        MatCheckboxHarness.with = function (options) {\n            var _this = this;\n            if (options === void 0) { options = {}; }\n            return new testing.HarnessPredicate(MatCheckboxHarness, options)\n                .addOption('label', options.label, function (harness, label) { return testing.HarnessPredicate.stringMatches(harness.getLabelText(), label); })\n                // We want to provide a filter option for \"name\" because the name of the checkbox is\n                // only set on the underlying input. This means that it's not possible for developers\n                // to retrieve the harness of a specific checkbox with name through a CSS selector.\n                .addOption('name', options.name, function (harness, name) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, harness.getName()];\n                    case 1: return [2 /*return*/, (_a.sent()) === name];\n                }\n            }); }); });\n        };\n        /** Gets a boolean promise indicating if the checkbox is checked. */\n        MatCheckboxHarness.prototype.isChecked = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var checked, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            checked = (_b.sent()).getProperty('checked');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, checked];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the checkbox is in an indeterminate state. */\n        MatCheckboxHarness.prototype.isIndeterminate = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var indeterminate, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            indeterminate = (_b.sent()).getProperty('indeterminate');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, indeterminate];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the checkbox is disabled. */\n        MatCheckboxHarness.prototype.isDisabled = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var disabled, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            disabled = (_b.sent()).getAttribute('disabled');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, disabled];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the checkbox is required. */\n        MatCheckboxHarness.prototype.isRequired = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var required, _a;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1:\n                            required = (_b.sent()).getProperty('required');\n                            _a = coercion.coerceBooleanProperty;\n                            return [4 /*yield*/, required];\n                        case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        /** Gets a boolean promise indicating if the checkbox is valid. */\n        MatCheckboxHarness.prototype.isValid = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var invalid;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.host()];\n                        case 1:\n                            invalid = (_a.sent()).hasClass('ng-invalid');\n                            return [4 /*yield*/, invalid];\n                        case 2: return [2 /*return*/, !(_a.sent())];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the checkbox's name. */\n        MatCheckboxHarness.prototype.getName = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('name')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the checkbox's value. */\n        MatCheckboxHarness.prototype.getValue = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getProperty('value')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the checkbox's aria-label. */\n        MatCheckboxHarness.prototype.getAriaLabel = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-label')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the checkbox's aria-labelledby. */\n        MatCheckboxHarness.prototype.getAriaLabelledby = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).getAttribute('aria-labelledby')];\n                    }\n                });\n            });\n        };\n        /** Gets a promise for the checkbox's label text. */\n        MatCheckboxHarness.prototype.getLabelText = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._label()];\n                        case 1: return [2 /*return*/, (_a.sent()).text()];\n                    }\n                });\n            });\n        };\n        /** Focuses the checkbox and returns a void promise that indicates when the action is complete. */\n        MatCheckboxHarness.prototype.focus = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).focus()];\n                    }\n                });\n            });\n        };\n        /** Blurs the checkbox and returns a void promise that indicates when the action is complete. */\n        MatCheckboxHarness.prototype.blur = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._input()];\n                        case 1: return [2 /*return*/, (_a.sent()).blur()];\n                    }\n                });\n            });\n        };\n        /**\n         * Toggle the checked state of the checkbox and returns a void promise that indicates when the\n         * action is complete.\n         *\n         * Note: This attempts to toggle the checkbox as a user would, by clicking it. Therefore if you\n         * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n         * might not have the expected result.\n         */\n        MatCheckboxHarness.prototype.toggle = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._inputContainer()];\n                        case 1: return [2 /*return*/, (_a.sent()).click()];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing\n         * nothing if it is already checked. Returns a void promise that indicates when the action is\n         * complete.\n         *\n         * Note: This attempts to check the checkbox as a user would, by clicking it. Therefore if you\n         * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n         * might not have the expected result.\n         */\n        MatCheckboxHarness.prototype.check = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!!(_a.sent())) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing\n         * nothing if it is already unchecked. Returns a void promise that indicates when the action is\n         * complete.\n         *\n         * Note: This attempts to uncheck the checkbox as a user would, by clicking it. Therefore if you\n         * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n         * might not have the expected result.\n         */\n        MatCheckboxHarness.prototype.uncheck = function () {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.isChecked()];\n                        case 1:\n                            if (!_a.sent()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.toggle()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        MatCheckboxHarness.hostSelector = 'mat-checkbox';\n        return MatCheckboxHarness;\n    }(testing.ComponentHarness));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.MatCheckboxHarness = MatCheckboxHarness;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-checkbox-testing.umd.js.map\n"]}
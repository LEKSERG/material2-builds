{"version":3,"sources":["src/material/material-select.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","select","cdk","overlay","common","core","formField","tslib","a11y","bidi","coercion","collections","keycodes","scrolling","forms","rxjs","operators","animations","this","core$1","tslib_1","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatSelectTrigger","decorators","type","Directive","args","selector","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","apply","__spread","map","option","onSelectionChange","onStable","asObservable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","__extends","Object","defineProperty","prototype","get","enumerable","configurable","_placeholder","set","stateChanges","next","coerceBooleanProperty","_selectionModel","getMatSelectDynamicMultipleError","Error","fn","getMatSelectNonFunctionValueError","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","distinctUntilChanged","takeUntil","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","change","_triggerRect","nativeElement","getBoundingClientRect","ngAfterContentInit","_initKeyManager","onChange","event","added","forEach","removed","deselect","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","typeaheadDebounceInterval","ngOnDestroy","complete","toggle","close","open","disabled","length","getComputedStyle","fontSize","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","manager","ENTER","SPACE","hasModifierKey","altKey","preventDefault","previouslySelectedOption","HOME","END","setFirstItemActive","setLastItemActive","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","Array","isArray","getMatSelectNonArrayValueError","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","reduce","result","current","index","undefined","itemHeight","items","_getItemCount","panelHeight","Math","min","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","max","_getAriaLabel","ariaLabelledby","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","moduleId","exportAs","template","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","class","(keydown)","(focus)","(blur)","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","styles","ctorParameters","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","String","Attribute","Inject","LiveAnnouncer","propDecorators","ViewChild","static","CdkConnectedOverlay","ContentChildren","MatOption","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","disableOptionCentering","compareWith","errorStateMatcher","Output","MatSelectModule","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","MatFormFieldModule","declarations","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_PANEL_VIEWPORT_PADDING"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('@angular/material/form-field'), require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/cdk/keycodes'), require('@angular/cdk/scrolling'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@angular/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/select', ['exports', '@angular/cdk/overlay', '@angular/common', '@angular/core', '@angular/material/core', '@angular/material/form-field', 'tslib', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/cdk/keycodes', '@angular/cdk/scrolling', '@angular/forms', 'rxjs', 'rxjs/operators', '@angular/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.select = {}), global.ng.cdk.overlay, global.ng.common, global.ng.core, global.ng.material.core, global.ng.material.formField, global.tslib, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.collections, global.ng.cdk.keycodes, global.ng.cdk.scrolling, global.ng.forms, global.rxjs, global.rxjs.operators, global.ng.animations));\n}(this, function (exports, overlay, common, core, core$1, formField, tslib_1, a11y, bidi, coercion, collections, keycodes, scrolling, forms, rxjs, operators, animations) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The following are all the animations for the mat-select component, with each\n     * const containing the metadata for one animation.\n     *\n     * The values below match the implementation of the AngularJS Material mat-select animation.\n     * @docs-private\n     */\n    var matSelectAnimations = {\n        /**\n         * This animation ensures the select's overlay panel animation (transformPanel) is called when\n         * closing the select.\n         * This is needed due to https://github.com/angular/angular/issues/23302\n         */\n        transformPanelWrap: animations.trigger('transformPanelWrap', [\n            animations.transition('* => void', animations.query('@transformPanel', [animations.animateChild()], { optional: true }))\n        ]),\n        /**\n         * This animation transforms the select's overlay panel on and off the page.\n         *\n         * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n         * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n         * side to ensure the option text correctly overlaps the trigger text.\n         *\n         * When the panel is removed from the DOM, it simply fades out linearly.\n         */\n        transformPanel: animations.trigger('transformPanel', [\n            animations.state('void', animations.style({\n                transform: 'scaleY(0.8)',\n                minWidth: '100%',\n                opacity: 0\n            })),\n            animations.state('showing', animations.style({\n                opacity: 1,\n                minWidth: 'calc(100% + 32px)',\n                transform: 'scaleY(1)'\n            })),\n            animations.state('showing-multiple', animations.style({\n                opacity: 1,\n                minWidth: 'calc(100% + 64px)',\n                transform: 'scaleY(1)'\n            })),\n            animations.transition('void => *', animations.animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n            animations.transition('* => void', animations.animate('100ms 25ms linear', animations.style({ opacity: 0 })))\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an exception to be thrown when attempting to change a select's `multiple` option\n     * after initialization.\n     * @docs-private\n     */\n    function getMatSelectDynamicMultipleError() {\n        return Error('Cannot change `multiple` mode of select after initialization.');\n    }\n    /**\n     * Returns an exception to be thrown when attempting to assign a non-array value to a select\n     * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n     * resetting the value.\n     * @docs-private\n     */\n    function getMatSelectNonArrayValueError() {\n        return Error('Value must be an array in multiple-selection mode.');\n    }\n    /**\n     * Returns an exception to be thrown when assigning a non-function value to the comparator\n     * used to determine if a value corresponds to an option. Note that whether the function\n     * actually takes two values and returns a boolean is not checked.\n     */\n    function getMatSelectNonFunctionValueError() {\n        return Error('`compareWith` must be a function.');\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextUniqueId = 0;\n    /**\n     * The following style constants are necessary to save here in order\n     * to properly calculate the alignment of the selected option over\n     * the trigger element.\n     */\n    /** The max height of the select's overlay panel */\n    var SELECT_PANEL_MAX_HEIGHT = 256;\n    /** The panel's padding on the x-axis */\n    var SELECT_PANEL_PADDING_X = 16;\n    /** The panel's x axis padding if it is indented (e.g. there is an option group). */\n    var SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n    /** The height of the select items in `em` units. */\n    var SELECT_ITEM_HEIGHT_EM = 3;\n    // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n    /**\n     * Distance between the panel edge and the option text in\n     * multi-selection mode.\n     *\n     * Calculated as:\n     * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n     * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n     * The checkbox width is 16px.\n     */\n    var SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n    /**\n     * The select panel will only \"fit\" inside the viewport if it is positioned at\n     * this value or more away from the viewport boundary.\n     */\n    var SELECT_PANEL_VIEWPORT_PADDING = 8;\n    /** Injection token that determines the scroll handling while a select is open. */\n    var MAT_SELECT_SCROLL_STRATEGY = new core.InjectionToken('mat-select-scroll-strategy');\n    /** @docs-private */\n    function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition(); };\n    }\n    /** @docs-private */\n    var MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n        provide: MAT_SELECT_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n    /** Change event object that is emitted when the select value has changed. */\n    var MatSelectChange = /** @class */ (function () {\n        function MatSelectChange(\n        /** Reference to the select that emitted the change event. */\n        source, \n        /** Current value of the select that emitted the event. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatSelectChange;\n    }());\n    // Boilerplate for applying mixins to MatSelect.\n    /** @docs-private */\n    var MatSelectBase = /** @class */ (function () {\n        function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n            this._elementRef = _elementRef;\n            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n            this._parentForm = _parentForm;\n            this._parentFormGroup = _parentFormGroup;\n            this.ngControl = ngControl;\n        }\n        return MatSelectBase;\n    }());\n    var _MatSelectMixinBase = core$1.mixinDisableRipple(core$1.mixinTabIndex(core$1.mixinDisabled(core$1.mixinErrorState(MatSelectBase))));\n    /**\n     * Allows the user to customize the trigger that is displayed when the select has a value.\n     */\n    var MatSelectTrigger = /** @class */ (function () {\n        function MatSelectTrigger() {\n        }\n        MatSelectTrigger.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-select-trigger'\n                    },] }\n        ];\n        return MatSelectTrigger;\n    }());\n    var MatSelect = /** @class */ (function (_super) {\n        tslib_1.__extends(MatSelect, _super);\n        function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n            var _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n            _this._viewportRuler = _viewportRuler;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._ngZone = _ngZone;\n            _this._dir = _dir;\n            _this._parentFormField = _parentFormField;\n            _this.ngControl = ngControl;\n            _this._liveAnnouncer = _liveAnnouncer;\n            /** Whether or not the overlay panel is open. */\n            _this._panelOpen = false;\n            /** Whether filling out the select is required in the form. */\n            _this._required = false;\n            /** The scroll position of the overlay panel, calculated to center the selected option. */\n            _this._scrollTop = 0;\n            /** Whether the component is in multiple selection mode. */\n            _this._multiple = false;\n            /** Comparison function to specify which option is displayed. Defaults to object equality. */\n            _this._compareWith = function (o1, o2) { return o1 === o2; };\n            /** Unique id for this input. */\n            _this._uid = \"mat-select-\" + nextUniqueId++;\n            /** Emits whenever the component is destroyed. */\n            _this._destroy = new rxjs.Subject();\n            /** The cached font-size of the trigger element. */\n            _this._triggerFontSize = 0;\n            /** `View -> model callback called when value changes` */\n            _this._onChange = function () { };\n            /** `View -> model callback called when select has been touched` */\n            _this._onTouched = function () { };\n            /** The IDs of child options to be passed to the aria-owns attribute. */\n            _this._optionIds = '';\n            /** The value of the select panel's transform-origin property. */\n            _this._transformOrigin = 'top';\n            /** Emits when the panel element is finished transforming in. */\n            _this._panelDoneAnimatingStream = new rxjs.Subject();\n            /**\n             * The y-offset of the overlay panel in relation to the trigger's top start corner.\n             * This must be adjusted to align the selected option text over the trigger text.\n             * when the panel opens. Will change based on the y-position of the selected option.\n             */\n            _this._offsetY = 0;\n            /**\n             * This position config ensures that the top \"start\" corner of the overlay\n             * is aligned with with the top \"start\" of the origin by default (overlapping\n             * the trigger completely). If the panel cannot fit below the trigger, it\n             * will fall back to a position above the trigger.\n             */\n            _this._positions = [\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'top',\n                },\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n                },\n            ];\n            /** Whether the component is disabling centering of the active option over the trigger. */\n            _this._disableOptionCentering = false;\n            _this._focused = false;\n            /** A name for this control that can be used by `mat-form-field`. */\n            _this.controlType = 'mat-select';\n            /** Aria label of the select. If not specified, the placeholder will be used as label. */\n            _this.ariaLabel = '';\n            /** Combined stream of all of the child options' change events. */\n            _this.optionSelectionChanges = rxjs.defer(function () {\n                var options = _this.options;\n                if (options) {\n                    return options.changes.pipe(operators.startWith(options), operators.switchMap(function () { return rxjs.merge.apply(void 0, tslib_1.__spread(options.map(function (option) { return option.onSelectionChange; }))); }));\n                }\n                return _this._ngZone.onStable\n                    .asObservable()\n                    .pipe(operators.take(1), operators.switchMap(function () { return _this.optionSelectionChanges; }));\n            });\n            /** Event emitted when the select panel has been toggled. */\n            _this.openedChange = new core.EventEmitter();\n            /** Event emitted when the select has been opened. */\n            _this._openedStream = _this.openedChange.pipe(operators.filter(function (o) { return o; }), operators.map(function () { }));\n            /** Event emitted when the select has been closed. */\n            _this._closedStream = _this.openedChange.pipe(operators.filter(function (o) { return !o; }), operators.map(function () { }));\n            /** Event emitted when the selected value has been changed by the user. */\n            _this.selectionChange = new core.EventEmitter();\n            /**\n             * Event that emits whenever the raw value of the select changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            _this.valueChange = new core.EventEmitter();\n            if (_this.ngControl) {\n                // Note: we provide the value accessor through here, instead of\n                // the `providers` to avoid running into a circular import.\n                _this.ngControl.valueAccessor = _this;\n            }\n            _this._scrollStrategyFactory = scrollStrategyFactory;\n            _this._scrollStrategy = _this._scrollStrategyFactory();\n            _this.tabIndex = parseInt(tabIndex) || 0;\n            // Force setter to be called in case id was not specified.\n            _this.id = _this.id;\n            return _this;\n        }\n        Object.defineProperty(MatSelect.prototype, \"focused\", {\n            /** Whether the select is focused. */\n            get: function () {\n                return this._focused || this._panelOpen;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"placeholder\", {\n            /** Placeholder to be shown if no value has been selected. */\n            get: function () { return this._placeholder; },\n            set: function (value) {\n                this._placeholder = value;\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"required\", {\n            /** Whether the component is required. */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"multiple\", {\n            /** Whether the user should be allowed to select multiple options. */\n            get: function () { return this._multiple; },\n            set: function (value) {\n                if (this._selectionModel) {\n                    throw getMatSelectDynamicMultipleError();\n                }\n                this._multiple = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"disableOptionCentering\", {\n            /** Whether to center the active option over the trigger. */\n            get: function () { return this._disableOptionCentering; },\n            set: function (value) {\n                this._disableOptionCentering = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"compareWith\", {\n            /**\n             * Function to compare the option values with the selected values. The first argument\n             * is a value from an option. The second is a value from the selection. A boolean\n             * should be returned.\n             */\n            get: function () { return this._compareWith; },\n            set: function (fn) {\n                if (typeof fn !== 'function') {\n                    throw getMatSelectNonFunctionValueError();\n                }\n                this._compareWith = fn;\n                if (this._selectionModel) {\n                    // A different comparator means the selection could change.\n                    this._initializeSelection();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"value\", {\n            /** Value of the select control. */\n            get: function () { return this._value; },\n            set: function (newValue) {\n                if (newValue !== this._value) {\n                    this.writeValue(newValue);\n                    this._value = newValue;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"id\", {\n            /** Unique id of the element. */\n            get: function () { return this._id; },\n            set: function (value) {\n                this._id = value || this._uid;\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatSelect.prototype.ngOnInit = function () {\n            var _this = this;\n            this._selectionModel = new collections.SelectionModel(this.multiple);\n            this.stateChanges.next();\n            // We need `distinctUntilChanged` here, because some browsers will\n            // fire the animation end event twice for the same animation. See:\n            // https://github.com/angular/angular/issues/24084\n            this._panelDoneAnimatingStream\n                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this._destroy))\n                .subscribe(function () {\n                if (_this.panelOpen) {\n                    _this._scrollTop = 0;\n                    _this.openedChange.emit(true);\n                }\n                else {\n                    _this.openedChange.emit(false);\n                    _this.overlayDir.offsetX = 0;\n                    _this._changeDetectorRef.markForCheck();\n                }\n            });\n            this._viewportRuler.change()\n                .pipe(operators.takeUntil(this._destroy))\n                .subscribe(function () {\n                if (_this._panelOpen) {\n                    _this._triggerRect = _this.trigger.nativeElement.getBoundingClientRect();\n                    _this._changeDetectorRef.markForCheck();\n                }\n            });\n        };\n        MatSelect.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._initKeyManager();\n            this._selectionModel.onChange.pipe(operators.takeUntil(this._destroy)).subscribe(function (event) {\n                event.added.forEach(function (option) { return option.select(); });\n                event.removed.forEach(function (option) { return option.deselect(); });\n            });\n            this.options.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroy)).subscribe(function () {\n                _this._resetOptions();\n                _this._initializeSelection();\n            });\n        };\n        MatSelect.prototype.ngDoCheck = function () {\n            if (this.ngControl) {\n                this.updateErrorState();\n            }\n        };\n        MatSelect.prototype.ngOnChanges = function (changes) {\n            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n            // the parent form field know to run change detection when the disabled state changes.\n            if (changes['disabled']) {\n                this.stateChanges.next();\n            }\n            if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n                this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n            }\n        };\n        MatSelect.prototype.ngOnDestroy = function () {\n            this._destroy.next();\n            this._destroy.complete();\n            this.stateChanges.complete();\n        };\n        /** Toggles the overlay panel open or closed. */\n        MatSelect.prototype.toggle = function () {\n            this.panelOpen ? this.close() : this.open();\n        };\n        /** Opens the overlay panel. */\n        MatSelect.prototype.open = function () {\n            var _this = this;\n            if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n                return;\n            }\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._calculateOverlayPosition();\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.asObservable().pipe(operators.take(1)).subscribe(function () {\n                if (_this._triggerFontSize && _this.overlayDir.overlayRef &&\n                    _this.overlayDir.overlayRef.overlayElement) {\n                    _this.overlayDir.overlayRef.overlayElement.style.fontSize = _this._triggerFontSize + \"px\";\n                }\n            });\n        };\n        /** Closes the overlay panel and focuses the host element. */\n        MatSelect.prototype.close = function () {\n            if (this._panelOpen) {\n                this._panelOpen = false;\n                this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n                this._changeDetectorRef.markForCheck();\n                this._onTouched();\n            }\n        };\n        /**\n         * Sets the select's value. Part of the ControlValueAccessor interface\n         * required to integrate with Angular's core forms API.\n         *\n         * @param value New value to be written to the model.\n         */\n        MatSelect.prototype.writeValue = function (value) {\n            if (this.options) {\n                this._setSelectionByValue(value);\n            }\n        };\n        /**\n         * Saves a callback function to be invoked when the select's value\n         * changes from user input. Part of the ControlValueAccessor interface\n         * required to integrate with Angular's core forms API.\n         *\n         * @param fn Callback to be triggered when the value changes.\n         */\n        MatSelect.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        /**\n         * Saves a callback function to be invoked when the select is blurred\n         * by the user. Part of the ControlValueAccessor interface required\n         * to integrate with Angular's core forms API.\n         *\n         * @param fn Callback to be triggered when the component has been touched.\n         */\n        MatSelect.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        /**\n         * Disables the select. Part of the ControlValueAccessor interface required\n         * to integrate with Angular's core forms API.\n         *\n         * @param isDisabled Sets whether the component is disabled.\n         */\n        MatSelect.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        };\n        Object.defineProperty(MatSelect.prototype, \"panelOpen\", {\n            /** Whether or not the overlay panel is open. */\n            get: function () {\n                return this._panelOpen;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"selected\", {\n            /** The currently selected option. */\n            get: function () {\n                return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatSelect.prototype, \"triggerValue\", {\n            /** The value displayed in the trigger. */\n            get: function () {\n                if (this.empty) {\n                    return '';\n                }\n                if (this._multiple) {\n                    var selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                    if (this._isRtl()) {\n                        selectedOptions.reverse();\n                    }\n                    // TODO(crisbeto): delimiter should be configurable for proper localization.\n                    return selectedOptions.join(', ');\n                }\n                return this._selectionModel.selected[0].viewValue;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Whether the element is in RTL mode. */\n        MatSelect.prototype._isRtl = function () {\n            return this._dir ? this._dir.value === 'rtl' : false;\n        };\n        /** Handles all keydown events on the select. */\n        MatSelect.prototype._handleKeydown = function (event) {\n            if (!this.disabled) {\n                this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n            }\n        };\n        /** Handles keyboard events while the select is closed. */\n        MatSelect.prototype._handleClosedKeydown = function (event) {\n            var keyCode = event.keyCode;\n            var isArrowKey = keyCode === keycodes.DOWN_ARROW || keyCode === keycodes.UP_ARROW ||\n                keyCode === keycodes.LEFT_ARROW || keyCode === keycodes.RIGHT_ARROW;\n            var isOpenKey = keyCode === keycodes.ENTER || keyCode === keycodes.SPACE;\n            var manager = this._keyManager;\n            // Open the select on ALT + arrow key to match the native <select>\n            if ((isOpenKey && !keycodes.hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n                event.preventDefault(); // prevents the page from scrolling down when pressing space\n                this.open();\n            }\n            else if (!this.multiple) {\n                var previouslySelectedOption = this.selected;\n                if (keyCode === keycodes.HOME || keyCode === keycodes.END) {\n                    keyCode === keycodes.HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n                var selectedOption = this.selected;\n                // Since the value has changed, we need to announce it ourselves.\n                if (selectedOption && previouslySelectedOption !== selectedOption) {\n                    // We set a duration on the live announcement, because we want the live element to be\n                    // cleared after a while so that users can't navigate to it using the arrow keys.\n                    this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n                }\n            }\n        };\n        /** Handles keyboard events when the selected is open. */\n        MatSelect.prototype._handleOpenKeydown = function (event) {\n            var keyCode = event.keyCode;\n            var isArrowKey = keyCode === keycodes.DOWN_ARROW || keyCode === keycodes.UP_ARROW;\n            var manager = this._keyManager;\n            if (keyCode === keycodes.HOME || keyCode === keycodes.END) {\n                event.preventDefault();\n                keyCode === keycodes.HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            }\n            else if (isArrowKey && event.altKey) {\n                // Close the select on ALT + arrow key to match the native <select>\n                event.preventDefault();\n                this.close();\n            }\n            else if ((keyCode === keycodes.ENTER || keyCode === keycodes.SPACE) && manager.activeItem &&\n                !keycodes.hasModifierKey(event)) {\n                event.preventDefault();\n                manager.activeItem._selectViaInteraction();\n            }\n            else if (this._multiple && keyCode === keycodes.A && event.ctrlKey) {\n                event.preventDefault();\n                var hasDeselectedOptions_1 = this.options.some(function (opt) { return !opt.disabled && !opt.selected; });\n                this.options.forEach(function (option) {\n                    if (!option.disabled) {\n                        hasDeselectedOptions_1 ? option.select() : option.deselect();\n                    }\n                });\n            }\n            else {\n                var previouslyFocusedIndex = manager.activeItemIndex;\n                manager.onKeydown(event);\n                if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                    manager.activeItemIndex !== previouslyFocusedIndex) {\n                    manager.activeItem._selectViaInteraction();\n                }\n            }\n        };\n        MatSelect.prototype._onFocus = function () {\n            if (!this.disabled) {\n                this._focused = true;\n                this.stateChanges.next();\n            }\n        };\n        /**\n         * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n         * \"blur\" to the panel when it opens, causing a false positive.\n         */\n        MatSelect.prototype._onBlur = function () {\n            this._focused = false;\n            if (!this.disabled && !this.panelOpen) {\n                this._onTouched();\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            }\n        };\n        /**\n         * Callback that is invoked when the overlay panel has been attached.\n         */\n        MatSelect.prototype._onAttached = function () {\n            var _this = this;\n            this.overlayDir.positionChange.pipe(operators.take(1)).subscribe(function () {\n                _this._changeDetectorRef.detectChanges();\n                _this._calculateOverlayOffsetX();\n                _this.panel.nativeElement.scrollTop = _this._scrollTop;\n            });\n        };\n        /** Returns the theme to be used on the panel. */\n        MatSelect.prototype._getPanelTheme = function () {\n            return this._parentFormField ? \"mat-\" + this._parentFormField.color : '';\n        };\n        Object.defineProperty(MatSelect.prototype, \"empty\", {\n            /** Whether the select has a value. */\n            get: function () {\n                return !this._selectionModel || this._selectionModel.isEmpty();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatSelect.prototype._initializeSelection = function () {\n            var _this = this;\n            // Defer setting the value in order to avoid the \"Expression\n            // has changed after it was checked\" errors from Angular.\n            Promise.resolve().then(function () {\n                _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);\n                _this.stateChanges.next();\n            });\n        };\n        /**\n         * Sets the selected option based on a value. If no option can be\n         * found with the designated value, the select trigger is cleared.\n         */\n        MatSelect.prototype._setSelectionByValue = function (value) {\n            var _this = this;\n            if (this.multiple && value) {\n                if (!Array.isArray(value)) {\n                    throw getMatSelectNonArrayValueError();\n                }\n                this._selectionModel.clear();\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n                this._sortValues();\n            }\n            else {\n                this._selectionModel.clear();\n                var correspondingOption = this._selectValue(value);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what option the user interacted with last.\n                if (correspondingOption) {\n                    this._keyManager.setActiveItem(correspondingOption);\n                }\n                else if (!this.panelOpen) {\n                    // Otherwise reset the highlighted option. Note that we only want to do this while\n                    // closed, because doing it while open can shift the user's focus unnecessarily.\n                    this._keyManager.setActiveItem(-1);\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Finds and selects and option based on its value.\n         * @returns Option that has the corresponding value.\n         */\n        MatSelect.prototype._selectValue = function (value) {\n            var _this = this;\n            var correspondingOption = this.options.find(function (option) {\n                try {\n                    // Treat null as a special reset value.\n                    return option.value != null && _this._compareWith(option.value, value);\n                }\n                catch (error) {\n                    if (core.isDevMode()) {\n                        // Notify developers of errors in their comparator.\n                        console.warn(error);\n                    }\n                    return false;\n                }\n            });\n            if (correspondingOption) {\n                this._selectionModel.select(correspondingOption);\n            }\n            return correspondingOption;\n        };\n        /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n        MatSelect.prototype._initKeyManager = function () {\n            var _this = this;\n            this._keyManager = new a11y.ActiveDescendantKeyManager(this.options)\n                .withTypeAhead(this.typeaheadDebounceInterval)\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n                .withAllowedModifierKeys(['shiftKey']);\n            this._keyManager.tabOut.pipe(operators.takeUntil(this._destroy)).subscribe(function () {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                _this.focus();\n                _this.close();\n            });\n            this._keyManager.change.pipe(operators.takeUntil(this._destroy)).subscribe(function () {\n                if (_this._panelOpen && _this.panel) {\n                    _this._scrollActiveOptionIntoView();\n                }\n                else if (!_this._panelOpen && !_this.multiple && _this._keyManager.activeItem) {\n                    _this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n        };\n        /** Drops current option subscriptions and IDs and resets from scratch. */\n        MatSelect.prototype._resetOptions = function () {\n            var _this = this;\n            var changedOrDestroyed = rxjs.merge(this.options.changes, this._destroy);\n            this.optionSelectionChanges.pipe(operators.takeUntil(changedOrDestroyed)).subscribe(function (event) {\n                _this._onSelect(event.source, event.isUserInput);\n                if (event.isUserInput && !_this.multiple && _this._panelOpen) {\n                    _this.close();\n                    _this.focus();\n                }\n            });\n            // Listen to changes in the internal state of the options and react accordingly.\n            // Handles cases like the labels of the selected options changing.\n            rxjs.merge.apply(void 0, tslib_1.__spread(this.options.map(function (option) { return option._stateChanges; }))).pipe(operators.takeUntil(changedOrDestroyed))\n                .subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n                _this.stateChanges.next();\n            });\n            this._setOptionIds();\n        };\n        /** Invoked when an option is clicked. */\n        MatSelect.prototype._onSelect = function (option, isUserInput) {\n            var wasSelected = this._selectionModel.isSelected(option);\n            if (option.value == null && !this._multiple) {\n                option.deselect();\n                this._selectionModel.clear();\n                this._propagateChanges(option.value);\n            }\n            else {\n                if (wasSelected !== option.selected) {\n                    option.selected ? this._selectionModel.select(option) :\n                        this._selectionModel.deselect(option);\n                }\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(option);\n                }\n                if (this.multiple) {\n                    this._sortValues();\n                    if (isUserInput) {\n                        // In case the user selected the option with their mouse, we\n                        // want to restore focus back to the trigger, in order to\n                        // prevent the select keyboard controls from clashing with\n                        // the ones from `mat-option`.\n                        this.focus();\n                    }\n                }\n            }\n            if (wasSelected !== this._selectionModel.isSelected(option)) {\n                this._propagateChanges();\n            }\n            this.stateChanges.next();\n        };\n        /** Sorts the selected values in the selected based on their order in the panel. */\n        MatSelect.prototype._sortValues = function () {\n            var _this = this;\n            if (this.multiple) {\n                var options_1 = this.options.toArray();\n                this._selectionModel.sort(function (a, b) {\n                    return _this.sortComparator ? _this.sortComparator(a, b, options_1) :\n                        options_1.indexOf(a) - options_1.indexOf(b);\n                });\n                this.stateChanges.next();\n            }\n        };\n        /** Emits change event to set the model value. */\n        MatSelect.prototype._propagateChanges = function (fallbackValue) {\n            var valueToEmit = null;\n            if (this.multiple) {\n                valueToEmit = this.selected.map(function (option) { return option.value; });\n            }\n            else {\n                valueToEmit = this.selected ? this.selected.value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n            this._changeDetectorRef.markForCheck();\n        };\n        /** Records option IDs to pass to the aria-owns property. */\n        MatSelect.prototype._setOptionIds = function () {\n            this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n        };\n        /**\n         * Highlights the selected item. If no option is selected, it will highlight\n         * the first item instead.\n         */\n        MatSelect.prototype._highlightCorrectOption = function () {\n            if (this._keyManager) {\n                if (this.empty) {\n                    this._keyManager.setFirstItemActive();\n                }\n                else {\n                    this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n                }\n            }\n        };\n        /** Scrolls the active option into view. */\n        MatSelect.prototype._scrollActiveOptionIntoView = function () {\n            var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n            var labelCount = core$1._countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n            this.panel.nativeElement.scrollTop = core$1._getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        };\n        /** Focuses the select element. */\n        MatSelect.prototype.focus = function (options) {\n            this._elementRef.nativeElement.focus(options);\n        };\n        /** Gets the index of the provided option in the option list. */\n        MatSelect.prototype._getOptionIndex = function (option) {\n            return this.options.reduce(function (result, current, index) {\n                return result === undefined ? (option === current ? index : undefined) : result;\n            }, undefined);\n        };\n        /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n        MatSelect.prototype._calculateOverlayPosition = function () {\n            var itemHeight = this._getItemHeight();\n            var items = this._getItemCount();\n            var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n            var scrollContainerHeight = items * itemHeight;\n            // The farthest the panel can be scrolled before it hits the bottom\n            var maxScroll = scrollContainerHeight - panelHeight;\n            // If no value is selected we open the popup to the first item.\n            var selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n            selectedOptionOffset += core$1._countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n            // We must maintain a scroll buffer so the selected option will be scrolled to the\n            // center of the overlay panel rather than the top.\n            var scrollBuffer = panelHeight / 2;\n            this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._checkOverlayWithinViewport(maxScroll);\n        };\n        /**\n         * Calculates the scroll position of the select's overlay panel.\n         *\n         * Attempts to center the selected option in the panel. If the option is\n         * too high or too low in the panel to be scrolled to the center, it clamps the\n         * scroll position to the min or max scroll positions respectively.\n         */\n        MatSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {\n            var itemHeight = this._getItemHeight();\n            var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n            var halfOptionHeight = itemHeight / 2;\n            // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n            // scroll container, then subtracts the scroll buffer to scroll the option down to\n            // the center of the overlay panel. Half the option height must be re-added to the\n            // scrollTop so the option is centered based on its middle, not its top edge.\n            var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n            return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n        };\n        /** Returns the aria-label of the select component. */\n        MatSelect.prototype._getAriaLabel = function () {\n            // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n            // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n            return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n        };\n        /** Returns the aria-labelledby of the select component. */\n        MatSelect.prototype._getAriaLabelledby = function () {\n            if (this.ariaLabelledby) {\n                return this.ariaLabelledby;\n            }\n            // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n            // computed label. `this.ariaLabel` is only the user-specified label.\n            if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n                this._getAriaLabel()) {\n                return null;\n            }\n            return this._parentFormField._labelId || null;\n        };\n        /** Determines the `aria-activedescendant` to be set on the host. */\n        MatSelect.prototype._getAriaActiveDescendant = function () {\n            if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n                return this._keyManager.activeItem.id;\n            }\n            return null;\n        };\n        /**\n         * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text when\n         * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n         * can't be calculated until the panel has been attached, because we need to know the\n         * content width in order to constrain the panel within the viewport.\n         */\n        MatSelect.prototype._calculateOverlayOffsetX = function () {\n            var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n            var viewportSize = this._viewportRuler.getViewportSize();\n            var isRtl = this._isRtl();\n            var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                SELECT_PANEL_PADDING_X * 2;\n            var offsetX;\n            // Adjust the offset, depending on the option padding.\n            if (this.multiple) {\n                offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n            }\n            else {\n                var selected = this._selectionModel.selected[0] || this.options.first;\n                offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n            }\n            // Invert the offset in LTR.\n            if (!isRtl) {\n                offsetX *= -1;\n            }\n            // Determine how much the select overflows on each side.\n            var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n            var rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                + (isRtl ? 0 : paddingWidth);\n            // If the element overflows on either side, reduce the offset to allow it to fit.\n            if (leftOverflow > 0) {\n                offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n            }\n            else if (rightOverflow > 0) {\n                offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n            }\n            // Set the offset directly in order to avoid having to go through change detection and\n            // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n            // blurry content in some browsers.\n            this.overlayDir.offsetX = Math.round(offsetX);\n            this.overlayDir.overlayRef.updatePosition();\n        };\n        /**\n         * Calculates the y-offset of the select's overlay panel in relation to the\n         * top start corner of the trigger. It has to be adjusted in order for the\n         * selected option to be aligned over the trigger when the panel opens.\n         */\n        MatSelect.prototype._calculateOverlayOffsetY = function (selectedIndex, scrollBuffer, maxScroll) {\n            var itemHeight = this._getItemHeight();\n            var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n            var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n            var optionOffsetFromPanelTop;\n            // Disable offset if requested by user by returning 0 as value to offset\n            if (this._disableOptionCentering) {\n                return 0;\n            }\n            if (this._scrollTop === 0) {\n                optionOffsetFromPanelTop = selectedIndex * itemHeight;\n            }\n            else if (this._scrollTop === maxScroll) {\n                var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n                var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n                // The first item is partially out of the viewport. Therefore we need to calculate what\n                // portion of it is shown in the viewport and account for it in our offset.\n                var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n                // Because the panel height is longer than the height of the options alone,\n                // there is always extra padding at the top or bottom of the panel. When\n                // scrolled to the very bottom, this padding is at the top of the panel and\n                // must be added to the offset.\n                optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n            }\n            else {\n                // If the option was scrolled to the middle of the panel using a scroll buffer,\n                // its offset will be the scroll buffer minus the half height that was added to\n                // center it.\n                optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n            }\n            // The final offset is the option's offset from the top, adjusted for the height difference,\n            // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n            // The value is rounded to prevent some browsers from blurring the content.\n            return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n        };\n        /**\n         * Checks that the attempted overlay position will fit within the viewport.\n         * If it will not fit, tries to adjust the scroll position and the associated\n         * y-offset so the panel can open fully on-screen. If it still won't fit,\n         * sets the offset back to 0 to allow the fallback position to take over.\n         */\n        MatSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {\n            var itemHeight = this._getItemHeight();\n            var viewportSize = this._viewportRuler.getViewportSize();\n            var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n            var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n            var panelHeightTop = Math.abs(this._offsetY);\n            var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n            var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n            if (panelHeightBottom > bottomSpaceAvailable) {\n                this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n            }\n            else if (panelHeightTop > topSpaceAvailable) {\n                this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n            }\n            else {\n                this._transformOrigin = this._getOriginBasedOnOption();\n            }\n        };\n        /** Adjusts the overlay panel up to fit in the viewport. */\n        MatSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {\n            // Browsers ignore fractional scroll offsets, so we need to round.\n            var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n            // Scrolls the panel up by the distance it was extending past the boundary, then\n            // adjusts the offset by that amount to move the panel up into the viewport.\n            this._scrollTop -= distanceBelowViewport;\n            this._offsetY -= distanceBelowViewport;\n            this._transformOrigin = this._getOriginBasedOnOption();\n            // If the panel is scrolled to the very top, it won't be able to fit the panel\n            // by scrolling, so set the offset to 0 to allow the fallback position to take\n            // effect.\n            if (this._scrollTop <= 0) {\n                this._scrollTop = 0;\n                this._offsetY = 0;\n                this._transformOrigin = \"50% bottom 0px\";\n            }\n        };\n        /** Adjusts the overlay panel down to fit in the viewport. */\n        MatSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {\n            // Browsers ignore fractional scroll offsets, so we need to round.\n            var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n            // Scrolls the panel down by the distance it was extending past the boundary, then\n            // adjusts the offset by that amount to move the panel down into the viewport.\n            this._scrollTop += distanceAboveViewport;\n            this._offsetY += distanceAboveViewport;\n            this._transformOrigin = this._getOriginBasedOnOption();\n            // If the panel is scrolled to the very bottom, it won't be able to fit the\n            // panel by scrolling, so set the offset to 0 to allow the fallback position\n            // to take effect.\n            if (this._scrollTop >= maxScroll) {\n                this._scrollTop = maxScroll;\n                this._offsetY = 0;\n                this._transformOrigin = \"50% top 0px\";\n                return;\n            }\n        };\n        /** Sets the transform origin point based on the selected option. */\n        MatSelect.prototype._getOriginBasedOnOption = function () {\n            var itemHeight = this._getItemHeight();\n            var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n            var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n            return \"50% \" + originY + \"px 0px\";\n        };\n        /** Calculates the amount of items in the select. This includes options and group labels. */\n        MatSelect.prototype._getItemCount = function () {\n            return this.options.length + this.optionGroups.length;\n        };\n        /** Calculates the height of the select's options. */\n        MatSelect.prototype._getItemHeight = function () {\n            return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatSelect.prototype.setDescribedByIds = function (ids) {\n            this._ariaDescribedby = ids.join(' ');\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatSelect.prototype.onContainerClick = function () {\n            this.focus();\n            this.open();\n        };\n        Object.defineProperty(MatSelect.prototype, \"shouldLabelFloat\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return this._panelOpen || !this.empty;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatSelect.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'mat-select',\n                        exportAs: 'matSelect',\n                        template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     aria-hidden=\\\"true\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                        inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        host: {\n                            'role': 'listbox',\n                            '[attr.id]': 'id',\n                            '[attr.tabindex]': 'tabIndex',\n                            '[attr.aria-label]': '_getAriaLabel()',\n                            '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                            '[attr.aria-required]': 'required.toString()',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-invalid]': 'errorState',\n                            '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                            '[attr.aria-multiselectable]': 'multiple',\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                            '[class.mat-select-disabled]': 'disabled',\n                            '[class.mat-select-invalid]': 'errorState',\n                            '[class.mat-select-required]': 'required',\n                            '[class.mat-select-empty]': 'empty',\n                            'class': 'mat-select',\n                            '(keydown)': '_handleKeydown($event)',\n                            '(focus)': '_onFocus()',\n                            '(blur)': '_onBlur()',\n                        },\n                        animations: [\n                            matSelectAnimations.transformPanelWrap,\n                            matSelectAnimations.transformPanel\n                        ],\n                        providers: [\n                            { provide: formField.MatFormFieldControl, useExisting: MatSelect },\n                            { provide: core$1.MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                        ],\n                        styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media(-ms-high-contrast: active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatSelect.ctorParameters = function () { return [\n            { type: scrolling.ViewportRuler },\n            { type: core.ChangeDetectorRef },\n            { type: core.NgZone },\n            { type: core$1.ErrorStateMatcher },\n            { type: core.ElementRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: forms.NgForm, decorators: [{ type: core.Optional }] },\n            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },\n            { type: formField.MatFormField, decorators: [{ type: core.Optional }] },\n            { type: forms.NgControl, decorators: [{ type: core.Self }, { type: core.Optional }] },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n            { type: a11y.LiveAnnouncer }\n        ]; };\n        MatSelect.propDecorators = {\n            trigger: [{ type: core.ViewChild, args: ['trigger', { static: false },] }],\n            panel: [{ type: core.ViewChild, args: ['panel', { static: false },] }],\n            overlayDir: [{ type: core.ViewChild, args: [overlay.CdkConnectedOverlay, { static: false },] }],\n            options: [{ type: core.ContentChildren, args: [core$1.MatOption, { descendants: true },] }],\n            optionGroups: [{ type: core.ContentChildren, args: [core$1.MatOptgroup,] }],\n            panelClass: [{ type: core.Input }],\n            customTrigger: [{ type: core.ContentChild, args: [MatSelectTrigger, { static: false },] }],\n            placeholder: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            multiple: [{ type: core.Input }],\n            disableOptionCentering: [{ type: core.Input }],\n            compareWith: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n            errorStateMatcher: [{ type: core.Input }],\n            typeaheadDebounceInterval: [{ type: core.Input }],\n            sortComparator: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            openedChange: [{ type: core.Output }],\n            _openedStream: [{ type: core.Output, args: ['opened',] }],\n            _closedStream: [{ type: core.Output, args: ['closed',] }],\n            selectionChange: [{ type: core.Output }],\n            valueChange: [{ type: core.Output }]\n        };\n        return MatSelect;\n    }(_MatSelectMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatSelectModule = /** @class */ (function () {\n        function MatSelectModule() {\n        }\n        MatSelectModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule,\n                            overlay.OverlayModule,\n                            core$1.MatOptionModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: [formField.MatFormFieldModule, MatSelect, MatSelectTrigger, core$1.MatOptionModule, core$1.MatCommonModule],\n                        declarations: [MatSelect, MatSelectTrigger],\n                        providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n                    },] }\n        ];\n        return MatSelectModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatSelectModule = MatSelectModule;\n    exports.SELECT_PANEL_MAX_HEIGHT = SELECT_PANEL_MAX_HEIGHT;\n    exports.SELECT_PANEL_PADDING_X = SELECT_PANEL_PADDING_X;\n    exports.SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_INDENT_PADDING_X;\n    exports.SELECT_ITEM_HEIGHT_EM = SELECT_ITEM_HEIGHT_EM;\n    exports.SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_MULTIPLE_PANEL_PADDING_X;\n    exports.SELECT_PANEL_VIEWPORT_PADDING = SELECT_PANEL_VIEWPORT_PADDING;\n    exports.MAT_SELECT_SCROLL_STRATEGY = MAT_SELECT_SCROLL_STRATEGY;\n    exports.MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY = MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.MAT_SELECT_SCROLL_STRATEGY_PROVIDER = MAT_SELECT_SCROLL_STRATEGY_PROVIDER;\n    exports.MatSelectChange = MatSelectChange;\n    exports.MatSelectTrigger = MatSelectTrigger;\n    exports.MatSelect = MatSelect;\n    exports.matSelectAnimations = matSelectAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=material-select.umd.js.map\n"]}